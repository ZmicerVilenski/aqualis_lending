{
  "address": "0x3e18029E9CbAcDd2f16056c14021839Dbb12e84D",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "reserve",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "backer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "BackUnbacked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "reserve",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "onBehalfOf",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "referralCode",
          "type": "uint16"
        }
      ],
      "name": "MintUnbacked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "reserve",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "ReserveUsedAsCollateralEnabled",
      "type": "event"
    }
  ],
  "transactionHash": "0x5bd92e1b27cc4cfca03610f0a6f76cdd7adcb92c3e8b2f835b52c7884f065d85",
  "receipt": {
    "to": null,
    "from": "0x577B08faE2F7fEDD5BFeDe95E02445ed56D02e0e",
    "contractAddress": "0x3e18029E9CbAcDd2f16056c14021839Dbb12e84D",
    "transactionIndex": 44,
    "gasUsed": "1810600",
    "logsBloom": "0x
    "blockHash": "0x07fd9cab56f5591329c18d94e37163cc436c29a8f1ce51fa1e6fc1d45da93e21",
    "transactionHash": "0x5bd92e1b27cc4cfca03610f0a6f76cdd7adcb92c3e8b2f835b52c7884f065d85",
    "logs": [],
    "blockNumber": 8171114,
    "cumulativeGasUsed": "11462456",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "945f0ba62ddff0d0d4db696532f357a5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"reserve\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"backer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"BackUnbacked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"reserve\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"referralCode\",\"type\":\"uint16\"}],\"name\":\"MintUnbacked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"reserve\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"ReserveUsedAsCollateralEnabled\",\"type\":\"event\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"executeBackUnbacked(DataTypes.ReserveData storage,address,uint256,uint256,uint256)\":{\"details\":\"Emits the `BackUnbacked` event\",\"params\":{\"amount\":\"The amount to back\",\"asset\":\"The address of the underlying asset to repay\",\"fee\":\"The amount paid in fees\",\"protocolFeeBps\":\"The fraction of fees in basis points paid to the protocol*\",\"reserve\":\"The reserve to back unbacked for\"}},\"executeMintUnbacked(mapping(address => DataTypes.ReserveData) storage,mapping(uint256 => address) storage,DataTypes.UserConfigurationMap storage,address,uint256,address,uint16)\":{\"details\":\"Essentially a supply without transferring the underlying.Emits the `MintUnbacked` eventEmits the `ReserveUsedAsCollateralEnabled` if asset is set as collateral\",\"params\":{\"amount\":\"The amount to mint\",\"asset\":\"The address of the underlying asset to mint aTokens of\",\"onBehalfOf\":\"The address that will receive the aTokens\",\"referralCode\":\"Code used to register the integrator originating the operation, for potential rewards.   0 if the action is executed directly by the user, without any middle-man*\",\"reservesData\":\"The state of all the reserves\",\"reservesList\":\"The addresses of all the active reserves\",\"userConfig\":\"The user configuration mapping that tracks the supplied/borrowed assets\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"executeBackUnbacked(DataTypes.ReserveData storage,address,uint256,uint256,uint256)\":{\"notice\":\"Back the current unbacked with `amount` and pay `fee`.\"},\"executeMintUnbacked(mapping(address => DataTypes.ReserveData) storage,mapping(uint256 => address) storage,DataTypes.UserConfigurationMap storage,address,uint256,address,uint16)\":{\"notice\":\"Mint unbacked aTokens to a user and updates the unbacked for the reserve.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"core-v3/contracts/protocol/libraries/logic/BridgeLogic.sol\":\"BridgeLogic\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100000},\"remappings\":[]},\"sources\":{\"core-v3/contracts/dependencies/gnosis/contracts/GPv2SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-or-later\\r\\npragma solidity 0.8.10;\\r\\n\\r\\nimport {IERC20} from '../../openzeppelin/contracts/IERC20.sol';\\r\\n\\r\\n/// @title Gnosis Protocol v2 Safe ERC20 Transfer Library\\r\\n/// @author Gnosis Developers\\r\\n/// @dev Gas-efficient version of Openzeppelin's SafeERC20 contract.\\r\\nlibrary GPv2SafeERC20 {\\r\\n  /// @dev Wrapper around a call to the ERC20 function `transfer` that reverts\\r\\n  /// also when the token returns `false`.\\r\\n  function safeTransfer(\\r\\n    IERC20 token,\\r\\n    address to,\\r\\n    uint256 value\\r\\n  ) internal {\\r\\n    bytes4 selector_ = token.transfer.selector;\\r\\n\\r\\n    // solhint-disable-next-line no-inline-assembly\\r\\n    assembly {\\r\\n      let freeMemoryPointer := mload(0x40)\\r\\n      mstore(freeMemoryPointer, selector_)\\r\\n      mstore(add(freeMemoryPointer, 4), and(to, 0xffffffffffffffffffffffffffffffffffffffff))\\r\\n      mstore(add(freeMemoryPointer, 36), value)\\r\\n\\r\\n      if iszero(call(gas(), token, 0, freeMemoryPointer, 68, 0, 0)) {\\r\\n        returndatacopy(0, 0, returndatasize())\\r\\n        revert(0, returndatasize())\\r\\n      }\\r\\n    }\\r\\n\\r\\n    require(getLastTransferResult(token), 'GPv2: failed transfer');\\r\\n  }\\r\\n\\r\\n  /// @dev Wrapper around a call to the ERC20 function `transferFrom` that\\r\\n  /// reverts also when the token returns `false`.\\r\\n  function safeTransferFrom(\\r\\n    IERC20 token,\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 value\\r\\n  ) internal {\\r\\n    bytes4 selector_ = token.transferFrom.selector;\\r\\n\\r\\n    // solhint-disable-next-line no-inline-assembly\\r\\n    assembly {\\r\\n      let freeMemoryPointer := mload(0x40)\\r\\n      mstore(freeMemoryPointer, selector_)\\r\\n      mstore(add(freeMemoryPointer, 4), and(from, 0xffffffffffffffffffffffffffffffffffffffff))\\r\\n      mstore(add(freeMemoryPointer, 36), and(to, 0xffffffffffffffffffffffffffffffffffffffff))\\r\\n      mstore(add(freeMemoryPointer, 68), value)\\r\\n\\r\\n      if iszero(call(gas(), token, 0, freeMemoryPointer, 100, 0, 0)) {\\r\\n        returndatacopy(0, 0, returndatasize())\\r\\n        revert(0, returndatasize())\\r\\n      }\\r\\n    }\\r\\n\\r\\n    require(getLastTransferResult(token), 'GPv2: failed transferFrom');\\r\\n  }\\r\\n\\r\\n  /// @dev Verifies that the last return was a successful `transfer*` call.\\r\\n  /// This is done by checking that the return data is either empty, or\\r\\n  /// is a valid ABI encoded boolean.\\r\\n  function getLastTransferResult(IERC20 token) private view returns (bool success) {\\r\\n    // NOTE: Inspecting previous return data requires assembly. Note that\\r\\n    // we write the return data to memory 0 in the case where the return\\r\\n    // data size is 32, this is OK since the first 64 bytes of memory are\\r\\n    // reserved by Solidy as a scratch space that can be used within\\r\\n    // assembly blocks.\\r\\n    // <https://docs.soliditylang.org/en/v0.7.6/internals/layout_in_memory.html>\\r\\n    // solhint-disable-next-line no-inline-assembly\\r\\n    assembly {\\r\\n      /// @dev Revert with an ABI encoded Solidity error with a message\\r\\n      /// that fits into 32-bytes.\\r\\n      ///\\r\\n      /// An ABI encoded Solidity error has the following memory layout:\\r\\n      ///\\r\\n      /// ------------+----------------------------------\\r\\n      ///  byte range | value\\r\\n      /// ------------+----------------------------------\\r\\n      ///  0x00..0x04 |        selector(\\\"Error(string)\\\")\\r\\n      ///  0x04..0x24 |      string offset (always 0x20)\\r\\n      ///  0x24..0x44 |                    string length\\r\\n      ///  0x44..0x64 | string value, padded to 32-bytes\\r\\n      function revertWithMessage(length, message) {\\r\\n        mstore(0x00, '\\\\x08\\\\xc3\\\\x79\\\\xa0')\\r\\n        mstore(0x04, 0x20)\\r\\n        mstore(0x24, length)\\r\\n        mstore(0x44, message)\\r\\n        revert(0x00, 0x64)\\r\\n      }\\r\\n\\r\\n      switch returndatasize()\\r\\n      // Non-standard ERC20 transfer without return.\\r\\n      case 0 {\\r\\n        // NOTE: When the return data size is 0, verify that there\\r\\n        // is code at the address. This is done in order to maintain\\r\\n        // compatibility with Solidity calling conventions.\\r\\n        // <https://docs.soliditylang.org/en/v0.7.6/control-structures.html#external-function-calls>\\r\\n        if iszero(extcodesize(token)) {\\r\\n          revertWithMessage(20, 'GPv2: not a contract')\\r\\n        }\\r\\n\\r\\n        success := 1\\r\\n      }\\r\\n      // Standard ERC20 transfer returning boolean success value.\\r\\n      case 32 {\\r\\n        returndatacopy(0, 0, returndatasize())\\r\\n\\r\\n        // NOTE: For ABI encoding v1, any non-zero value is accepted\\r\\n        // as `true` for a boolean. In order to stay compatible with\\r\\n        // OpenZeppelin's `SafeERC20` library which is known to work\\r\\n        // with the existing ERC20 implementation we care about,\\r\\n        // make sure we return success for any non-zero return value\\r\\n        // from the `transfer*` call.\\r\\n        success := iszero(iszero(mload(0)))\\r\\n      }\\r\\n      default {\\r\\n        revertWithMessage(31, 'GPv2: malformed transfer result')\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0xd1cf48c1e7a4ee95625c46b84718747f85dcb791e875e60b1ed110b9d830d134\",\"license\":\"LGPL-3.0-or-later\"},\"core-v3/contracts/dependencies/openzeppelin/contracts/Address.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\r\\npragma solidity 0.8.10;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n  /**\\r\\n   * @dev Returns true if `account` is a contract.\\r\\n   *\\r\\n   * [IMPORTANT]\\r\\n   * ====\\r\\n   * It is unsafe to assume that an address for which this function returns\\r\\n   * false is an externally-owned account (EOA) and not a contract.\\r\\n   *\\r\\n   * Among others, `isContract` will return false for the following\\r\\n   * types of addresses:\\r\\n   *\\r\\n   *  - an externally-owned account\\r\\n   *  - a contract in construction\\r\\n   *  - an address where a contract will be created\\r\\n   *  - an address where a contract lived, but was destroyed\\r\\n   * ====\\r\\n   */\\r\\n  function isContract(address account) internal view returns (bool) {\\r\\n    // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\r\\n    // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\r\\n    // for accounts without code, i.e. `keccak256('')`\\r\\n    bytes32 codehash;\\r\\n    bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\r\\n    // solhint-disable-next-line no-inline-assembly\\r\\n    assembly {\\r\\n      codehash := extcodehash(account)\\r\\n    }\\r\\n    return (codehash != accountHash && codehash != 0x0);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n   * `recipient`, forwarding all available gas and reverting on errors.\\r\\n   *\\r\\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n   * imposed by `transfer`, making them unable to receive funds via\\r\\n   * `transfer`. {sendValue} removes this limitation.\\r\\n   *\\r\\n   * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n   *\\r\\n   * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n   * taken to not create reentrancy vulnerabilities. Consider using\\r\\n   * {ReentrancyGuard} or the\\r\\n   * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n   */\\r\\n  function sendValue(address payable recipient, uint256 amount) internal {\\r\\n    require(address(this).balance >= amount, 'Address: insufficient balance');\\r\\n\\r\\n    // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\r\\n    (bool success, ) = recipient.call{value: amount}('');\\r\\n    require(success, 'Address: unable to send value, recipient may have reverted');\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x1e7806cb61fc2059a68e0894ffa72aaf4a3cd06ae0a33a72364a2354728a669e\",\"license\":\"agpl-3.0\"},\"core-v3/contracts/dependencies/openzeppelin/contracts/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\r\\npragma solidity 0.8.10;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n  /**\\r\\n   * @dev Returns the amount of tokens in existence.\\r\\n   */\\r\\n  function totalSupply() external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the amount of tokens owned by `account`.\\r\\n   */\\r\\n  function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\r\\n   *\\r\\n   * Returns a boolean value indicating whether the operation succeeded.\\r\\n   *\\r\\n   * Emits a {Transfer} event.\\r\\n   */\\r\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the remaining number of tokens that `spender` will be\\r\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n   * zero by default.\\r\\n   *\\r\\n   * This value changes when {approve} or {transferFrom} are called.\\r\\n   */\\r\\n  function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n   *\\r\\n   * Returns a boolean value indicating whether the operation succeeded.\\r\\n   *\\r\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n   * that someone may use both the old and the new allowance by unfortunate\\r\\n   * transaction ordering. One possible solution to mitigate this race\\r\\n   * condition is to first reduce the spender's allowance to 0 and set the\\r\\n   * desired value afterwards:\\r\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n   *\\r\\n   * Emits an {Approval} event.\\r\\n   */\\r\\n  function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n  /**\\r\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n   * allowance mechanism. `amount` is then deducted from the caller's\\r\\n   * allowance.\\r\\n   *\\r\\n   * Returns a boolean value indicating whether the operation succeeded.\\r\\n   *\\r\\n   * Emits a {Transfer} event.\\r\\n   */\\r\\n  function transferFrom(\\r\\n    address sender,\\r\\n    address recipient,\\r\\n    uint256 amount\\r\\n  ) external returns (bool);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n   * another (`to`).\\r\\n   *\\r\\n   * Note that `value` may be zero.\\r\\n   */\\r\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n   * a call to {approve}. `value` is the new allowance.\\r\\n   */\\r\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\",\"keccak256\":\"0xe11569c4b7eeb97c4c1eb7c9fbc69168ee8bcb1286ce8b9a3d2814d3cd6013aa\",\"license\":\"agpl-3.0\"},\"core-v3/contracts/dependencies/openzeppelin/contracts/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeCast.sol)\\r\\npragma solidity 0.8.10;\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\r\\n * checks.\\r\\n *\\r\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\r\\n * easily result in undesired exploitation or bugs, since developers usually\\r\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\r\\n * reverting the transaction when such an operation overflows.\\r\\n *\\r\\n * Using this library instead of the unchecked operations eliminates an entire\\r\\n * class of bugs, so it's recommended to use it always.\\r\\n *\\r\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\r\\n * all math on `uint256` and `int256` and then downcasting.\\r\\n */\\r\\nlibrary SafeCast {\\r\\n  /**\\r\\n   * @dev Returns the downcasted uint224 from uint256, reverting on\\r\\n   * overflow (when the input is greater than largest uint224).\\r\\n   *\\r\\n   * Counterpart to Solidity's `uint224` operator.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - input must fit into 224 bits\\r\\n   */\\r\\n  function toUint224(uint256 value) internal pure returns (uint224) {\\r\\n    require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\r\\n    return uint224(value);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the downcasted uint128 from uint256, reverting on\\r\\n   * overflow (when the input is greater than largest uint128).\\r\\n   *\\r\\n   * Counterpart to Solidity's `uint128` operator.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - input must fit into 128 bits\\r\\n   */\\r\\n  function toUint128(uint256 value) internal pure returns (uint128) {\\r\\n    require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\r\\n    return uint128(value);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the downcasted uint96 from uint256, reverting on\\r\\n   * overflow (when the input is greater than largest uint96).\\r\\n   *\\r\\n   * Counterpart to Solidity's `uint96` operator.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - input must fit into 96 bits\\r\\n   */\\r\\n  function toUint96(uint256 value) internal pure returns (uint96) {\\r\\n    require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\r\\n    return uint96(value);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the downcasted uint64 from uint256, reverting on\\r\\n   * overflow (when the input is greater than largest uint64).\\r\\n   *\\r\\n   * Counterpart to Solidity's `uint64` operator.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - input must fit into 64 bits\\r\\n   */\\r\\n  function toUint64(uint256 value) internal pure returns (uint64) {\\r\\n    require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\r\\n    return uint64(value);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the downcasted uint32 from uint256, reverting on\\r\\n   * overflow (when the input is greater than largest uint32).\\r\\n   *\\r\\n   * Counterpart to Solidity's `uint32` operator.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - input must fit into 32 bits\\r\\n   */\\r\\n  function toUint32(uint256 value) internal pure returns (uint32) {\\r\\n    require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\r\\n    return uint32(value);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the downcasted uint16 from uint256, reverting on\\r\\n   * overflow (when the input is greater than largest uint16).\\r\\n   *\\r\\n   * Counterpart to Solidity's `uint16` operator.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - input must fit into 16 bits\\r\\n   */\\r\\n  function toUint16(uint256 value) internal pure returns (uint16) {\\r\\n    require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\r\\n    return uint16(value);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the downcasted uint8 from uint256, reverting on\\r\\n   * overflow (when the input is greater than largest uint8).\\r\\n   *\\r\\n   * Counterpart to Solidity's `uint8` operator.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - input must fit into 8 bits.\\r\\n   */\\r\\n  function toUint8(uint256 value) internal pure returns (uint8) {\\r\\n    require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\r\\n    return uint8(value);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Converts a signed int256 into an unsigned uint256.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - input must be greater than or equal to 0.\\r\\n   */\\r\\n  function toUint256(int256 value) internal pure returns (uint256) {\\r\\n    require(value >= 0, 'SafeCast: value must be positive');\\r\\n    return uint256(value);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the downcasted int128 from int256, reverting on\\r\\n   * overflow (when the input is less than smallest int128 or\\r\\n   * greater than largest int128).\\r\\n   *\\r\\n   * Counterpart to Solidity's `int128` operator.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - input must fit into 128 bits\\r\\n   *\\r\\n   * _Available since v3.1._\\r\\n   */\\r\\n  function toInt128(int256 value) internal pure returns (int128) {\\r\\n    require(\\r\\n      value >= type(int128).min && value <= type(int128).max,\\r\\n      \\\"SafeCast: value doesn't fit in 128 bits\\\"\\r\\n    );\\r\\n    return int128(value);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the downcasted int64 from int256, reverting on\\r\\n   * overflow (when the input is less than smallest int64 or\\r\\n   * greater than largest int64).\\r\\n   *\\r\\n   * Counterpart to Solidity's `int64` operator.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - input must fit into 64 bits\\r\\n   *\\r\\n   * _Available since v3.1._\\r\\n   */\\r\\n  function toInt64(int256 value) internal pure returns (int64) {\\r\\n    require(\\r\\n      value >= type(int64).min && value <= type(int64).max,\\r\\n      \\\"SafeCast: value doesn't fit in 64 bits\\\"\\r\\n    );\\r\\n    return int64(value);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the downcasted int32 from int256, reverting on\\r\\n   * overflow (when the input is less than smallest int32 or\\r\\n   * greater than largest int32).\\r\\n   *\\r\\n   * Counterpart to Solidity's `int32` operator.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - input must fit into 32 bits\\r\\n   *\\r\\n   * _Available since v3.1._\\r\\n   */\\r\\n  function toInt32(int256 value) internal pure returns (int32) {\\r\\n    require(\\r\\n      value >= type(int32).min && value <= type(int32).max,\\r\\n      \\\"SafeCast: value doesn't fit in 32 bits\\\"\\r\\n    );\\r\\n    return int32(value);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the downcasted int16 from int256, reverting on\\r\\n   * overflow (when the input is less than smallest int16 or\\r\\n   * greater than largest int16).\\r\\n   *\\r\\n   * Counterpart to Solidity's `int16` operator.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - input must fit into 16 bits\\r\\n   *\\r\\n   * _Available since v3.1._\\r\\n   */\\r\\n  function toInt16(int256 value) internal pure returns (int16) {\\r\\n    require(\\r\\n      value >= type(int16).min && value <= type(int16).max,\\r\\n      \\\"SafeCast: value doesn't fit in 16 bits\\\"\\r\\n    );\\r\\n    return int16(value);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the downcasted int8 from int256, reverting on\\r\\n   * overflow (when the input is less than smallest int8 or\\r\\n   * greater than largest int8).\\r\\n   *\\r\\n   * Counterpart to Solidity's `int8` operator.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - input must fit into 8 bits.\\r\\n   *\\r\\n   * _Available since v3.1._\\r\\n   */\\r\\n  function toInt8(int256 value) internal pure returns (int8) {\\r\\n    require(\\r\\n      value >= type(int8).min && value <= type(int8).max,\\r\\n      \\\"SafeCast: value doesn't fit in 8 bits\\\"\\r\\n    );\\r\\n    return int8(value);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Converts an unsigned uint256 into a signed int256.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - input must be less than or equal to maxInt256.\\r\\n   */\\r\\n  function toInt256(uint256 value) internal pure returns (int256) {\\r\\n    // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\r\\n    require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\r\\n    return int256(value);\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x8b4c9170fe4bc612f0744fc161ad743ada7ab17f47aaaef118833e977f9cd74c\",\"license\":\"MIT\"},\"core-v3/contracts/interfaces/IAToken.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport {IERC20} from \\\"../dependencies/openzeppelin/contracts/IERC20.sol\\\";\\r\\nimport {IScaledBalanceToken} from \\\"./IScaledBalanceToken.sol\\\";\\r\\nimport {IInitializableAToken} from \\\"./IInitializableAToken.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title IAToken\\r\\n * @author Aqualis\\r\\n * @notice Defines the basic interface for an AToken.\\r\\n **/\\r\\ninterface IAToken is IERC20, IScaledBalanceToken, IInitializableAToken {\\r\\n    /**\\r\\n     * @dev Emitted during the transfer action\\r\\n     * @param from The user whose tokens are being transferred\\r\\n     * @param to The recipient\\r\\n     * @param value The amount being transferred\\r\\n     * @param index The next liquidity index of the reserve\\r\\n     **/\\r\\n    event BalanceTransfer(\\r\\n        address indexed from,\\r\\n        address indexed to,\\r\\n        uint256 value,\\r\\n        uint256 index\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @notice Mints `amount` aTokens to `user`\\r\\n     * @param caller The address performing the mint\\r\\n     * @param onBehalfOf The address of the user that will receive the minted aTokens\\r\\n     * @param amount The amount of tokens getting minted\\r\\n     * @param index The next liquidity index of the reserve\\r\\n     * @return `true` if the the previous balance of the user was 0\\r\\n     */\\r\\n    function mint(\\r\\n        address caller,\\r\\n        address onBehalfOf,\\r\\n        uint256 amount,\\r\\n        uint256 index\\r\\n    ) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @notice Burns aTokens from `user` and sends the equivalent amount of underlying to `receiverOfUnderlying`\\r\\n     * @dev In some instances, the mint event could be emitted from a burn transaction\\r\\n     * if the amount to burn is less than the interest that the user accrued\\r\\n     * @param from The address from which the aTokens will be burned\\r\\n     * @param receiverOfUnderlying The address that will receive the underlying\\r\\n     * @param amount The amount being burned\\r\\n     * @param index The next liquidity index of the reserve\\r\\n     **/\\r\\n    function burn(\\r\\n        address from,\\r\\n        address receiverOfUnderlying,\\r\\n        uint256 amount,\\r\\n        uint256 index\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Mints aTokens to the reserve treasury\\r\\n     * @param amount The amount of tokens getting minted\\r\\n     * @param index The next liquidity index of the reserve\\r\\n     */\\r\\n    function mintToTreasury(uint256 amount, uint256 index) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Transfers aTokens in the event of a borrow being liquidated, in case the liquidators reclaims the aToken\\r\\n     * @param from The address getting liquidated, current owner of the aTokens\\r\\n     * @param to The recipient\\r\\n     * @param value The amount of tokens getting transferred\\r\\n     **/\\r\\n    function transferOnLiquidation(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Transfers the underlying asset to `target`.\\r\\n     * @dev Used by the Pool to transfer assets in borrow(), withdraw() and flashLoan()\\r\\n     * @param user The recipient of the underlying\\r\\n     * @param amount The amount getting transferred\\r\\n     **/\\r\\n    function transferUnderlyingTo(address user, uint256 amount) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Handles the underlying received by the aToken after the transfer has been completed.\\r\\n     * @dev The default implementation is empty as with standard ERC20 tokens, nothing needs to be done after the\\r\\n     * transfer is concluded. However in the future there may be aTokens that allow for example to stake the underlying\\r\\n     * to receive LM rewards. In that case, `handleRepayment()` would perform the staking of the underlying asset.\\r\\n     * @param user The user executing the repayment\\r\\n     * @param amount The amount getting repaid\\r\\n     **/\\r\\n    function handleRepayment(address user, uint256 amount) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Allow passing a signed message to approve spending\\r\\n     * @dev implements the permit function as for\\r\\n     * https://github.com/ethereum/EIPs/blob/8a34d644aacf0f9f8f00815307fd7dd5da07655f/EIPS/eip-2612.md\\r\\n     * @param owner The owner of the funds\\r\\n     * @param spender The spender\\r\\n     * @param value The amount\\r\\n     * @param deadline The deadline timestamp, type(uint256).max for max deadline\\r\\n     * @param v Signature param\\r\\n     * @param s Signature param\\r\\n     * @param r Signature param\\r\\n     */\\r\\n    function permit(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the address of the underlying asset of this aToken (E.g. WETH for aWETH)\\r\\n     * @return The address of the underlying asset\\r\\n     **/\\r\\n    function UNDERLYING_ASSET_ADDRESS() external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the address of the Aqualis treasury, receiving the fees on this aToken.\\r\\n     * @return Address of the Aqualis treasury\\r\\n     **/\\r\\n    function RESERVE_TREASURY_ADDRESS() external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @notice Get the domain separator for the token\\r\\n     * @dev Return cached value if chainId matches cache, otherwise recomputes separator\\r\\n     * @return The domain separator of the token at current chain\\r\\n     */\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the nonce for owner.\\r\\n     * @param owner The address of the owner\\r\\n     * @return The nonce of the owner\\r\\n     **/\\r\\n    function nonces(address owner) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Rescue and transfer tokens locked in this contract\\r\\n     * @param token The address of the token\\r\\n     * @param to The address of the recipient\\r\\n     * @param amount The amount of token to transfer\\r\\n     */\\r\\n    function rescueTokens(\\r\\n        address token,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xa3eec71899efcf78a805623b9ff370dda56982c3f7c7cfee3c6d7972562a3fe4\",\"license\":\"AGPL-3.0\"},\"core-v3/contracts/interfaces/IAqualisIncentivesController.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title IAqualisIncentivesController\\r\\n * @author Aqualis\\r\\n * @notice Defines the basic interface for an Aqualis Incentives Controller.\\r\\n **/\\r\\ninterface IAqualisIncentivesController {\\r\\n    /**\\r\\n     * @dev Emitted during `handleAction`, `claimRewards` and `claimRewardsOnBehalf`\\r\\n     * @param user The user that accrued rewards\\r\\n     * @param amount The amount of accrued rewards\\r\\n     */\\r\\n    event RewardsAccrued(address indexed user, uint256 amount);\\r\\n\\r\\n    event RewardsClaimed(\\r\\n        address indexed user,\\r\\n        address indexed to,\\r\\n        uint256 amount\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted during `claimRewards` and `claimRewardsOnBehalf`\\r\\n     * @param user The address that accrued rewards\\r\\n     *\\u00a0@param to The address that will be receiving the rewards\\r\\n     * @param claimer The address that performed the claim\\r\\n     * @param amount The amount of rewards\\r\\n     */\\r\\n    event RewardsClaimed(\\r\\n        address indexed user,\\r\\n        address indexed to,\\r\\n        address indexed claimer,\\r\\n        uint256 amount\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted during `setClaimer`\\r\\n     * @param user The address of the user\\r\\n     * @param claimer The address of the claimer\\r\\n     */\\r\\n    event ClaimerSet(address indexed user, address indexed claimer);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the configuration of the distribution for a certain asset\\r\\n     * @param asset The address of the reference asset of the distribution\\r\\n     * @return The asset index\\r\\n     * @return The emission per second\\r\\n     * @return The last updated timestamp\\r\\n     **/\\r\\n    function getAssetData(address asset)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256\\r\\n        );\\r\\n\\r\\n    /**\\r\\n     * LEGACY **************************\\r\\n     * @dev Returns the configuration of the distribution for a certain asset\\r\\n     * @param asset The address of the reference asset of the distribution\\r\\n     * @return The asset index, the emission per second and the last updated timestamp\\r\\n     **/\\r\\n    function assets(address asset)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint128,\\r\\n            uint128,\\r\\n            uint256\\r\\n        );\\r\\n\\r\\n    /**\\r\\n     * @notice Whitelists an address to claim the rewards on behalf of another address\\r\\n     * @param user The address of the user\\r\\n     * @param claimer The address of the claimer\\r\\n     */\\r\\n    function setClaimer(address user, address claimer) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the whitelisted claimer for a certain address (0x0 if not set)\\r\\n     * @param user The address of the user\\r\\n     * @return The claimer address\\r\\n     */\\r\\n    function getClaimer(address user) external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @notice Configure assets for a certain rewards emission\\r\\n     * @param assets The assets to incentivize\\r\\n     * @param emissionsPerSecond The emission for each asset\\r\\n     */\\r\\n    function configureAssets(\\r\\n        address[] calldata assets,\\r\\n        uint256[] calldata emissionsPerSecond\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Called by the corresponding asset on any update that affects the rewards distribution\\r\\n     * @param asset The address of the user\\r\\n     * @param userBalance The balance of the user of the asset in the pool\\r\\n     * @param totalSupply The total supply of the asset in the pool\\r\\n     **/\\r\\n    function handleAction(\\r\\n        address asset,\\r\\n        uint256 userBalance,\\r\\n        uint256 totalSupply\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the total of rewards of a user, already accrued + not yet accrued\\r\\n     * @param assets The assets to accumulate rewards for\\r\\n     * @param user The address of the user\\r\\n     * @return The rewards\\r\\n     **/\\r\\n    function getRewardsBalance(address[] calldata assets, address user)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Claims reward for a user, on the assets of the pool, accumulating the pending rewards\\r\\n     * @param assets The assets to accumulate rewards for\\r\\n     * @param amount Amount of rewards to claim\\r\\n     * @param to Address that will be receiving the rewards\\r\\n     * @return Rewards claimed\\r\\n     **/\\r\\n    function claimRewards(\\r\\n        address[] calldata assets,\\r\\n        uint256 amount,\\r\\n        address to\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Claims reward for a user on its behalf, on the assets of the pool, accumulating the pending rewards.\\r\\n     * @dev The caller must be whitelisted via \\\"allowClaimOnBehalf\\\" function by the RewardsAdmin role manager\\r\\n     * @param assets The assets to accumulate rewards for\\r\\n     * @param amount The amount of rewards to claim\\r\\n     * @param user The address to check and claim rewards\\r\\n     * @param to The address that will be receiving the rewards\\r\\n     * @return The amount of rewards claimed\\r\\n     **/\\r\\n    function claimRewardsOnBehalf(\\r\\n        address[] calldata assets,\\r\\n        uint256 amount,\\r\\n        address user,\\r\\n        address to\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the unclaimed rewards of the user\\r\\n     * @param user The address of the user\\r\\n     * @return The unclaimed user rewards\\r\\n     */\\r\\n    function getUserUnclaimedRewards(address user)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the user index for a specific asset\\r\\n     * @param user The address of the user\\r\\n     * @param asset The asset to incentivize\\r\\n     * @return The user index for the asset\\r\\n     */\\r\\n    function getUserAssetData(address user, address asset)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice for backward compatibility with previous implementation of the Incentives controller\\r\\n     * @return The address of the reward token\\r\\n     */\\r\\n    function REWARD_TOKEN() external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @notice for backward compatibility with previous implementation of the Incentives controller\\r\\n     * @return The precision used in the incentives controller\\r\\n     */\\r\\n    function PRECISION() external view returns (uint8);\\r\\n\\r\\n    /**\\r\\n     * @dev Gets the distribution end timestamp of the emissions\\r\\n     */\\r\\n    function DISTRIBUTION_END() external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0x7c3f1c91774988ddfe176b99e75517b816a368a5dbd048bb7be7b2499edff822\",\"license\":\"AGPL-3.0\"},\"core-v3/contracts/interfaces/IInitializableAToken.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport {IAqualisIncentivesController} from \\\"./IAqualisIncentivesController.sol\\\";\\r\\nimport {IPool} from \\\"./IPool.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title IInitializableAToken\\r\\n * @author Aqualis\\r\\n * @notice Interface for the initialize function on AToken\\r\\n **/\\r\\ninterface IInitializableAToken {\\r\\n    /**\\r\\n     * @dev Emitted when an aToken is initialized\\r\\n     * @param underlyingAsset The address of the underlying asset\\r\\n     * @param pool The address of the associated pool\\r\\n     * @param treasury The address of the treasury\\r\\n     * @param incentivesController The address of the incentives controller for this aToken\\r\\n     * @param aTokenDecimals The decimals of the underlying\\r\\n     * @param aTokenName The name of the aToken\\r\\n     * @param aTokenSymbol The symbol of the aToken\\r\\n     * @param params A set of encoded parameters for additional initialization\\r\\n     **/\\r\\n    event Initialized(\\r\\n        address indexed underlyingAsset,\\r\\n        address indexed pool,\\r\\n        address treasury,\\r\\n        address incentivesController,\\r\\n        uint8 aTokenDecimals,\\r\\n        string aTokenName,\\r\\n        string aTokenSymbol,\\r\\n        bytes params\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @notice Initializes the aToken\\r\\n     * @param pool The pool contract that is initializing this contract\\r\\n     * @param treasury The address of the Aqualis treasury, receiving the fees on this aToken\\r\\n     * @param underlyingAsset The address of the underlying asset of this aToken (E.g. WETH for aWETH)\\r\\n     * @param incentivesController The smart contract managing potential incentives distribution\\r\\n     * @param aTokenDecimals The decimals of the aToken, same as the underlying asset's\\r\\n     * @param aTokenName The name of the aToken\\r\\n     * @param aTokenSymbol The symbol of the aToken\\r\\n     * @param params A set of encoded parameters for additional initialization\\r\\n     */\\r\\n    function initialize(\\r\\n        IPool pool,\\r\\n        address treasury,\\r\\n        address underlyingAsset,\\r\\n        IAqualisIncentivesController incentivesController,\\r\\n        uint8 aTokenDecimals,\\r\\n        string calldata aTokenName,\\r\\n        string calldata aTokenSymbol,\\r\\n        bytes calldata params\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xff2c0a168092a2589c9060a0c937d76305ba83ca2b2c0dc4ae6714fe232ec6a0\",\"license\":\"AGPL-3.0\"},\"core-v3/contracts/interfaces/IInitializableDebtToken.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport {IAqualisIncentivesController} from \\\"./IAqualisIncentivesController.sol\\\";\\r\\nimport {IPool} from \\\"./IPool.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title IInitializableDebtToken\\r\\n * @author Aqualis\\r\\n * @notice Interface for the initialize function common between debt tokens\\r\\n **/\\r\\ninterface IInitializableDebtToken {\\r\\n    /**\\r\\n     * @dev Emitted when a debt token is initialized\\r\\n     * @param underlyingAsset The address of the underlying asset\\r\\n     * @param pool The address of the associated pool\\r\\n     * @param incentivesController The address of the incentives controller for this aToken\\r\\n     * @param debtTokenDecimals The decimals of the debt token\\r\\n     * @param debtTokenName The name of the debt token\\r\\n     * @param debtTokenSymbol The symbol of the debt token\\r\\n     * @param params A set of encoded parameters for additional initialization\\r\\n     **/\\r\\n    event Initialized(\\r\\n        address indexed underlyingAsset,\\r\\n        address indexed pool,\\r\\n        address incentivesController,\\r\\n        uint8 debtTokenDecimals,\\r\\n        string debtTokenName,\\r\\n        string debtTokenSymbol,\\r\\n        bytes params\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @notice Initializes the debt token.\\r\\n     * @param pool The pool contract that is initializing this contract\\r\\n     * @param underlyingAsset The address of the underlying asset of this aToken (E.g. WETH for aWETH)\\r\\n     * @param incentivesController The smart contract managing potential incentives distribution\\r\\n     * @param debtTokenDecimals The decimals of the debtToken, same as the underlying asset's\\r\\n     * @param debtTokenName The name of the token\\r\\n     * @param debtTokenSymbol The symbol of the token\\r\\n     * @param params A set of encoded parameters for additional initialization\\r\\n     */\\r\\n    function initialize(\\r\\n        IPool pool,\\r\\n        address underlyingAsset,\\r\\n        IAqualisIncentivesController incentivesController,\\r\\n        uint8 debtTokenDecimals,\\r\\n        string memory debtTokenName,\\r\\n        string memory debtTokenSymbol,\\r\\n        bytes calldata params\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xb5c24fadfcbd6148579d7541c84ca2b62fbdacb6da7e0324b920c5286362067d\",\"license\":\"AGPL-3.0\"},\"core-v3/contracts/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport {IPoolAddressesProvider} from \\\"./IPoolAddressesProvider.sol\\\";\\r\\nimport {DataTypes} from \\\"../protocol/libraries/types/DataTypes.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title IPool\\r\\n * @author Aqualis\\r\\n * @notice Defines the basic interface for an Aqualis Pool.\\r\\n **/\\r\\ninterface IPool {\\r\\n    /**\\r\\n     * @dev Emitted on mintUnbacked()\\r\\n     * @param reserve The address of the underlying asset of the reserve\\r\\n     * @param user The address initiating the supply\\r\\n     * @param onBehalfOf The beneficiary of the supplied assets, receiving the aTokens\\r\\n     * @param amount The amount of supplied assets\\r\\n     * @param referralCode The referral code used\\r\\n     **/\\r\\n    event MintUnbacked(\\r\\n        address indexed reserve,\\r\\n        address user,\\r\\n        address indexed onBehalfOf,\\r\\n        uint256 amount,\\r\\n        uint16 indexed referralCode\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted on backUnbacked()\\r\\n     * @param reserve The address of the underlying asset of the reserve\\r\\n     * @param backer The address paying for the backing\\r\\n     * @param amount The amount added as backing\\r\\n     * @param fee The amount paid in fees\\r\\n     **/\\r\\n    event BackUnbacked(\\r\\n        address indexed reserve,\\r\\n        address indexed backer,\\r\\n        uint256 amount,\\r\\n        uint256 fee\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted on supply()\\r\\n     * @param reserve The address of the underlying asset of the reserve\\r\\n     * @param user The address initiating the supply\\r\\n     * @param onBehalfOf The beneficiary of the supply, receiving the aTokens\\r\\n     * @param amount The amount supplied\\r\\n     * @param referralCode The referral code used\\r\\n     **/\\r\\n    event Supply(\\r\\n        address indexed reserve,\\r\\n        address user,\\r\\n        address indexed onBehalfOf,\\r\\n        uint256 amount,\\r\\n        uint16 indexed referralCode\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted on withdraw()\\r\\n     * @param reserve The address of the underlying asset being withdrawn\\r\\n     * @param user The address initiating the withdrawal, owner of aTokens\\r\\n     * @param to The address that will receive the underlying\\r\\n     * @param amount The amount to be withdrawn\\r\\n     **/\\r\\n    event Withdraw(\\r\\n        address indexed reserve,\\r\\n        address indexed user,\\r\\n        address indexed to,\\r\\n        uint256 amount\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\\r\\n     * @param reserve The address of the underlying asset being borrowed\\r\\n     * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\\r\\n     * initiator of the transaction on flashLoan()\\r\\n     * @param onBehalfOf The address that will be getting the debt\\r\\n     * @param amount The amount borrowed out\\r\\n     * @param interestRateMode The rate mode: 1 for Stable, 2 for Variable\\r\\n     * @param borrowRate The numeric rate at which the user has borrowed, expressed in ray\\r\\n     * @param referralCode The referral code used\\r\\n     **/\\r\\n    event Borrow(\\r\\n        address indexed reserve,\\r\\n        address user,\\r\\n        address indexed onBehalfOf,\\r\\n        uint256 amount,\\r\\n        DataTypes.InterestRateMode interestRateMode,\\r\\n        uint256 borrowRate,\\r\\n        uint16 indexed referralCode\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted on repay()\\r\\n     * @param reserve The address of the underlying asset of the reserve\\r\\n     * @param user The beneficiary of the repayment, getting his debt reduced\\r\\n     * @param repayer The address of the user initiating the repay(), providing the funds\\r\\n     * @param amount The amount repaid\\r\\n     * @param useATokens True if the repayment is done using aTokens, `false` if done with underlying asset directly\\r\\n     **/\\r\\n    event Repay(\\r\\n        address indexed reserve,\\r\\n        address indexed user,\\r\\n        address indexed repayer,\\r\\n        uint256 amount,\\r\\n        bool useATokens\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted on swapBorrowRateMode()\\r\\n     * @param reserve The address of the underlying asset of the reserve\\r\\n     * @param user The address of the user swapping his rate mode\\r\\n     * @param interestRateMode The current interest rate mode of the position being swapped: 1 for Stable, 2 for Variable\\r\\n     **/\\r\\n    event SwapBorrowRateMode(\\r\\n        address indexed reserve,\\r\\n        address indexed user,\\r\\n        DataTypes.InterestRateMode interestRateMode\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted on borrow(), repay() and liquidationCall() when using isolated assets\\r\\n     * @param asset The address of the underlying asset of the reserve\\r\\n     * @param totalDebt The total isolation mode debt for the reserve\\r\\n     */\\r\\n    event IsolationModeTotalDebtUpdated(\\r\\n        address indexed asset,\\r\\n        uint256 totalDebt\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the user selects a certain asset category for eMode\\r\\n     * @param user The address of the user\\r\\n     * @param categoryId The category id\\r\\n     **/\\r\\n    event UserEModeSet(address indexed user, uint8 categoryId);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted on setUserUseReserveAsCollateral()\\r\\n     * @param reserve The address of the underlying asset of the reserve\\r\\n     * @param user The address of the user enabling the usage as collateral\\r\\n     **/\\r\\n    event ReserveUsedAsCollateralEnabled(\\r\\n        address indexed reserve,\\r\\n        address indexed user\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted on setUserUseReserveAsCollateral()\\r\\n     * @param reserve The address of the underlying asset of the reserve\\r\\n     * @param user The address of the user enabling the usage as collateral\\r\\n     **/\\r\\n    event ReserveUsedAsCollateralDisabled(\\r\\n        address indexed reserve,\\r\\n        address indexed user\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted on rebalanceStableBorrowRate()\\r\\n     * @param reserve The address of the underlying asset of the reserve\\r\\n     * @param user The address of the user for which the rebalance has been executed\\r\\n     **/\\r\\n    event RebalanceStableBorrowRate(\\r\\n        address indexed reserve,\\r\\n        address indexed user\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted on flashLoan()\\r\\n     * @param target The address of the flash loan receiver contract\\r\\n     * @param initiator The address initiating the flash loan\\r\\n     * @param asset The address of the asset being flash borrowed\\r\\n     * @param amount The amount flash borrowed\\r\\n     * @param interestRateMode The flashloan mode: 0 for regular flashloan, 1 for Stable debt, 2 for Variable debt\\r\\n     * @param premium The fee flash borrowed\\r\\n     * @param referralCode The referral code used\\r\\n     **/\\r\\n    event FlashLoan(\\r\\n        address indexed target,\\r\\n        address initiator,\\r\\n        address indexed asset,\\r\\n        uint256 amount,\\r\\n        DataTypes.InterestRateMode interestRateMode,\\r\\n        uint256 premium,\\r\\n        uint16 indexed referralCode\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when a borrower is liquidated.\\r\\n     * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\r\\n     * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\r\\n     * @param user The address of the borrower getting liquidated\\r\\n     * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\r\\n     * @param liquidatedCollateralAmount The amount of collateral received by the liquidator\\r\\n     * @param liquidator The address of the liquidator\\r\\n     * @param receiveAToken True if the liquidators wants to receive the collateral aTokens, `false` if he wants\\r\\n     * to receive the underlying collateral asset directly\\r\\n     **/\\r\\n    event LiquidationCall(\\r\\n        address indexed collateralAsset,\\r\\n        address indexed debtAsset,\\r\\n        address indexed user,\\r\\n        uint256 debtToCover,\\r\\n        uint256 liquidatedCollateralAmount,\\r\\n        address liquidator,\\r\\n        bool receiveAToken\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the state of a reserve is updated.\\r\\n     * @param reserve The address of the underlying asset of the reserve\\r\\n     * @param liquidityRate The next liquidity rate\\r\\n     * @param stableBorrowRate The next stable borrow rate\\r\\n     * @param variableBorrowRate The next variable borrow rate\\r\\n     * @param liquidityIndex The next liquidity index\\r\\n     * @param variableBorrowIndex The next variable borrow index\\r\\n     **/\\r\\n    event ReserveDataUpdated(\\r\\n        address indexed reserve,\\r\\n        uint256 liquidityRate,\\r\\n        uint256 stableBorrowRate,\\r\\n        uint256 variableBorrowRate,\\r\\n        uint256 liquidityIndex,\\r\\n        uint256 variableBorrowIndex\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the protocol treasury receives minted aTokens from the accrued interest.\\r\\n     * @param reserve The address of the reserve\\r\\n     * @param amountMinted The amount minted to the treasury\\r\\n     **/\\r\\n    event MintedToTreasury(address indexed reserve, uint256 amountMinted);\\r\\n\\r\\n    /**\\r\\n     * @dev Mints an `amount` of aTokens to the `onBehalfOf`\\r\\n     * @param asset The address of the underlying asset to mint\\r\\n     * @param amount The amount to mint\\r\\n     * @param onBehalfOf The address that will receive the aTokens\\r\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\r\\n     *   0 if the action is executed directly by the user, without any middle-man\\r\\n     **/\\r\\n    function mintUnbacked(\\r\\n        address asset,\\r\\n        uint256 amount,\\r\\n        address onBehalfOf,\\r\\n        uint16 referralCode\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Back the current unbacked underlying with `amount` and pay `fee`.\\r\\n     * @param asset The address of the underlying asset to back\\r\\n     * @param amount The amount to back\\r\\n     * @param fee The amount paid in fees\\r\\n     **/\\r\\n    function backUnbacked(\\r\\n        address asset,\\r\\n        uint256 amount,\\r\\n        uint256 fee\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\r\\n     * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\\r\\n     * @param asset The address of the underlying asset to supply\\r\\n     * @param amount The amount to be supplied\\r\\n     * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\r\\n     *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\r\\n     *   is a different wallet\\r\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\r\\n     *   0 if the action is executed directly by the user, without any middle-man\\r\\n     **/\\r\\n    function supply(\\r\\n        address asset,\\r\\n        uint256 amount,\\r\\n        address onBehalfOf,\\r\\n        uint16 referralCode\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Supply with transfer approval of asset to be supplied done via permit function\\r\\n     * see: https://eips.ethereum.org/EIPS/eip-2612 and https://eips.ethereum.org/EIPS/eip-713\\r\\n     * @param asset The address of the underlying asset to supply\\r\\n     * @param amount The amount to be supplied\\r\\n     * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\r\\n     *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\r\\n     *   is a different wallet\\r\\n     * @param deadline The deadline timestamp that the permit is valid\\r\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\r\\n     *   0 if the action is executed directly by the user, without any middle-man\\r\\n     * @param permitV The V parameter of ERC712 permit sig\\r\\n     * @param permitR The R parameter of ERC712 permit sig\\r\\n     * @param permitS The S parameter of ERC712 permit sig\\r\\n     **/\\r\\n    function supplyWithPermit(\\r\\n        address asset,\\r\\n        uint256 amount,\\r\\n        address onBehalfOf,\\r\\n        uint16 referralCode,\\r\\n        uint256 deadline,\\r\\n        uint8 permitV,\\r\\n        bytes32 permitR,\\r\\n        bytes32 permitS\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\\r\\n     * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\r\\n     * @param asset The address of the underlying asset to withdraw\\r\\n     * @param amount The underlying amount to be withdrawn\\r\\n     *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\\r\\n     * @param to The address that will receive the underlying, same as msg.sender if the user\\r\\n     *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\r\\n     *   different wallet\\r\\n     * @return The final amount withdrawn\\r\\n     **/\\r\\n    function withdraw(\\r\\n        address asset,\\r\\n        uint256 amount,\\r\\n        address to\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\\r\\n     * already supplied enough collateral, or he was given enough allowance by a credit delegator on the\\r\\n     * corresponding debt token (StableDebtToken or VariableDebtToken)\\r\\n     * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\\r\\n     *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\\r\\n     * @param asset The address of the underlying asset to borrow\\r\\n     * @param amount The amount to be borrowed\\r\\n     * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\\r\\n     * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\r\\n     *   0 if the action is executed directly by the user, without any middle-man\\r\\n     * @param onBehalfOf The address of the user who will receive the debt. Should be the address of the borrower itself\\r\\n     * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\\r\\n     * if he has been given credit delegation allowance\\r\\n     **/\\r\\n    function borrow(\\r\\n        address asset,\\r\\n        uint256 amount,\\r\\n        uint256 interestRateMode,\\r\\n        uint16 referralCode,\\r\\n        address onBehalfOf\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\\r\\n     * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\\r\\n     * @param asset The address of the borrowed underlying asset previously borrowed\\r\\n     * @param amount The amount to repay\\r\\n     * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\r\\n     * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\r\\n     * @param onBehalfOf The address of the user who will get his debt reduced/removed. Should be the address of the\\r\\n     * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\r\\n     * other borrower whose debt should be removed\\r\\n     * @return The final amount repaid\\r\\n     **/\\r\\n    function repay(\\r\\n        address asset,\\r\\n        uint256 amount,\\r\\n        uint256 interestRateMode,\\r\\n        address onBehalfOf\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Repay with transfer approval of asset to be repaid done via permit function\\r\\n     * see: https://eips.ethereum.org/EIPS/eip-2612 and https://eips.ethereum.org/EIPS/eip-713\\r\\n     * @param asset The address of the borrowed underlying asset previously borrowed\\r\\n     * @param amount The amount to repay\\r\\n     * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\r\\n     * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\r\\n     * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\\r\\n     * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\r\\n     * other borrower whose debt should be removed\\r\\n     * @param deadline The deadline timestamp that the permit is valid\\r\\n     * @param permitV The V parameter of ERC712 permit sig\\r\\n     * @param permitR The R parameter of ERC712 permit sig\\r\\n     * @param permitS The S parameter of ERC712 permit sig\\r\\n     * @return The final amount repaid\\r\\n     **/\\r\\n    function repayWithPermit(\\r\\n        address asset,\\r\\n        uint256 amount,\\r\\n        uint256 interestRateMode,\\r\\n        address onBehalfOf,\\r\\n        uint256 deadline,\\r\\n        uint8 permitV,\\r\\n        bytes32 permitR,\\r\\n        bytes32 permitS\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Repays a borrowed `amount` on a specific reserve using the reserve aTokens, burning the\\r\\n     * equivalent debt tokens\\r\\n     * - E.g. User repays 100 USDC using 100 aUSDC, burning 100 variable/stable debt tokens\\r\\n     * @dev  Passing uint256.max as amount will clean up any residual aToken dust balance, if the user aToken\\r\\n     * balance is not enough to cover the whole debt\\r\\n     * @param asset The address of the borrowed underlying asset previously borrowed\\r\\n     * @param amount The amount to repay\\r\\n     * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\r\\n     * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\r\\n     * @return The final amount repaid\\r\\n     **/\\r\\n    function repayWithATokens(\\r\\n        address asset,\\r\\n        uint256 amount,\\r\\n        uint256 interestRateMode\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Allows a borrower to swap his debt between stable and variable mode, or vice versa\\r\\n     * @param asset The address of the underlying asset borrowed\\r\\n     * @param interestRateMode The current interest rate mode of the position being swapped: 1 for Stable, 2 for Variable\\r\\n     **/\\r\\n    function swapBorrowRateMode(address asset, uint256 interestRateMode)\\r\\n        external;\\r\\n\\r\\n    /**\\r\\n     * @notice Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\\r\\n     * - Users can be rebalanced if the following conditions are satisfied:\\r\\n     *     1. Usage ratio is above 95%\\r\\n     *     2. the current supply APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too\\r\\n     *        much has been borrowed at a stable rate and suppliers are not earning enough\\r\\n     * @param asset The address of the underlying asset borrowed\\r\\n     * @param user The address of the user to be rebalanced\\r\\n     **/\\r\\n    function rebalanceStableBorrowRate(address asset, address user) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Allows suppliers to enable/disable a specific supplied asset as collateral\\r\\n     * @param asset The address of the underlying asset supplied\\r\\n     * @param useAsCollateral True if the user wants to use the supply as collateral, false otherwise\\r\\n     **/\\r\\n    function setUserUseReserveAsCollateral(address asset, bool useAsCollateral)\\r\\n        external;\\r\\n\\r\\n    /**\\r\\n     * @notice Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\\r\\n     * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\\r\\n     *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\\r\\n     * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\r\\n     * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\r\\n     * @param user The address of the borrower getting liquidated\\r\\n     * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\r\\n     * @param receiveAToken True if the liquidators wants to receive the collateral aTokens, `false` if he wants\\r\\n     * to receive the underlying collateral asset directly\\r\\n     **/\\r\\n    function liquidationCall(\\r\\n        address collateralAsset,\\r\\n        address debtAsset,\\r\\n        address user,\\r\\n        uint256 debtToCover,\\r\\n        bool receiveAToken\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Allows smartcontracts to access the liquidity of the pool within one transaction,\\r\\n     * as long as the amount taken plus a fee is returned.\\r\\n     * @dev IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept\\r\\n     * into consideration. For further details please visit https://developers.aave.com\\r\\n     * @param receiverAddress The address of the contract receiving the funds, implementing IFlashLoanReceiver interface\\r\\n     * @param assets The addresses of the assets being flash-borrowed\\r\\n     * @param amounts The amounts of the assets being flash-borrowed\\r\\n     * @param interestRateModes Types of the debt to open if the flash loan is not returned:\\r\\n     *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\\r\\n     *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\r\\n     *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\r\\n     * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\\r\\n     * @param params Variadic packed params to pass to the receiver as extra information\\r\\n     * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\r\\n     *   0 if the action is executed directly by the user, without any middle-man\\r\\n     **/\\r\\n    function flashLoan(\\r\\n        address receiverAddress,\\r\\n        address[] calldata assets,\\r\\n        uint256[] calldata amounts,\\r\\n        uint256[] calldata interestRateModes,\\r\\n        address onBehalfOf,\\r\\n        bytes calldata params,\\r\\n        uint16 referralCode\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Allows smartcontracts to access the liquidity of the pool within one transaction,\\r\\n     * as long as the amount taken plus a fee is returned.\\r\\n     * @dev IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept\\r\\n     * into consideration. For further details please visit https://developers.aave.com\\r\\n     * @param receiverAddress The address of the contract receiving the funds, implementing IFlashLoanSimpleReceiver interface\\r\\n     * @param asset The address of the asset being flash-borrowed\\r\\n     * @param amount The amount of the asset being flash-borrowed\\r\\n     * @param params Variadic packed params to pass to the receiver as extra information\\r\\n     * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\r\\n     *   0 if the action is executed directly by the user, without any middle-man\\r\\n     **/\\r\\n    function flashLoanSimple(\\r\\n        address receiverAddress,\\r\\n        address asset,\\r\\n        uint256 amount,\\r\\n        bytes calldata params,\\r\\n        uint16 referralCode\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the user account data across all the reserves\\r\\n     * @param user The address of the user\\r\\n     * @return totalCollateralBase The total collateral of the user in the base currency used by the price feed\\r\\n     * @return totalDebtBase The total debt of the user in the base currency used by the price feed\\r\\n     * @return availableBorrowsBase The borrowing power left of the user in the base currency used by the price feed\\r\\n     * @return currentLiquidationThreshold The liquidation threshold of the user\\r\\n     * @return ltv The loan to value of The user\\r\\n     * @return healthFactor The current health factor of the user\\r\\n     **/\\r\\n    function getUserAccountData(address user)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256 totalCollateralBase,\\r\\n            uint256 totalDebtBase,\\r\\n            uint256 availableBorrowsBase,\\r\\n            uint256 currentLiquidationThreshold,\\r\\n            uint256 ltv,\\r\\n            uint256 healthFactor\\r\\n        );\\r\\n\\r\\n    /**\\r\\n     * @notice Initializes a reserve, activating it, assigning an aToken and debt tokens and an\\r\\n     * interest rate strategy\\r\\n     * @dev Only callable by the PoolConfigurator contract\\r\\n     * @param asset The address of the underlying asset of the reserve\\r\\n     * @param aTokenAddress The address of the aToken that will be assigned to the reserve\\r\\n     * @param stableDebtAddress The address of the StableDebtToken that will be assigned to the reserve\\r\\n     * @param variableDebtAddress The address of the VariableDebtToken that will be assigned to the reserve\\r\\n     * @param interestRateStrategyAddress The address of the interest rate strategy contract\\r\\n     **/\\r\\n    function initReserve(\\r\\n        address asset,\\r\\n        address aTokenAddress,\\r\\n        address stableDebtAddress,\\r\\n        address variableDebtAddress,\\r\\n        address interestRateStrategyAddress\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Drop a reserve\\r\\n     * @dev Only callable by the PoolConfigurator contract\\r\\n     * @param asset The address of the underlying asset of the reserve\\r\\n     **/\\r\\n    function dropReserve(address asset) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Updates the address of the interest rate strategy contract\\r\\n     * @dev Only callable by the PoolConfigurator contract\\r\\n     * @param asset The address of the underlying asset of the reserve\\r\\n     * @param rateStrategyAddress The address of the interest rate strategy contract\\r\\n     **/\\r\\n    function setReserveInterestRateStrategyAddress(\\r\\n        address asset,\\r\\n        address rateStrategyAddress\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Sets the configuration bitmap of the reserve as a whole\\r\\n     * @dev Only callable by the PoolConfigurator contract\\r\\n     * @param asset The address of the underlying asset of the reserve\\r\\n     * @param configuration The new configuration bitmap\\r\\n     **/\\r\\n    function setConfiguration(\\r\\n        address asset,\\r\\n        DataTypes.ReserveConfigurationMap calldata configuration\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the configuration of the reserve\\r\\n     * @param asset The address of the underlying asset of the reserve\\r\\n     * @return The configuration of the reserve\\r\\n     **/\\r\\n    function getConfiguration(address asset)\\r\\n        external\\r\\n        view\\r\\n        returns (DataTypes.ReserveConfigurationMap memory);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the configuration of the user across all the reserves\\r\\n     * @param user The user address\\r\\n     * @return The configuration of the user\\r\\n     **/\\r\\n    function getUserConfiguration(address user)\\r\\n        external\\r\\n        view\\r\\n        returns (DataTypes.UserConfigurationMap memory);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the normalized income normalized income of the reserve\\r\\n     * @param asset The address of the underlying asset of the reserve\\r\\n     * @return The reserve's normalized income\\r\\n     */\\r\\n    function getReserveNormalizedIncome(address asset)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the normalized variable debt per unit of asset\\r\\n     * @param asset The address of the underlying asset of the reserve\\r\\n     * @return The reserve normalized variable debt\\r\\n     */\\r\\n    function getReserveNormalizedVariableDebt(address asset)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the state and configuration of the reserve\\r\\n     * @param asset The address of the underlying asset of the reserve\\r\\n     * @return The state and configuration data of the reserve\\r\\n     **/\\r\\n    function getReserveData(address asset)\\r\\n        external\\r\\n        view\\r\\n        returns (DataTypes.ReserveData memory);\\r\\n\\r\\n    /**\\r\\n     * @notice Validates and finalizes an aToken transfer\\r\\n     * @dev Only callable by the overlying aToken of the `asset`\\r\\n     * @param asset The address of the underlying asset of the aToken\\r\\n     * @param from The user from which the aTokens are transferred\\r\\n     * @param to The user receiving the aTokens\\r\\n     * @param amount The amount being transferred/withdrawn\\r\\n     * @param balanceFromBefore The aToken balance of the `from` user before the transfer\\r\\n     * @param balanceToBefore The aToken balance of the `to` user before the transfer\\r\\n     */\\r\\n    function finalizeTransfer(\\r\\n        address asset,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount,\\r\\n        uint256 balanceFromBefore,\\r\\n        uint256 balanceToBefore\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the list of the underlying assets of all the initialized reserves\\r\\n     * @dev It does not include dropped reserves\\r\\n     * @return The addresses of the underlying assets of the initialized reserves\\r\\n     **/\\r\\n    function getReservesList() external view returns (address[] memory);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the address of the underlying asset of a reserve by the reserve id as stored in the DataTypes.ReserveData struct\\r\\n     * @param id The id of the reserve as stored in the DataTypes.ReserveData struct\\r\\n     * @return The address of the reserve associated with id\\r\\n     **/\\r\\n    function getReserveAddressById(uint16 id) external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the PoolAddressesProvider connected to this contract\\r\\n     * @return The address of the PoolAddressesProvider\\r\\n     **/\\r\\n    function ADDRESSES_PROVIDER()\\r\\n        external\\r\\n        view\\r\\n        returns (IPoolAddressesProvider);\\r\\n\\r\\n    /**\\r\\n     * @notice Updates the protocol fee on the bridging\\r\\n     * @param bridgeProtocolFee The part of the premium sent to the protocol treasury\\r\\n     */\\r\\n    function updateBridgeProtocolFee(uint256 bridgeProtocolFee) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Updates flash loan premiums. Flash loan premium consists of two parts:\\r\\n     * - A part is sent to aToken holders as extra, one time accumulated interest\\r\\n     * - A part is collected by the protocol treasury\\r\\n     * @dev The total premium is calculated on the total borrowed amount\\r\\n     * @dev The premium to protocol is calculated on the total premium, being a percentage of `flashLoanPremiumTotal`\\r\\n     * @dev Only callable by the PoolConfigurator contract\\r\\n     * @param flashLoanPremiumTotal The total premium, expressed in bps\\r\\n     * @param flashLoanPremiumToProtocol The part of the premium sent to the protocol treasury, expressed in bps\\r\\n     */\\r\\n    function updateFlashloanPremiums(\\r\\n        uint128 flashLoanPremiumTotal,\\r\\n        uint128 flashLoanPremiumToProtocol\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Configures a new category for the eMode.\\r\\n     * @dev In eMode, the protocol allows very high borrowing power to borrow assets of the same category.\\r\\n     * The category 0 is reserved as it's the default for volatile assets\\r\\n     * @param id The id of the category\\r\\n     * @param config The configuration of the category\\r\\n     */\\r\\n    function configureEModeCategory(\\r\\n        uint8 id,\\r\\n        DataTypes.EModeCategory memory config\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the data of an eMode category\\r\\n     * @param id The id of the category\\r\\n     * @return The configuration data of the category\\r\\n     */\\r\\n    function getEModeCategoryData(uint8 id)\\r\\n        external\\r\\n        view\\r\\n        returns (DataTypes.EModeCategory memory);\\r\\n\\r\\n    /**\\r\\n     * @notice Allows a user to use the protocol in eMode\\r\\n     * @param categoryId The id of the category\\r\\n     */\\r\\n    function setUserEMode(uint8 categoryId) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the eMode the user is using\\r\\n     * @param user The address of the user\\r\\n     * @return The eMode id\\r\\n     */\\r\\n    function getUserEMode(address user) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Resets the isolation mode total debt of the given asset to zero\\r\\n     * @dev It requires the given asset has zero debt ceiling\\r\\n     * @param asset The address of the underlying asset to reset the isolationModeTotalDebt\\r\\n     */\\r\\n    function resetIsolationModeTotalDebt(address asset) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the percentage of available liquidity that can be borrowed at once at stable rate\\r\\n     * @return The percentage of available liquidity to borrow, expressed in bps\\r\\n     */\\r\\n    function MAX_STABLE_RATE_BORROW_SIZE_PERCENT()\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the total fee on flash loans\\r\\n     * @return The total fee on flashloans\\r\\n     */\\r\\n    function FLASHLOAN_PREMIUM_TOTAL() external view returns (uint128);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the part of the bridge fees sent to protocol\\r\\n     * @return The bridge fee sent to the protocol treasury\\r\\n     */\\r\\n    function BRIDGE_PROTOCOL_FEE() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the part of the flashloan fees sent to protocol\\r\\n     * @return The flashloan fee sent to the protocol treasury\\r\\n     */\\r\\n    function FLASHLOAN_PREMIUM_TO_PROTOCOL() external view returns (uint128);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the maximum number of reserves supported to be listed in this Pool\\r\\n     * @return The maximum number of reserves supported\\r\\n     */\\r\\n    function MAX_NUMBER_RESERVES() external view returns (uint16);\\r\\n\\r\\n    /**\\r\\n     * @notice Mints the assets accrued through the reserve factor to the treasury in the form of aTokens\\r\\n     * @param assets The list of reserves for which the minting needs to be executed\\r\\n     **/\\r\\n    function mintToTreasury(address[] calldata assets) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Rescue and transfer tokens locked in this contract\\r\\n     * @param token The address of the token\\r\\n     * @param to The address of the recipient\\r\\n     * @param amount The amount of token to transfer\\r\\n     */\\r\\n    function rescueTokens(\\r\\n        address token,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\r\\n     * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\\r\\n     * @dev Deprecated: Use the `supply` function instead\\r\\n     * @param asset The address of the underlying asset to supply\\r\\n     * @param amount The amount to be supplied\\r\\n     * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\r\\n     *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\r\\n     *   is a different wallet\\r\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\r\\n     *   0 if the action is executed directly by the user, without any middle-man\\r\\n     **/\\r\\n    function deposit(\\r\\n        address asset,\\r\\n        uint256 amount,\\r\\n        address onBehalfOf,\\r\\n        uint16 referralCode\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x148f79ba198b90d46a8ce5b15a9f316b6496c3f49112386015ad98834acf130f\",\"license\":\"AGPL-3.0\"},\"core-v3/contracts/interfaces/IPoolAddressesProvider.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title IPoolAddressesProvider\\r\\n * @author Aqualis\\r\\n * @notice Defines the basic interface for a Pool Addresses Provider.\\r\\n **/\\r\\ninterface IPoolAddressesProvider {\\r\\n    /**\\r\\n     * @dev Emitted when the market identifier is updated.\\r\\n     * @param oldMarketId The old id of the market\\r\\n     * @param newMarketId The new id of the market\\r\\n     */\\r\\n    event MarketIdSet(string indexed oldMarketId, string indexed newMarketId);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the pool is updated.\\r\\n     * @param oldAddress The old address of the Pool\\r\\n     * @param newAddress The new address of the Pool\\r\\n     */\\r\\n    event PoolUpdated(address indexed oldAddress, address indexed newAddress);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the pool configurator is updated.\\r\\n     * @param oldAddress The old address of the PoolConfigurator\\r\\n     * @param newAddress The new address of the PoolConfigurator\\r\\n     */\\r\\n    event PoolConfiguratorUpdated(\\r\\n        address indexed oldAddress,\\r\\n        address indexed newAddress\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the price oracle is updated.\\r\\n     * @param oldAddress The old address of the PriceOracle\\r\\n     * @param newAddress The new address of the PriceOracle\\r\\n     */\\r\\n    event PriceOracleUpdated(\\r\\n        address indexed oldAddress,\\r\\n        address indexed newAddress\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the ACL manager is updated.\\r\\n     * @param oldAddress The old address of the ACLManager\\r\\n     * @param newAddress The new address of the ACLManager\\r\\n     */\\r\\n    event ACLManagerUpdated(\\r\\n        address indexed oldAddress,\\r\\n        address indexed newAddress\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the ACL admin is updated.\\r\\n     * @param oldAddress The old address of the ACLAdmin\\r\\n     * @param newAddress The new address of the ACLAdmin\\r\\n     */\\r\\n    event ACLAdminUpdated(\\r\\n        address indexed oldAddress,\\r\\n        address indexed newAddress\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the price oracle sentinel is updated.\\r\\n     * @param oldAddress The old address of the PriceOracleSentinel\\r\\n     * @param newAddress The new address of the PriceOracleSentinel\\r\\n     */\\r\\n    event PriceOracleSentinelUpdated(\\r\\n        address indexed oldAddress,\\r\\n        address indexed newAddress\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the pool data provider is updated.\\r\\n     * @param oldAddress The old address of the PoolDataProvider\\r\\n     * @param newAddress The new address of the PoolDataProvider\\r\\n     */\\r\\n    event PoolDataProviderUpdated(\\r\\n        address indexed oldAddress,\\r\\n        address indexed newAddress\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when a new proxy is created.\\r\\n     * @param id The identifier of the proxy\\r\\n     * @param proxyAddress The address of the created proxy contract\\r\\n     * @param implementationAddress The address of the implementation contract\\r\\n     */\\r\\n    event ProxyCreated(\\r\\n        bytes32 indexed id,\\r\\n        address indexed proxyAddress,\\r\\n        address indexed implementationAddress\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when a new non-proxied contract address is registered.\\r\\n     * @param id The identifier of the contract\\r\\n     * @param oldAddress The address of the old contract\\r\\n     * @param newAddress The address of the new contract\\r\\n     */\\r\\n    event AddressSet(\\r\\n        bytes32 indexed id,\\r\\n        address indexed oldAddress,\\r\\n        address indexed newAddress\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the implementation of the proxy registered with id is updated\\r\\n     * @param id The identifier of the contract\\r\\n     * @param proxyAddress The address of the proxy contract\\r\\n     * @param oldImplementationAddress The address of the old implementation contract\\r\\n     * @param newImplementationAddress The address of the new implementation contract\\r\\n     */\\r\\n    event AddressSetAsProxy(\\r\\n        bytes32 indexed id,\\r\\n        address indexed proxyAddress,\\r\\n        address oldImplementationAddress,\\r\\n        address indexed newImplementationAddress\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the id of the Aqualis market to which this contract points to.\\r\\n     * @return The market id\\r\\n     **/\\r\\n    function getMarketId() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @notice Associates an id with a specific PoolAddressesProvider.\\r\\n     * @dev This can be used to create an onchain registry of PoolAddressesProviders to\\r\\n     * identify and validate multiple Aqualis markets.\\r\\n     * @param newMarketId The market id\\r\\n     */\\r\\n    function setMarketId(string calldata newMarketId) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Returns an address by its identifier.\\r\\n     * @dev The returned address might be an EOA or a contract, potentially proxied\\r\\n     * @dev It returns ZERO if there is no registered address with the given id\\r\\n     * @param id The id\\r\\n     * @return The address of the registered for the specified id\\r\\n     */\\r\\n    function getAddress(bytes32 id) external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @notice General function to update the implementation of a proxy registered with\\r\\n     * certain `id`. If there is no proxy registered, it will instantiate one and\\r\\n     * set as implementation the `newImplementationAddress`.\\r\\n     * @dev IMPORTANT Use this function carefully, only for ids that don't have an explicit\\r\\n     * setter function, in order to avoid unexpected consequences\\r\\n     * @param id The id\\r\\n     * @param newImplementationAddress The address of the new implementation\\r\\n     */\\r\\n    function setAddressAsProxy(bytes32 id, address newImplementationAddress)\\r\\n        external;\\r\\n\\r\\n    /**\\r\\n     * @notice Sets an address for an id replacing the address saved in the addresses map.\\r\\n     * @dev IMPORTANT Use this function carefully, as it will do a hard replacement\\r\\n     * @param id The id\\r\\n     * @param newAddress The address to set\\r\\n     */\\r\\n    function setAddress(bytes32 id, address newAddress) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the address of the Pool proxy.\\r\\n     * @return The Pool proxy address\\r\\n     **/\\r\\n    function getPool() external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @notice Updates the implementation of the Pool, or creates a proxy\\r\\n     * setting the new `pool` implementation when the function is called for the first time.\\r\\n     * @param newPoolImpl The new Pool implementation\\r\\n     **/\\r\\n    function setPoolImpl(address newPoolImpl) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the address of the PoolConfigurator proxy.\\r\\n     * @return The PoolConfigurator proxy address\\r\\n     **/\\r\\n    function getPoolConfigurator() external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @notice Updates the implementation of the PoolConfigurator, or creates a proxy\\r\\n     * setting the new `PoolConfigurator` implementation when the function is called for the first time.\\r\\n     * @param newPoolConfiguratorImpl The new PoolConfigurator implementation\\r\\n     **/\\r\\n    function setPoolConfiguratorImpl(address newPoolConfiguratorImpl) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the address of the price oracle.\\r\\n     * @return The address of the PriceOracle\\r\\n     */\\r\\n    function getPriceOracle() external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @notice Updates the address of the price oracle.\\r\\n     * @param newPriceOracle The address of the new PriceOracle\\r\\n     */\\r\\n    function setPriceOracle(address newPriceOracle) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the address of the ACL manager.\\r\\n     * @return The address of the ACLManager\\r\\n     */\\r\\n    function getACLManager() external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @notice Updates the address of the ACL manager.\\r\\n     * @param newAclManager The address of the new ACLManager\\r\\n     **/\\r\\n    function setACLManager(address newAclManager) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the address of the ACL admin.\\r\\n     * @return The address of the ACL admin\\r\\n     */\\r\\n    function getACLAdmin() external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @notice Updates the address of the ACL admin.\\r\\n     * @param newAclAdmin The address of the new ACL admin\\r\\n     */\\r\\n    function setACLAdmin(address newAclAdmin) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the address of the price oracle sentinel.\\r\\n     * @return The address of the PriceOracleSentinel\\r\\n     */\\r\\n    function getPriceOracleSentinel() external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @notice Updates the address of the price oracle sentinel.\\r\\n     * @param newPriceOracleSentinel The address of the new PriceOracleSentinel\\r\\n     **/\\r\\n    function setPriceOracleSentinel(address newPriceOracleSentinel) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the address of the data provider.\\r\\n     * @return The address of the DataProvider\\r\\n     */\\r\\n    function getPoolDataProvider() external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @notice Updates the address of the data provider.\\r\\n     * @param newDataProvider The address of the new DataProvider\\r\\n     **/\\r\\n    function setPoolDataProvider(address newDataProvider) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x1ba9f3a62de321c6b9f96ddff342bedc2426b984c509d69a4571006fee0a4196\",\"license\":\"AGPL-3.0\"},\"core-v3/contracts/interfaces/IPriceOracleGetter.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title IPriceOracleGetter\\r\\n * @author Aqualis\\r\\n * @notice Interface for the Aqualis price oracle.\\r\\n **/\\r\\ninterface IPriceOracleGetter {\\r\\n    /**\\r\\n     * @notice Returns the base currency address\\r\\n     * @dev Address 0x0 is reserved for USD as base currency.\\r\\n     * @return Returns the base currency address.\\r\\n     **/\\r\\n    function BASE_CURRENCY() external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the base currency unit\\r\\n     * @dev 1 ether for ETH, 1e8 for USD.\\r\\n     * @return Returns the base currency unit.\\r\\n     **/\\r\\n    function BASE_CURRENCY_UNIT() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the asset price in the base currency\\r\\n     * @param asset The address of the asset\\r\\n     * @return The price of the asset\\r\\n     **/\\r\\n    function getAssetPrice(address asset) external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0xcfd792f04803f1b7679bcbc41923dbd8a5b17433b4ed3102cf03250578ff128b\",\"license\":\"AGPL-3.0\"},\"core-v3/contracts/interfaces/IPriceOracleSentinel.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport {IPoolAddressesProvider} from \\\"./IPoolAddressesProvider.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title IPriceOracleSentinel\\r\\n * @author Aqualis\\r\\n * @notice Defines the basic interface for the PriceOracleSentinel\\r\\n */\\r\\ninterface IPriceOracleSentinel {\\r\\n    /**\\r\\n     * @dev Emitted after the sequencer oracle is updated\\r\\n     * @param newSequencerOracle The new sequencer oracle\\r\\n     */\\r\\n    event SequencerOracleUpdated(address newSequencerOracle);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted after the grace period is updated\\r\\n     * @param newGracePeriod The new grace period value\\r\\n     */\\r\\n    event GracePeriodUpdated(uint256 newGracePeriod);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the PoolAddressesProvider\\r\\n     * @return The address of the PoolAddressesProvider contract\\r\\n     */\\r\\n    function ADDRESSES_PROVIDER()\\r\\n        external\\r\\n        view\\r\\n        returns (IPoolAddressesProvider);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns true if the `borrow` operation is allowed.\\r\\n     * @dev Operation not allowed when PriceOracle is down or grace period not passed.\\r\\n     * @return True if the `borrow` operation is allowed, false otherwise.\\r\\n     */\\r\\n    function isBorrowAllowed() external view returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns true if the `liquidation` operation is allowed.\\r\\n     * @dev Operation not allowed when PriceOracle is down or grace period not passed.\\r\\n     * @return True if the `liquidation` operation is allowed, false otherwise.\\r\\n     */\\r\\n    function isLiquidationAllowed() external view returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @notice Updates the address of the sequencer oracle\\r\\n     * @param newSequencerOracle The address of the new Sequencer Oracle to use\\r\\n     */\\r\\n    function setSequencerOracle(address newSequencerOracle) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Updates the duration of the grace period\\r\\n     * @param newGracePeriod The value of the new grace period duration\\r\\n     */\\r\\n    function setGracePeriod(uint256 newGracePeriod) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the SequencerOracle\\r\\n     * @return The address of the sequencer oracle contract\\r\\n     */\\r\\n    function getSequencerOracle() external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the grace period\\r\\n     * @return The duration of the grace period\\r\\n     */\\r\\n    function getGracePeriod() external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0x4fa47c3aca7de5a0c8ca6a67b4431590a5d0922805a3fec4696b65a48343ad1c\",\"license\":\"AGPL-3.0\"},\"core-v3/contracts/interfaces/IReserveInterestRateStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport {DataTypes} from \\\"../protocol/libraries/types/DataTypes.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title IReserveInterestRateStrategy\\r\\n * @author Aqualis\\r\\n * @notice Interface for the calculation of the interest rates\\r\\n */\\r\\ninterface IReserveInterestRateStrategy {\\r\\n    /**\\r\\n     * @notice Returns the base variable borrow rate\\r\\n     * @return The base variable borrow rate, expressed in ray\\r\\n     **/\\r\\n    function getBaseVariableBorrowRate() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the maximum variable borrow rate\\r\\n     * @return The maximum variable borrow rate, expressed in ray\\r\\n     **/\\r\\n    function getMaxVariableBorrowRate() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Calculates the interest rates depending on the reserve's state and configurations\\r\\n     * @param params The parameters needed to calculate interest rates\\r\\n     * @return liquidityRate The liquidity rate expressed in rays\\r\\n     * @return stableBorrowRate The stable borrow rate expressed in rays\\r\\n     * @return variableBorrowRate The variable borrow rate expressed in rays\\r\\n     **/\\r\\n    function calculateInterestRates(\\r\\n        DataTypes.CalculateInterestRatesParams memory params\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256\\r\\n        );\\r\\n}\\r\\n\",\"keccak256\":\"0x05842ba35111cc295a379df4fdf81f7135ac545569fdfbba3ed9b9a4889d1094\",\"license\":\"AGPL-3.0\"},\"core-v3/contracts/interfaces/IScaledBalanceToken.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title IScaledBalanceToken\\r\\n * @author Aqualis\\r\\n * @notice Defines the basic interface for a scaledbalance token.\\r\\n **/\\r\\ninterface IScaledBalanceToken {\\r\\n    /**\\r\\n     * @dev Emitted after the mint action\\r\\n     * @param caller The address performing the mint\\r\\n     * @param onBehalfOf The address of the user that will receive the minted scaled balance tokens\\r\\n     * @param value The amount being minted (user entered amount + balance increase from interest)\\r\\n     * @param balanceIncrease The increase in balance since the last action of the user\\r\\n     * @param index The next liquidity index of the reserve\\r\\n     **/\\r\\n    event Mint(\\r\\n        address indexed caller,\\r\\n        address indexed onBehalfOf,\\r\\n        uint256 value,\\r\\n        uint256 balanceIncrease,\\r\\n        uint256 index\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted after scaled balance tokens are burned\\r\\n     * @param from The address from which the scaled tokens will be burned\\r\\n     * @param target The address that will receive the underlying, if any\\r\\n     * @param value The amount being burned (user entered amount - balance increase from interest)\\r\\n     * @param balanceIncrease The increase in balance since the last action of the user\\r\\n     * @param index The next liquidity index of the reserve\\r\\n     **/\\r\\n    event Burn(\\r\\n        address indexed from,\\r\\n        address indexed target,\\r\\n        uint256 value,\\r\\n        uint256 balanceIncrease,\\r\\n        uint256 index\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the scaled balance of the user.\\r\\n     * @dev The scaled balance is the sum of all the updated stored balance divided by the reserve's liquidity index\\r\\n     * at the moment of the update\\r\\n     * @param user The user whose balance is calculated\\r\\n     * @return The scaled balance of the user\\r\\n     **/\\r\\n    function scaledBalanceOf(address user) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the scaled balance of the user and the scaled total supply.\\r\\n     * @param user The address of the user\\r\\n     * @return The scaled balance of the user\\r\\n     * @return The scaled total supply\\r\\n     **/\\r\\n    function getScaledUserBalanceAndSupply(address user)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256, uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the scaled total supply of the scaled balance token. Represents sum(debt/index)\\r\\n     * @return The scaled total supply\\r\\n     **/\\r\\n    function scaledTotalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns last index interest was accrued to the user's balance\\r\\n     * @param user The address of the user\\r\\n     * @return The last index interest was accrued to the user's balance, expressed in ray\\r\\n     **/\\r\\n    function getPreviousIndex(address user) external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0x22235d68542f32effe52596a1d106457768fb1a6859de1b8e3f52793aa8c631e\",\"license\":\"AGPL-3.0\"},\"core-v3/contracts/interfaces/IStableDebtToken.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport {IInitializableDebtToken} from \\\"./IInitializableDebtToken.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title IStableDebtToken\\r\\n * @author Aqualis\\r\\n * @notice Defines the interface for the stable debt token\\r\\n * @dev It does not inherit from IERC20 to save in code size\\r\\n **/\\r\\ninterface IStableDebtToken is IInitializableDebtToken {\\r\\n    /**\\r\\n     * @dev Emitted when new stable debt is minted\\r\\n     * @param user The address of the user who triggered the minting\\r\\n     * @param onBehalfOf The recipient of stable debt tokens\\r\\n     * @param amount The amount minted (user entered amount + balance increase from interest)\\r\\n     * @param currentBalance The current balance of the user\\r\\n     * @param balanceIncrease The increase in balance since the last action of the user\\r\\n     * @param newRate The rate of the debt after the minting\\r\\n     * @param avgStableRate The next average stable rate after the minting\\r\\n     * @param newTotalSupply The next total supply of the stable debt token after the action\\r\\n     **/\\r\\n    event Mint(\\r\\n        address indexed user,\\r\\n        address indexed onBehalfOf,\\r\\n        uint256 amount,\\r\\n        uint256 currentBalance,\\r\\n        uint256 balanceIncrease,\\r\\n        uint256 newRate,\\r\\n        uint256 avgStableRate,\\r\\n        uint256 newTotalSupply\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when new stable debt is burned\\r\\n     * @param from The address from which the debt will be burned\\r\\n     * @param amount The amount being burned (user entered amount - balance increase from interest)\\r\\n     * @param currentBalance The current balance of the user\\r\\n     * @param balanceIncrease The the increase in balance since the last action of the user\\r\\n     * @param avgStableRate The next average stable rate after the burning\\r\\n     * @param newTotalSupply The next total supply of the stable debt token after the action\\r\\n     **/\\r\\n    event Burn(\\r\\n        address indexed from,\\r\\n        uint256 amount,\\r\\n        uint256 currentBalance,\\r\\n        uint256 balanceIncrease,\\r\\n        uint256 avgStableRate,\\r\\n        uint256 newTotalSupply\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @notice Mints debt token to the `onBehalfOf` address.\\r\\n     * @dev The resulting rate is the weighted average between the rate of the new debt\\r\\n     * and the rate of the previous debt\\r\\n     * @param user The address receiving the borrowed underlying, being the delegatee in case\\r\\n     * of credit delegate, or same as `onBehalfOf` otherwise\\r\\n     * @param onBehalfOf The address receiving the debt tokens\\r\\n     * @param amount The amount of debt tokens to mint\\r\\n     * @param rate The rate of the debt being minted\\r\\n     * @return True if it is the first borrow, false otherwise\\r\\n     * @return The total stable debt\\r\\n     * @return The average stable borrow rate\\r\\n     **/\\r\\n    function mint(\\r\\n        address user,\\r\\n        address onBehalfOf,\\r\\n        uint256 amount,\\r\\n        uint256 rate\\r\\n    )\\r\\n        external\\r\\n        returns (\\r\\n            bool,\\r\\n            uint256,\\r\\n            uint256\\r\\n        );\\r\\n\\r\\n    /**\\r\\n     * @notice Burns debt of `user`\\r\\n     * @dev The resulting rate is the weighted average between the rate of the new debt\\r\\n     * and the rate of the previous debt\\r\\n     * @dev In some instances, a burn transaction will emit a mint event\\r\\n     * if the amount to burn is less than the interest the user earned\\r\\n     * @param from The address from which the debt will be burned\\r\\n     * @param amount The amount of debt tokens getting burned\\r\\n     * @return The total stable debt\\r\\n     * @return The average stable borrow rate\\r\\n     **/\\r\\n    function burn(address from, uint256 amount)\\r\\n        external\\r\\n        returns (uint256, uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the average rate of all the stable rate loans.\\r\\n     * @return The average stable rate\\r\\n     **/\\r\\n    function getAverageStableRate() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the stable rate of the user debt\\r\\n     * @param user The address of the user\\r\\n     * @return The stable rate of the user\\r\\n     **/\\r\\n    function getUserStableRate(address user) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the timestamp of the last update of the user\\r\\n     * @param user The address of the user\\r\\n     * @return The timestamp\\r\\n     **/\\r\\n    function getUserLastUpdated(address user) external view returns (uint40);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the principal, the total supply, the average stable rate and the timestamp for the last update\\r\\n     * @return The principal\\r\\n     * @return The total supply\\r\\n     * @return The average stable rate\\r\\n     * @return The timestamp of the last update\\r\\n     **/\\r\\n    function getSupplyData()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint40\\r\\n        );\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the timestamp of the last update of the total supply\\r\\n     * @return The timestamp\\r\\n     **/\\r\\n    function getTotalSupplyLastUpdated() external view returns (uint40);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the total supply and the average stable rate\\r\\n     * @return The total supply\\r\\n     * @return The average rate\\r\\n     **/\\r\\n    function getTotalSupplyAndAvgRate()\\r\\n        external\\r\\n        view\\r\\n        returns (uint256, uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the principal debt balance of the user\\r\\n     * @return The debt balance of the user since the last burn/mint action\\r\\n     **/\\r\\n    function principalBalanceOf(address user) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the address of the underlying asset of this stableDebtToken (E.g. WETH for stableDebtWETH)\\r\\n     * @return The address of the underlying asset\\r\\n     **/\\r\\n    function UNDERLYING_ASSET_ADDRESS() external view returns (address);\\r\\n}\\r\\n\",\"keccak256\":\"0x499b9b67379ba2b396da9d7a303f7ef1d1981c241e9f0e3c80c24250e2c377f7\",\"license\":\"AGPL-3.0\"},\"core-v3/contracts/interfaces/IVariableDebtToken.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport {IScaledBalanceToken} from \\\"./IScaledBalanceToken.sol\\\";\\r\\nimport {IInitializableDebtToken} from \\\"./IInitializableDebtToken.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title IVariableDebtToken\\r\\n * @author Aqualis\\r\\n * @notice Defines the basic interface for a variable debt token.\\r\\n **/\\r\\ninterface IVariableDebtToken is IScaledBalanceToken, IInitializableDebtToken {\\r\\n    /**\\r\\n     * @notice Mints debt token to the `onBehalfOf` address\\r\\n     * @param user The address receiving the borrowed underlying, being the delegatee in case\\r\\n     * of credit delegate, or same as `onBehalfOf` otherwise\\r\\n     * @param onBehalfOf The address receiving the debt tokens\\r\\n     * @param amount The amount of debt being minted\\r\\n     * @param index The variable debt index of the reserve\\r\\n     * @return True if the previous balance of the user is 0, false otherwise\\r\\n     * @return The scaled total debt of the reserve\\r\\n     **/\\r\\n    function mint(\\r\\n        address user,\\r\\n        address onBehalfOf,\\r\\n        uint256 amount,\\r\\n        uint256 index\\r\\n    ) external returns (bool, uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Burns user variable debt\\r\\n     * @dev In some instances, a burn transaction will emit a mint event\\r\\n     * if the amount to burn is less than the interest that the user accrued\\r\\n     * @param from The address from which the debt will be burned\\r\\n     * @param amount The amount getting burned\\r\\n     * @param index The variable debt index of the reserve\\r\\n     * @return The scaled total debt of the reserve\\r\\n     **/\\r\\n    function burn(\\r\\n        address from,\\r\\n        uint256 amount,\\r\\n        uint256 index\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the address of the underlying asset of this debtToken (E.g. WETH for variableDebtWETH)\\r\\n     * @return The address of the underlying asset\\r\\n     **/\\r\\n    function UNDERLYING_ASSET_ADDRESS() external view returns (address);\\r\\n}\\r\\n\",\"keccak256\":\"0x4cfd50193cf338fd60abdb3172df11e4a9bff4f9b500ef3d0a64d43565d3aed6\",\"license\":\"AGPL-3.0\"},\"core-v3/contracts/protocol/libraries/configuration/ReserveConfiguration.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity 0.8.10;\\r\\n\\r\\nimport {Errors} from \\\"../helpers/Errors.sol\\\";\\r\\nimport {DataTypes} from \\\"../types/DataTypes.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title ReserveConfiguration library\\r\\n * @author Aqualis\\r\\n * @notice Implements the bitmap logic to handle the reserve configuration\\r\\n */\\r\\nlibrary ReserveConfiguration {\\r\\n    uint256 internal constant LTV_MASK =                       0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000; // prettier-ignore\\r\\n    uint256 internal constant LIQUIDATION_THRESHOLD_MASK =     0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFF; // prettier-ignore\\r\\n    uint256 internal constant LIQUIDATION_BONUS_MASK =         0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFFFFFF; // prettier-ignore\\r\\n    uint256 internal constant DECIMALS_MASK =                  0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00FFFFFFFFFFFF; // prettier-ignore\\r\\n    uint256 internal constant ACTIVE_MASK =                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFF; // prettier-ignore\\r\\n    uint256 internal constant FROZEN_MASK =                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFF; // prettier-ignore\\r\\n    uint256 internal constant BORROWING_MASK =                 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFFFFFF; // prettier-ignore\\r\\n    uint256 internal constant STABLE_BORROWING_MASK =          0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFFFFFFFFF; // prettier-ignore\\r\\n    uint256 internal constant PAUSED_MASK =                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFF; // prettier-ignore\\r\\n    uint256 internal constant BORROWABLE_IN_ISOLATION_MASK =   0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFF; // prettier-ignore\\r\\n    uint256 internal constant SILOED_BORROWING_MASK =          0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFFFFFFF; // prettier-ignore\\r\\n    uint256 internal constant RESERVE_FACTOR_MASK =            0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFFFFFFFFFFFFFF; // prettier-ignore\\r\\n    uint256 internal constant BORROW_CAP_MASK =                0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000FFFFFFFFFFFFFFFFFFFF; // prettier-ignore\\r\\n    uint256 internal constant SUPPLY_CAP_MASK =                0xFFFFFFFFFFFFFFFFFFFFFFFFFF000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore\\r\\n    uint256 internal constant LIQUIDATION_PROTOCOL_FEE_MASK =  0xFFFFFFFFFFFFFFFFFFFFFF0000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore\\r\\n    uint256 internal constant EMODE_CATEGORY_MASK =            0xFFFFFFFFFFFFFFFFFFFF00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore\\r\\n    uint256 internal constant UNBACKED_MINT_CAP_MASK =         0xFFFFFFFFFFF000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore\\r\\n    uint256 internal constant DEBT_CEILING_MASK =              0xF0000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore\\r\\n\\r\\n    /// @dev For the LTV, the start bit is 0 (up to 15), hence no bitshifting is needed\\r\\n    uint256 internal constant LIQUIDATION_THRESHOLD_START_BIT_POSITION = 16;\\r\\n    uint256 internal constant LIQUIDATION_BONUS_START_BIT_POSITION = 32;\\r\\n    uint256 internal constant RESERVE_DECIMALS_START_BIT_POSITION = 48;\\r\\n    uint256 internal constant IS_ACTIVE_START_BIT_POSITION = 56;\\r\\n    uint256 internal constant IS_FROZEN_START_BIT_POSITION = 57;\\r\\n    uint256 internal constant BORROWING_ENABLED_START_BIT_POSITION = 58;\\r\\n    uint256 internal constant STABLE_BORROWING_ENABLED_START_BIT_POSITION = 59;\\r\\n    uint256 internal constant IS_PAUSED_START_BIT_POSITION = 60;\\r\\n    uint256 internal constant BORROWABLE_IN_ISOLATION_START_BIT_POSITION = 61;\\r\\n    uint256 internal constant SILOED_BORROWING_START_BIT_POSITION = 62;\\r\\n    /// @dev bit 63 reserved\\r\\n\\r\\n    uint256 internal constant RESERVE_FACTOR_START_BIT_POSITION = 64;\\r\\n    uint256 internal constant BORROW_CAP_START_BIT_POSITION = 80;\\r\\n    uint256 internal constant SUPPLY_CAP_START_BIT_POSITION = 116;\\r\\n    uint256 internal constant LIQUIDATION_PROTOCOL_FEE_START_BIT_POSITION = 152;\\r\\n    uint256 internal constant EMODE_CATEGORY_START_BIT_POSITION = 168;\\r\\n    uint256 internal constant UNBACKED_MINT_CAP_START_BIT_POSITION = 176;\\r\\n    uint256 internal constant DEBT_CEILING_START_BIT_POSITION = 212;\\r\\n\\r\\n    uint256 internal constant MAX_VALID_LTV = 65535;\\r\\n    uint256 internal constant MAX_VALID_LIQUIDATION_THRESHOLD = 65535;\\r\\n    uint256 internal constant MAX_VALID_LIQUIDATION_BONUS = 65535;\\r\\n    uint256 internal constant MAX_VALID_DECIMALS = 255;\\r\\n    uint256 internal constant MAX_VALID_RESERVE_FACTOR = 65535;\\r\\n    uint256 internal constant MAX_VALID_BORROW_CAP = 68719476735;\\r\\n    uint256 internal constant MAX_VALID_SUPPLY_CAP = 68719476735;\\r\\n    uint256 internal constant MAX_VALID_LIQUIDATION_PROTOCOL_FEE = 65535;\\r\\n    uint256 internal constant MAX_VALID_EMODE_CATEGORY = 255;\\r\\n    uint256 internal constant MAX_VALID_UNBACKED_MINT_CAP = 68719476735;\\r\\n    uint256 internal constant MAX_VALID_DEBT_CEILING = 1099511627775;\\r\\n\\r\\n    uint256 public constant DEBT_CEILING_DECIMALS = 2;\\r\\n    uint16 public constant MAX_RESERVES_COUNT = 128;\\r\\n\\r\\n    /**\\r\\n     * @notice Sets the Loan to Value of the reserve\\r\\n     * @param self The reserve configuration\\r\\n     * @param ltv The new ltv\\r\\n     **/\\r\\n    function setLtv(DataTypes.ReserveConfigurationMap memory self, uint256 ltv)\\r\\n        internal\\r\\n        pure\\r\\n    {\\r\\n        require(ltv <= MAX_VALID_LTV, Errors.INVALID_LTV);\\r\\n\\r\\n        self.data = (self.data & LTV_MASK) | ltv;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the Loan to Value of the reserve\\r\\n     * @param self The reserve configuration\\r\\n     * @return The loan to value\\r\\n     **/\\r\\n    function getLtv(DataTypes.ReserveConfigurationMap memory self)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return self.data & ~LTV_MASK;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sets the liquidation threshold of the reserve\\r\\n     * @param self The reserve configuration\\r\\n     * @param threshold The new liquidation threshold\\r\\n     **/\\r\\n    function setLiquidationThreshold(\\r\\n        DataTypes.ReserveConfigurationMap memory self,\\r\\n        uint256 threshold\\r\\n    ) internal pure {\\r\\n        require(\\r\\n            threshold <= MAX_VALID_LIQUIDATION_THRESHOLD,\\r\\n            Errors.INVALID_LIQ_THRESHOLD\\r\\n        );\\r\\n\\r\\n        self.data =\\r\\n            (self.data & LIQUIDATION_THRESHOLD_MASK) |\\r\\n            (threshold << LIQUIDATION_THRESHOLD_START_BIT_POSITION);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the liquidation threshold of the reserve\\r\\n     * @param self The reserve configuration\\r\\n     * @return The liquidation threshold\\r\\n     **/\\r\\n    function getLiquidationThreshold(\\r\\n        DataTypes.ReserveConfigurationMap memory self\\r\\n    ) internal pure returns (uint256) {\\r\\n        return\\r\\n            (self.data & ~LIQUIDATION_THRESHOLD_MASK) >>\\r\\n            LIQUIDATION_THRESHOLD_START_BIT_POSITION;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sets the liquidation bonus of the reserve\\r\\n     * @param self The reserve configuration\\r\\n     * @param bonus The new liquidation bonus\\r\\n     **/\\r\\n    function setLiquidationBonus(\\r\\n        DataTypes.ReserveConfigurationMap memory self,\\r\\n        uint256 bonus\\r\\n    ) internal pure {\\r\\n        require(bonus <= MAX_VALID_LIQUIDATION_BONUS, Errors.INVALID_LIQ_BONUS);\\r\\n\\r\\n        self.data =\\r\\n            (self.data & LIQUIDATION_BONUS_MASK) |\\r\\n            (bonus << LIQUIDATION_BONUS_START_BIT_POSITION);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the liquidation bonus of the reserve\\r\\n     * @param self The reserve configuration\\r\\n     * @return The liquidation bonus\\r\\n     **/\\r\\n    function getLiquidationBonus(DataTypes.ReserveConfigurationMap memory self)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return\\r\\n            (self.data & ~LIQUIDATION_BONUS_MASK) >>\\r\\n            LIQUIDATION_BONUS_START_BIT_POSITION;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sets the decimals of the underlying asset of the reserve\\r\\n     * @param self The reserve configuration\\r\\n     * @param decimals The decimals\\r\\n     **/\\r\\n    function setDecimals(\\r\\n        DataTypes.ReserveConfigurationMap memory self,\\r\\n        uint256 decimals\\r\\n    ) internal pure {\\r\\n        require(decimals <= MAX_VALID_DECIMALS, Errors.INVALID_DECIMALS);\\r\\n\\r\\n        self.data =\\r\\n            (self.data & DECIMALS_MASK) |\\r\\n            (decimals << RESERVE_DECIMALS_START_BIT_POSITION);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the decimals of the underlying asset of the reserve\\r\\n     * @param self The reserve configuration\\r\\n     * @return The decimals of the asset\\r\\n     **/\\r\\n    function getDecimals(DataTypes.ReserveConfigurationMap memory self)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return\\r\\n            (self.data & ~DECIMALS_MASK) >> RESERVE_DECIMALS_START_BIT_POSITION;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sets the active state of the reserve\\r\\n     * @param self The reserve configuration\\r\\n     * @param active The active state\\r\\n     **/\\r\\n    function setActive(\\r\\n        DataTypes.ReserveConfigurationMap memory self,\\r\\n        bool active\\r\\n    ) internal pure {\\r\\n        self.data =\\r\\n            (self.data & ACTIVE_MASK) |\\r\\n            (uint256(active ? 1 : 0) << IS_ACTIVE_START_BIT_POSITION);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the active state of the reserve\\r\\n     * @param self The reserve configuration\\r\\n     * @return The active state\\r\\n     **/\\r\\n    function getActive(DataTypes.ReserveConfigurationMap memory self)\\r\\n        internal\\r\\n        pure\\r\\n        returns (bool)\\r\\n    {\\r\\n        return (self.data & ~ACTIVE_MASK) != 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sets the frozen state of the reserve\\r\\n     * @param self The reserve configuration\\r\\n     * @param frozen The frozen state\\r\\n     **/\\r\\n    function setFrozen(\\r\\n        DataTypes.ReserveConfigurationMap memory self,\\r\\n        bool frozen\\r\\n    ) internal pure {\\r\\n        self.data =\\r\\n            (self.data & FROZEN_MASK) |\\r\\n            (uint256(frozen ? 1 : 0) << IS_FROZEN_START_BIT_POSITION);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the frozen state of the reserve\\r\\n     * @param self The reserve configuration\\r\\n     * @return The frozen state\\r\\n     **/\\r\\n    function getFrozen(DataTypes.ReserveConfigurationMap memory self)\\r\\n        internal\\r\\n        pure\\r\\n        returns (bool)\\r\\n    {\\r\\n        return (self.data & ~FROZEN_MASK) != 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sets the paused state of the reserve\\r\\n     * @param self The reserve configuration\\r\\n     * @param paused The paused state\\r\\n     **/\\r\\n    function setPaused(\\r\\n        DataTypes.ReserveConfigurationMap memory self,\\r\\n        bool paused\\r\\n    ) internal pure {\\r\\n        self.data =\\r\\n            (self.data & PAUSED_MASK) |\\r\\n            (uint256(paused ? 1 : 0) << IS_PAUSED_START_BIT_POSITION);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the paused state of the reserve\\r\\n     * @param self The reserve configuration\\r\\n     * @return The paused state\\r\\n     **/\\r\\n    function getPaused(DataTypes.ReserveConfigurationMap memory self)\\r\\n        internal\\r\\n        pure\\r\\n        returns (bool)\\r\\n    {\\r\\n        return (self.data & ~PAUSED_MASK) != 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sets the borrowable in isolation flag for the reserve.\\r\\n     * @dev When this flag is set to true, the asset will be borrowable against isolated collaterals and the borrowed\\r\\n     * amount will be accumulated in the isolated collateral's total debt exposure.\\r\\n     * @dev Only assets of the same family (eg USD stablecoins) should be borrowable in isolation mode to keep\\r\\n     * consistency in the debt ceiling calculations.\\r\\n     * @param self The reserve configuration\\r\\n     * @param borrowable True if the asset is borrowable\\r\\n     **/\\r\\n    function setBorrowableInIsolation(\\r\\n        DataTypes.ReserveConfigurationMap memory self,\\r\\n        bool borrowable\\r\\n    ) internal pure {\\r\\n        self.data =\\r\\n            (self.data & BORROWABLE_IN_ISOLATION_MASK) |\\r\\n            (uint256(borrowable ? 1 : 0) <<\\r\\n                BORROWABLE_IN_ISOLATION_START_BIT_POSITION);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the borrowable in isolation flag for the reserve.\\r\\n     * @dev If the returned flag is true, the asset is borrowable against isolated collateral. Assets borrowed with\\r\\n     * isolated collateral is accounted for in the isolated collateral's total debt exposure.\\r\\n     * @dev Only assets of the same family (eg USD stablecoins) should be borrowable in isolation mode to keep\\r\\n     * consistency in the debt ceiling calculations.\\r\\n     * @param self The reserve configuration\\r\\n     * @return The borrowable in isolation flag\\r\\n     **/\\r\\n    function getBorrowableInIsolation(\\r\\n        DataTypes.ReserveConfigurationMap memory self\\r\\n    ) internal pure returns (bool) {\\r\\n        return (self.data & ~BORROWABLE_IN_ISOLATION_MASK) != 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sets the siloed borrowing flag for the reserve.\\r\\n     * @dev When this flag is set to true, users borrowing this asset will not be allowed to borrow any other asset.\\r\\n     * @param self The reserve configuration\\r\\n     * @param siloed True if the asset is siloed\\r\\n     **/\\r\\n    function setSiloedBorrowing(\\r\\n        DataTypes.ReserveConfigurationMap memory self,\\r\\n        bool siloed\\r\\n    ) internal pure {\\r\\n        self.data =\\r\\n            (self.data & SILOED_BORROWING_MASK) |\\r\\n            (uint256(siloed ? 1 : 0) << SILOED_BORROWING_START_BIT_POSITION);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the siloed borrowing flag for the reserve.\\r\\n     * @dev When this flag is set to true, users borrowing this asset will not be allowed to borrow any other asset.\\r\\n     * @param self The reserve configuration\\r\\n     * @return The siloed borrowing flag\\r\\n     **/\\r\\n    function getSiloedBorrowing(DataTypes.ReserveConfigurationMap memory self)\\r\\n        internal\\r\\n        pure\\r\\n        returns (bool)\\r\\n    {\\r\\n        return (self.data & ~SILOED_BORROWING_MASK) != 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Enables or disables borrowing on the reserve\\r\\n     * @param self The reserve configuration\\r\\n     * @param enabled True if the borrowing needs to be enabled, false otherwise\\r\\n     **/\\r\\n    function setBorrowingEnabled(\\r\\n        DataTypes.ReserveConfigurationMap memory self,\\r\\n        bool enabled\\r\\n    ) internal pure {\\r\\n        self.data =\\r\\n            (self.data & BORROWING_MASK) |\\r\\n            (uint256(enabled ? 1 : 0) << BORROWING_ENABLED_START_BIT_POSITION);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the borrowing state of the reserve\\r\\n     * @param self The reserve configuration\\r\\n     * @return The borrowing state\\r\\n     **/\\r\\n    function getBorrowingEnabled(DataTypes.ReserveConfigurationMap memory self)\\r\\n        internal\\r\\n        pure\\r\\n        returns (bool)\\r\\n    {\\r\\n        return (self.data & ~BORROWING_MASK) != 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Enables or disables stable rate borrowing on the reserve\\r\\n     * @param self The reserve configuration\\r\\n     * @param enabled True if the stable rate borrowing needs to be enabled, false otherwise\\r\\n     **/\\r\\n    function setStableRateBorrowingEnabled(\\r\\n        DataTypes.ReserveConfigurationMap memory self,\\r\\n        bool enabled\\r\\n    ) internal pure {\\r\\n        self.data =\\r\\n            (self.data & STABLE_BORROWING_MASK) |\\r\\n            (uint256(enabled ? 1 : 0) <<\\r\\n                STABLE_BORROWING_ENABLED_START_BIT_POSITION);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the stable rate borrowing state of the reserve\\r\\n     * @param self The reserve configuration\\r\\n     * @return The stable rate borrowing state\\r\\n     **/\\r\\n    function getStableRateBorrowingEnabled(\\r\\n        DataTypes.ReserveConfigurationMap memory self\\r\\n    ) internal pure returns (bool) {\\r\\n        return (self.data & ~STABLE_BORROWING_MASK) != 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sets the reserve factor of the reserve\\r\\n     * @param self The reserve configuration\\r\\n     * @param reserveFactor The reserve factor\\r\\n     **/\\r\\n    function setReserveFactor(\\r\\n        DataTypes.ReserveConfigurationMap memory self,\\r\\n        uint256 reserveFactor\\r\\n    ) internal pure {\\r\\n        require(\\r\\n            reserveFactor <= MAX_VALID_RESERVE_FACTOR,\\r\\n            Errors.INVALID_RESERVE_FACTOR\\r\\n        );\\r\\n\\r\\n        self.data =\\r\\n            (self.data & RESERVE_FACTOR_MASK) |\\r\\n            (reserveFactor << RESERVE_FACTOR_START_BIT_POSITION);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the reserve factor of the reserve\\r\\n     * @param self The reserve configuration\\r\\n     * @return The reserve factor\\r\\n     **/\\r\\n    function getReserveFactor(DataTypes.ReserveConfigurationMap memory self)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return\\r\\n            (self.data & ~RESERVE_FACTOR_MASK) >>\\r\\n            RESERVE_FACTOR_START_BIT_POSITION;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sets the borrow cap of the reserve\\r\\n     * @param self The reserve configuration\\r\\n     * @param borrowCap The borrow cap\\r\\n     **/\\r\\n    function setBorrowCap(\\r\\n        DataTypes.ReserveConfigurationMap memory self,\\r\\n        uint256 borrowCap\\r\\n    ) internal pure {\\r\\n        require(borrowCap <= MAX_VALID_BORROW_CAP, Errors.INVALID_BORROW_CAP);\\r\\n\\r\\n        self.data =\\r\\n            (self.data & BORROW_CAP_MASK) |\\r\\n            (borrowCap << BORROW_CAP_START_BIT_POSITION);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the borrow cap of the reserve\\r\\n     * @param self The reserve configuration\\r\\n     * @return The borrow cap\\r\\n     **/\\r\\n    function getBorrowCap(DataTypes.ReserveConfigurationMap memory self)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return (self.data & ~BORROW_CAP_MASK) >> BORROW_CAP_START_BIT_POSITION;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sets the supply cap of the reserve\\r\\n     * @param self The reserve configuration\\r\\n     * @param supplyCap The supply cap\\r\\n     **/\\r\\n    function setSupplyCap(\\r\\n        DataTypes.ReserveConfigurationMap memory self,\\r\\n        uint256 supplyCap\\r\\n    ) internal pure {\\r\\n        require(supplyCap <= MAX_VALID_SUPPLY_CAP, Errors.INVALID_SUPPLY_CAP);\\r\\n\\r\\n        self.data =\\r\\n            (self.data & SUPPLY_CAP_MASK) |\\r\\n            (supplyCap << SUPPLY_CAP_START_BIT_POSITION);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the supply cap of the reserve\\r\\n     * @param self The reserve configuration\\r\\n     * @return The supply cap\\r\\n     **/\\r\\n    function getSupplyCap(DataTypes.ReserveConfigurationMap memory self)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return (self.data & ~SUPPLY_CAP_MASK) >> SUPPLY_CAP_START_BIT_POSITION;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sets the debt ceiling in isolation mode for the asset\\r\\n     * @param self The reserve configuration\\r\\n     * @param ceiling The maximum debt ceiling for the asset\\r\\n     **/\\r\\n    function setDebtCeiling(\\r\\n        DataTypes.ReserveConfigurationMap memory self,\\r\\n        uint256 ceiling\\r\\n    ) internal pure {\\r\\n        require(ceiling <= MAX_VALID_DEBT_CEILING, Errors.INVALID_DEBT_CEILING);\\r\\n\\r\\n        self.data =\\r\\n            (self.data & DEBT_CEILING_MASK) |\\r\\n            (ceiling << DEBT_CEILING_START_BIT_POSITION);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the debt ceiling for the asset if the asset is in isolation mode\\r\\n     * @param self The reserve configuration\\r\\n     * @return The debt ceiling (0 = isolation mode disabled)\\r\\n     **/\\r\\n    function getDebtCeiling(DataTypes.ReserveConfigurationMap memory self)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return\\r\\n            (self.data & ~DEBT_CEILING_MASK) >> DEBT_CEILING_START_BIT_POSITION;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sets the liquidation protocol fee of the reserve\\r\\n     * @param self The reserve configuration\\r\\n     * @param liquidationProtocolFee The liquidation protocol fee\\r\\n     **/\\r\\n    function setLiquidationProtocolFee(\\r\\n        DataTypes.ReserveConfigurationMap memory self,\\r\\n        uint256 liquidationProtocolFee\\r\\n    ) internal pure {\\r\\n        require(\\r\\n            liquidationProtocolFee <= MAX_VALID_LIQUIDATION_PROTOCOL_FEE,\\r\\n            Errors.INVALID_LIQUIDATION_PROTOCOL_FEE\\r\\n        );\\r\\n\\r\\n        self.data =\\r\\n            (self.data & LIQUIDATION_PROTOCOL_FEE_MASK) |\\r\\n            (liquidationProtocolFee <<\\r\\n                LIQUIDATION_PROTOCOL_FEE_START_BIT_POSITION);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Gets the liquidation protocol fee\\r\\n     * @param self The reserve configuration\\r\\n     * @return The liquidation protocol fee\\r\\n     **/\\r\\n    function getLiquidationProtocolFee(\\r\\n        DataTypes.ReserveConfigurationMap memory self\\r\\n    ) internal pure returns (uint256) {\\r\\n        return\\r\\n            (self.data & ~LIQUIDATION_PROTOCOL_FEE_MASK) >>\\r\\n            LIQUIDATION_PROTOCOL_FEE_START_BIT_POSITION;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sets the unbacked mint cap of the reserve\\r\\n     * @param self The reserve configuration\\r\\n     * @param unbackedMintCap The unbacked mint cap\\r\\n     **/\\r\\n    function setUnbackedMintCap(\\r\\n        DataTypes.ReserveConfigurationMap memory self,\\r\\n        uint256 unbackedMintCap\\r\\n    ) internal pure {\\r\\n        require(\\r\\n            unbackedMintCap <= MAX_VALID_UNBACKED_MINT_CAP,\\r\\n            Errors.INVALID_UNBACKED_MINT_CAP\\r\\n        );\\r\\n\\r\\n        self.data =\\r\\n            (self.data & UNBACKED_MINT_CAP_MASK) |\\r\\n            (unbackedMintCap << UNBACKED_MINT_CAP_START_BIT_POSITION);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Gets the unbacked mint cap of the reserve\\r\\n     * @param self The reserve configuration\\r\\n     * @return The unbacked mint cap\\r\\n     **/\\r\\n    function getUnbackedMintCap(DataTypes.ReserveConfigurationMap memory self)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return\\r\\n            (self.data & ~UNBACKED_MINT_CAP_MASK) >>\\r\\n            UNBACKED_MINT_CAP_START_BIT_POSITION;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sets the eMode asset category\\r\\n     * @param self The reserve configuration\\r\\n     * @param category The asset category when the user selects the eMode\\r\\n     **/\\r\\n    function setEModeCategory(\\r\\n        DataTypes.ReserveConfigurationMap memory self,\\r\\n        uint256 category\\r\\n    ) internal pure {\\r\\n        require(\\r\\n            category <= MAX_VALID_EMODE_CATEGORY,\\r\\n            Errors.INVALID_EMODE_CATEGORY\\r\\n        );\\r\\n\\r\\n        self.data =\\r\\n            (self.data & EMODE_CATEGORY_MASK) |\\r\\n            (category << EMODE_CATEGORY_START_BIT_POSITION);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Gets the eMode asset category\\r\\n     * @param self The reserve configuration\\r\\n     * @return The eMode category for the asset\\r\\n     **/\\r\\n    function getEModeCategory(DataTypes.ReserveConfigurationMap memory self)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return\\r\\n            (self.data & ~EMODE_CATEGORY_MASK) >>\\r\\n            EMODE_CATEGORY_START_BIT_POSITION;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the configuration flags of the reserve\\r\\n     * @param self The reserve configuration\\r\\n     * @return The state flag representing active\\r\\n     * @return The state flag representing frozen\\r\\n     * @return The state flag representing borrowing enabled\\r\\n     * @return The state flag representing stableRateBorrowing enabled\\r\\n     * @return The state flag representing paused\\r\\n     **/\\r\\n    function getFlags(DataTypes.ReserveConfigurationMap memory self)\\r\\n        internal\\r\\n        pure\\r\\n        returns (\\r\\n            bool,\\r\\n            bool,\\r\\n            bool,\\r\\n            bool,\\r\\n            bool\\r\\n        )\\r\\n    {\\r\\n        uint256 dataLocal = self.data;\\r\\n\\r\\n        return (\\r\\n            (dataLocal & ~ACTIVE_MASK) != 0,\\r\\n            (dataLocal & ~FROZEN_MASK) != 0,\\r\\n            (dataLocal & ~BORROWING_MASK) != 0,\\r\\n            (dataLocal & ~STABLE_BORROWING_MASK) != 0,\\r\\n            (dataLocal & ~PAUSED_MASK) != 0\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the configuration parameters of the reserve from storage\\r\\n     * @param self The reserve configuration\\r\\n     * @return The state param representing ltv\\r\\n     * @return The state param representing liquidation threshold\\r\\n     * @return The state param representing liquidation bonus\\r\\n     * @return The state param representing reserve decimals\\r\\n     * @return The state param representing reserve factor\\r\\n     * @return The state param representing eMode category\\r\\n     **/\\r\\n    function getParams(DataTypes.ReserveConfigurationMap memory self)\\r\\n        internal\\r\\n        pure\\r\\n        returns (\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256\\r\\n        )\\r\\n    {\\r\\n        uint256 dataLocal = self.data;\\r\\n\\r\\n        return (\\r\\n            dataLocal & ~LTV_MASK,\\r\\n            (dataLocal & ~LIQUIDATION_THRESHOLD_MASK) >>\\r\\n                LIQUIDATION_THRESHOLD_START_BIT_POSITION,\\r\\n            (dataLocal & ~LIQUIDATION_BONUS_MASK) >>\\r\\n                LIQUIDATION_BONUS_START_BIT_POSITION,\\r\\n            (dataLocal & ~DECIMALS_MASK) >> RESERVE_DECIMALS_START_BIT_POSITION,\\r\\n            (dataLocal & ~RESERVE_FACTOR_MASK) >>\\r\\n                RESERVE_FACTOR_START_BIT_POSITION,\\r\\n            (dataLocal & ~EMODE_CATEGORY_MASK) >>\\r\\n                EMODE_CATEGORY_START_BIT_POSITION\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the caps parameters of the reserve from storage\\r\\n     * @param self The reserve configuration\\r\\n     * @return The state param representing borrow cap\\r\\n     * @return The state param representing supply cap.\\r\\n     **/\\r\\n    function getCaps(DataTypes.ReserveConfigurationMap memory self)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256, uint256)\\r\\n    {\\r\\n        uint256 dataLocal = self.data;\\r\\n\\r\\n        return (\\r\\n            (dataLocal & ~BORROW_CAP_MASK) >> BORROW_CAP_START_BIT_POSITION,\\r\\n            (dataLocal & ~SUPPLY_CAP_MASK) >> SUPPLY_CAP_START_BIT_POSITION\\r\\n        );\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x0edf94daf5a721e4bd20fefc74f3cfb6e19def780b803509212d4f435dec01ec\",\"license\":\"BUSL-1.1\"},\"core-v3/contracts/protocol/libraries/configuration/UserConfiguration.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity 0.8.10;\\r\\n\\r\\nimport {Errors} from \\\"../helpers/Errors.sol\\\";\\r\\nimport {DataTypes} from \\\"../types/DataTypes.sol\\\";\\r\\nimport {ReserveConfiguration} from \\\"./ReserveConfiguration.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title UserConfiguration library\\r\\n * @author Aqualis\\r\\n * @notice Implements the bitmap logic to handle the user configuration\\r\\n */\\r\\nlibrary UserConfiguration {\\r\\n    using ReserveConfiguration for DataTypes.ReserveConfigurationMap;\\r\\n\\r\\n    uint256 internal constant BORROWING_MASK =\\r\\n        0x5555555555555555555555555555555555555555555555555555555555555555;\\r\\n    uint256 internal constant COLLATERAL_MASK =\\r\\n        0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;\\r\\n\\r\\n    /**\\r\\n     * @notice Sets if the user is borrowing the reserve identified by reserveIndex\\r\\n     * @param self The configuration object\\r\\n     * @param reserveIndex The index of the reserve in the bitmap\\r\\n     * @param borrowing True if the user is borrowing the reserve, false otherwise\\r\\n     **/\\r\\n    function setBorrowing(\\r\\n        DataTypes.UserConfigurationMap storage self,\\r\\n        uint256 reserveIndex,\\r\\n        bool borrowing\\r\\n    ) internal {\\r\\n        unchecked {\\r\\n            require(\\r\\n                reserveIndex < ReserveConfiguration.MAX_RESERVES_COUNT,\\r\\n                Errors.INVALID_RESERVE_INDEX\\r\\n            );\\r\\n            uint256 bit = 1 << (reserveIndex << 1);\\r\\n            if (borrowing) {\\r\\n                self.data |= bit;\\r\\n            } else {\\r\\n                self.data &= ~bit;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sets if the user is using as collateral the reserve identified by reserveIndex\\r\\n     * @param self The configuration object\\r\\n     * @param reserveIndex The index of the reserve in the bitmap\\r\\n     * @param usingAsCollateral True if the user is using the reserve as collateral, false otherwise\\r\\n     **/\\r\\n    function setUsingAsCollateral(\\r\\n        DataTypes.UserConfigurationMap storage self,\\r\\n        uint256 reserveIndex,\\r\\n        bool usingAsCollateral\\r\\n    ) internal {\\r\\n        unchecked {\\r\\n            require(\\r\\n                reserveIndex < ReserveConfiguration.MAX_RESERVES_COUNT,\\r\\n                Errors.INVALID_RESERVE_INDEX\\r\\n            );\\r\\n            uint256 bit = 1 << ((reserveIndex << 1) + 1);\\r\\n            if (usingAsCollateral) {\\r\\n                self.data |= bit;\\r\\n            } else {\\r\\n                self.data &= ~bit;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns if a user has been using the reserve for borrowing or as collateral\\r\\n     * @param self The configuration object\\r\\n     * @param reserveIndex The index of the reserve in the bitmap\\r\\n     * @return True if the user has been using a reserve for borrowing or as collateral, false otherwise\\r\\n     **/\\r\\n    function isUsingAsCollateralOrBorrowing(\\r\\n        DataTypes.UserConfigurationMap memory self,\\r\\n        uint256 reserveIndex\\r\\n    ) internal pure returns (bool) {\\r\\n        unchecked {\\r\\n            require(\\r\\n                reserveIndex < ReserveConfiguration.MAX_RESERVES_COUNT,\\r\\n                Errors.INVALID_RESERVE_INDEX\\r\\n            );\\r\\n            return (self.data >> (reserveIndex << 1)) & 3 != 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Validate a user has been using the reserve for borrowing\\r\\n     * @param self The configuration object\\r\\n     * @param reserveIndex The index of the reserve in the bitmap\\r\\n     * @return True if the user has been using a reserve for borrowing, false otherwise\\r\\n     **/\\r\\n    function isBorrowing(\\r\\n        DataTypes.UserConfigurationMap memory self,\\r\\n        uint256 reserveIndex\\r\\n    ) internal pure returns (bool) {\\r\\n        unchecked {\\r\\n            require(\\r\\n                reserveIndex < ReserveConfiguration.MAX_RESERVES_COUNT,\\r\\n                Errors.INVALID_RESERVE_INDEX\\r\\n            );\\r\\n            return (self.data >> (reserveIndex << 1)) & 1 != 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Validate a user has been using the reserve as collateral\\r\\n     * @param self The configuration object\\r\\n     * @param reserveIndex The index of the reserve in the bitmap\\r\\n     * @return True if the user has been using a reserve as collateral, false otherwise\\r\\n     **/\\r\\n    function isUsingAsCollateral(\\r\\n        DataTypes.UserConfigurationMap memory self,\\r\\n        uint256 reserveIndex\\r\\n    ) internal pure returns (bool) {\\r\\n        unchecked {\\r\\n            require(\\r\\n                reserveIndex < ReserveConfiguration.MAX_RESERVES_COUNT,\\r\\n                Errors.INVALID_RESERVE_INDEX\\r\\n            );\\r\\n            return (self.data >> ((reserveIndex << 1) + 1)) & 1 != 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Checks if a user has been supplying only one reserve as collateral\\r\\n     * @dev this uses a simple trick - if a number is a power of two (only one bit set) then n & (n - 1) == 0\\r\\n     * @param self The configuration object\\r\\n     * @return True if the user has been supplying as collateral one reserve, false otherwise\\r\\n     **/\\r\\n    function isUsingAsCollateralOne(DataTypes.UserConfigurationMap memory self)\\r\\n        internal\\r\\n        pure\\r\\n        returns (bool)\\r\\n    {\\r\\n        uint256 collateralData = self.data & COLLATERAL_MASK;\\r\\n        return\\r\\n            collateralData != 0 && (collateralData & (collateralData - 1) == 0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Checks if a user has been supplying any reserve as collateral\\r\\n     * @param self The configuration object\\r\\n     * @return True if the user has been supplying as collateral any reserve, false otherwise\\r\\n     **/\\r\\n    function isUsingAsCollateralAny(DataTypes.UserConfigurationMap memory self)\\r\\n        internal\\r\\n        pure\\r\\n        returns (bool)\\r\\n    {\\r\\n        return self.data & COLLATERAL_MASK != 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Checks if a user has been borrowing only one asset\\r\\n     * @dev this uses a simple trick - if a number is a power of two (only one bit set) then n & (n - 1) == 0\\r\\n     * @param self The configuration object\\r\\n     * @return True if the user has been supplying as collateral one reserve, false otherwise\\r\\n     **/\\r\\n    function isBorrowingOne(DataTypes.UserConfigurationMap memory self)\\r\\n        internal\\r\\n        pure\\r\\n        returns (bool)\\r\\n    {\\r\\n        uint256 borrowingData = self.data & BORROWING_MASK;\\r\\n        return borrowingData != 0 && (borrowingData & (borrowingData - 1) == 0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Checks if a user has been borrowing from any reserve\\r\\n     * @param self The configuration object\\r\\n     * @return True if the user has been borrowing any reserve, false otherwise\\r\\n     **/\\r\\n    function isBorrowingAny(DataTypes.UserConfigurationMap memory self)\\r\\n        internal\\r\\n        pure\\r\\n        returns (bool)\\r\\n    {\\r\\n        return self.data & BORROWING_MASK != 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Checks if a user has not been using any reserve for borrowing or supply\\r\\n     * @param self The configuration object\\r\\n     * @return True if the user has not been borrowing or supplying any reserve, false otherwise\\r\\n     **/\\r\\n    function isEmpty(DataTypes.UserConfigurationMap memory self)\\r\\n        internal\\r\\n        pure\\r\\n        returns (bool)\\r\\n    {\\r\\n        return self.data == 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the Isolation Mode state of the user\\r\\n     * @param self The configuration object\\r\\n     * @param reservesData The state of all the reserves\\r\\n     * @param reservesList The addresses of all the active reserves\\r\\n     * @return True if the user is in isolation mode, false otherwise\\r\\n     * @return The address of the only asset used as collateral\\r\\n     * @return The debt ceiling of the reserve\\r\\n     */\\r\\n    function getIsolationModeState(\\r\\n        DataTypes.UserConfigurationMap memory self,\\r\\n        mapping(address => DataTypes.ReserveData) storage reservesData,\\r\\n        mapping(uint256 => address) storage reservesList\\r\\n    )\\r\\n        internal\\r\\n        view\\r\\n        returns (\\r\\n            bool,\\r\\n            address,\\r\\n            uint256\\r\\n        )\\r\\n    {\\r\\n        if (isUsingAsCollateralOne(self)) {\\r\\n            uint256 assetId = _getFirstAssetIdByMask(self, COLLATERAL_MASK);\\r\\n\\r\\n            address assetAddress = reservesList[assetId];\\r\\n            uint256 ceiling = reservesData[assetAddress]\\r\\n                .configuration\\r\\n                .getDebtCeiling();\\r\\n            if (ceiling != 0) {\\r\\n                return (true, assetAddress, ceiling);\\r\\n            }\\r\\n        }\\r\\n        return (false, address(0), 0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the siloed borrowing state for the user\\r\\n     * @param self The configuration object\\r\\n     * @param reservesData The data of all the reserves\\r\\n     * @param reservesList The reserve list\\r\\n     * @return True if the user has borrowed a siloed asset, false otherwise\\r\\n     * @return The address of the only borrowed asset\\r\\n     */\\r\\n    function getSiloedBorrowingState(\\r\\n        DataTypes.UserConfigurationMap memory self,\\r\\n        mapping(address => DataTypes.ReserveData) storage reservesData,\\r\\n        mapping(uint256 => address) storage reservesList\\r\\n    ) internal view returns (bool, address) {\\r\\n        if (isBorrowingOne(self)) {\\r\\n            uint256 assetId = _getFirstAssetIdByMask(self, BORROWING_MASK);\\r\\n            address assetAddress = reservesList[assetId];\\r\\n            if (reservesData[assetAddress].configuration.getSiloedBorrowing()) {\\r\\n                return (true, assetAddress);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return (false, address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the address of the first asset flagged in the bitmap given the corresponding bitmask\\r\\n     * @param self The configuration object\\r\\n     * @return The index of the first asset flagged in the bitmap once the corresponding mask is applied\\r\\n     */\\r\\n    function _getFirstAssetIdByMask(\\r\\n        DataTypes.UserConfigurationMap memory self,\\r\\n        uint256 mask\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            uint256 bitmapData = self.data & mask;\\r\\n            uint256 firstAssetPosition = bitmapData & ~(bitmapData - 1);\\r\\n            uint256 id;\\r\\n\\r\\n            while ((firstAssetPosition >>= 2) != 0) {\\r\\n                id += 1;\\r\\n            }\\r\\n            return id;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xa3fce262500b2610c140e7865595069e384d3eb99fa14f325d5d3cbec3ecb56c\",\"license\":\"BUSL-1.1\"},\"core-v3/contracts/protocol/libraries/helpers/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity 0.8.10;\\r\\n\\r\\n/**\\r\\n * @title Errors library\\r\\n * @author Aqualis\\r\\n * @notice Defines the error messages emitted by the different contracts of the Aqualis protocol\\r\\n */\\r\\nlibrary Errors {\\r\\n    string public constant CALLER_NOT_POOL_ADMIN = \\\"1\\\"; // 'The caller of the function is not a pool admin'\\r\\n    string public constant CALLER_NOT_EMERGENCY_ADMIN = \\\"2\\\"; // 'The caller of the function is not an emergency admin'\\r\\n    string public constant CALLER_NOT_POOL_OR_EMERGENCY_ADMIN = \\\"3\\\"; // 'The caller of the function is not a pool or emergency admin'\\r\\n    string public constant CALLER_NOT_RISK_OR_POOL_ADMIN = \\\"4\\\"; // 'The caller of the function is not a risk or pool admin'\\r\\n    string public constant CALLER_NOT_ASSET_LISTING_OR_POOL_ADMIN = \\\"5\\\"; // 'The caller of the function is not an asset listing or pool admin'\\r\\n    string public constant CALLER_NOT_BRIDGE = \\\"6\\\"; // 'The caller of the function is not a bridge'\\r\\n    string public constant ADDRESSES_PROVIDER_NOT_REGISTERED = \\\"7\\\"; // 'Pool addresses provider is not registered'\\r\\n    string public constant INVALID_ADDRESSES_PROVIDER_ID = \\\"8\\\"; // 'Invalid id for the pool addresses provider'\\r\\n    string public constant NOT_CONTRACT = \\\"9\\\"; // 'Address is not a contract'\\r\\n    string public constant CALLER_NOT_POOL_CONFIGURATOR = \\\"10\\\"; // 'The caller of the function is not the pool configurator'\\r\\n    string public constant CALLER_NOT_ATOKEN = \\\"11\\\"; // 'The caller of the function is not an AToken'\\r\\n    string public constant INVALID_ADDRESSES_PROVIDER = \\\"12\\\"; // 'The address of the pool addresses provider is invalid'\\r\\n    string public constant INVALID_FLASHLOAN_EXECUTOR_RETURN = \\\"13\\\"; // 'Invalid return value of the flashloan executor function'\\r\\n    string public constant RESERVE_ALREADY_ADDED = \\\"14\\\"; // 'Reserve has already been added to reserve list'\\r\\n    string public constant NO_MORE_RESERVES_ALLOWED = \\\"15\\\"; // 'Maximum amount of reserves in the pool reached'\\r\\n    string public constant EMODE_CATEGORY_RESERVED = \\\"16\\\"; // 'Zero eMode category is reserved for volatile heterogeneous assets'\\r\\n    string public constant INVALID_EMODE_CATEGORY_ASSIGNMENT = \\\"17\\\"; // 'Invalid eMode category assignment to asset'\\r\\n    string public constant RESERVE_LIQUIDITY_NOT_ZERO = \\\"18\\\"; // 'The liquidity of the reserve needs to be 0'\\r\\n    string public constant FLASHLOAN_PREMIUM_INVALID = \\\"19\\\"; // 'Invalid flashloan premium'\\r\\n    string public constant INVALID_RESERVE_PARAMS = \\\"20\\\"; // 'Invalid risk parameters for the reserve'\\r\\n    string public constant INVALID_EMODE_CATEGORY_PARAMS = \\\"21\\\"; // 'Invalid risk parameters for the eMode category'\\r\\n    string public constant BRIDGE_PROTOCOL_FEE_INVALID = \\\"22\\\"; // 'Invalid bridge protocol fee'\\r\\n    string public constant CALLER_MUST_BE_POOL = \\\"23\\\"; // 'The caller of this function must be a pool'\\r\\n    string public constant INVALID_MINT_AMOUNT = \\\"24\\\"; // 'Invalid amount to mint'\\r\\n    string public constant INVALID_BURN_AMOUNT = \\\"25\\\"; // 'Invalid amount to burn'\\r\\n    string public constant INVALID_AMOUNT = \\\"26\\\"; // 'Amount must be greater than 0'\\r\\n    string public constant RESERVE_INACTIVE = \\\"27\\\"; // 'Action requires an active reserve'\\r\\n    string public constant RESERVE_FROZEN = \\\"28\\\"; // 'Action cannot be performed because the reserve is frozen'\\r\\n    string public constant RESERVE_PAUSED = \\\"29\\\"; // 'Action cannot be performed because the reserve is paused'\\r\\n    string public constant BORROWING_NOT_ENABLED = \\\"30\\\"; // 'Borrowing is not enabled'\\r\\n    string public constant STABLE_BORROWING_NOT_ENABLED = \\\"31\\\"; // 'Stable borrowing is not enabled'\\r\\n    string public constant NOT_ENOUGH_AVAILABLE_USER_BALANCE = \\\"32\\\"; // 'User cannot withdraw more than the available balance'\\r\\n    string public constant INVALID_INTEREST_RATE_MODE_SELECTED = \\\"33\\\"; // 'Invalid interest rate mode selected'\\r\\n    string public constant COLLATERAL_BALANCE_IS_ZERO = \\\"34\\\"; // 'The collateral balance is 0'\\r\\n    string public constant HEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD =\\r\\n        \\\"35\\\"; // 'Health factor is lesser than the liquidation threshold'\\r\\n    string public constant COLLATERAL_CANNOT_COVER_NEW_BORROW = \\\"36\\\"; // 'There is not enough collateral to cover a new borrow'\\r\\n    string public constant COLLATERAL_SAME_AS_BORROWING_CURRENCY = \\\"37\\\"; // 'Collateral is (mostly) the same currency that is being borrowed'\\r\\n    string public constant AMOUNT_BIGGER_THAN_MAX_LOAN_SIZE_STABLE = \\\"38\\\"; // 'The requested amount is greater than the max loan size in stable rate mode'\\r\\n    string public constant NO_DEBT_OF_SELECTED_TYPE = \\\"39\\\"; // 'For repayment of a specific type of debt, the user needs to have debt that type'\\r\\n    string public constant NO_EXPLICIT_AMOUNT_TO_REPAY_ON_BEHALF = \\\"40\\\"; // 'To repay on behalf of a user an explicit amount to repay is needed'\\r\\n    string public constant NO_OUTSTANDING_STABLE_DEBT = \\\"41\\\"; // 'User does not have outstanding stable rate debt on this reserve'\\r\\n    string public constant NO_OUTSTANDING_VARIABLE_DEBT = \\\"42\\\"; // 'User does not have outstanding variable rate debt on this reserve'\\r\\n    string public constant UNDERLYING_BALANCE_ZERO = \\\"43\\\"; // 'The underlying balance needs to be greater than 0'\\r\\n    string public constant INTEREST_RATE_REBALANCE_CONDITIONS_NOT_MET = \\\"44\\\"; // 'Interest rate rebalance conditions were not met'\\r\\n    string public constant HEALTH_FACTOR_NOT_BELOW_THRESHOLD = \\\"45\\\"; // 'Health factor is not below the threshold'\\r\\n    string public constant COLLATERAL_CANNOT_BE_LIQUIDATED = \\\"46\\\"; // 'The collateral chosen cannot be liquidated'\\r\\n    string public constant SPECIFIED_CURRENCY_NOT_BORROWED_BY_USER = \\\"47\\\"; // 'User did not borrow the specified currency'\\r\\n    string public constant SAME_BLOCK_BORROW_REPAY = \\\"48\\\"; // 'Borrow and repay in same block is not allowed'\\r\\n    string public constant INCONSISTENT_FLASHLOAN_PARAMS = \\\"49\\\"; // 'Inconsistent flashloan parameters'\\r\\n    string public constant BORROW_CAP_EXCEEDED = \\\"50\\\"; // 'Borrow cap is exceeded'\\r\\n    string public constant SUPPLY_CAP_EXCEEDED = \\\"51\\\"; // 'Supply cap is exceeded'\\r\\n    string public constant UNBACKED_MINT_CAP_EXCEEDED = \\\"52\\\"; // 'Unbacked mint cap is exceeded'\\r\\n    string public constant DEBT_CEILING_EXCEEDED = \\\"53\\\"; // 'Debt ceiling is exceeded'\\r\\n    string public constant ATOKEN_SUPPLY_NOT_ZERO = \\\"54\\\"; // 'AToken supply is not zero'\\r\\n    string public constant STABLE_DEBT_NOT_ZERO = \\\"55\\\"; // 'Stable debt supply is not zero'\\r\\n    string public constant VARIABLE_DEBT_SUPPLY_NOT_ZERO = \\\"56\\\"; // 'Variable debt supply is not zero'\\r\\n    string public constant LTV_VALIDATION_FAILED = \\\"57\\\"; // 'Ltv validation failed'\\r\\n    string public constant INCONSISTENT_EMODE_CATEGORY = \\\"58\\\"; // 'Inconsistent eMode category'\\r\\n    string public constant PRICE_ORACLE_SENTINEL_CHECK_FAILED = \\\"59\\\"; // 'Price oracle sentinel validation failed'\\r\\n    string public constant ASSET_NOT_BORROWABLE_IN_ISOLATION = \\\"60\\\"; // 'Asset is not borrowable in isolation mode'\\r\\n    string public constant RESERVE_ALREADY_INITIALIZED = \\\"61\\\"; // 'Reserve has already been initialized'\\r\\n    string public constant USER_IN_ISOLATION_MODE = \\\"62\\\"; // 'User is in isolation mode'\\r\\n    string public constant INVALID_LTV = \\\"63\\\"; // 'Invalid ltv parameter for the reserve'\\r\\n    string public constant INVALID_LIQ_THRESHOLD = \\\"64\\\"; // 'Invalid liquidity threshold parameter for the reserve'\\r\\n    string public constant INVALID_LIQ_BONUS = \\\"65\\\"; // 'Invalid liquidity bonus parameter for the reserve'\\r\\n    string public constant INVALID_DECIMALS = \\\"66\\\"; // 'Invalid decimals parameter of the underlying asset of the reserve'\\r\\n    string public constant INVALID_RESERVE_FACTOR = \\\"67\\\"; // 'Invalid reserve factor parameter for the reserve'\\r\\n    string public constant INVALID_BORROW_CAP = \\\"68\\\"; // 'Invalid borrow cap for the reserve'\\r\\n    string public constant INVALID_SUPPLY_CAP = \\\"69\\\"; // 'Invalid supply cap for the reserve'\\r\\n    string public constant INVALID_LIQUIDATION_PROTOCOL_FEE = \\\"70\\\"; // 'Invalid liquidation protocol fee for the reserve'\\r\\n    string public constant INVALID_EMODE_CATEGORY = \\\"71\\\"; // 'Invalid eMode category for the reserve'\\r\\n    string public constant INVALID_UNBACKED_MINT_CAP = \\\"72\\\"; // 'Invalid unbacked mint cap for the reserve'\\r\\n    string public constant INVALID_DEBT_CEILING = \\\"73\\\"; // 'Invalid debt ceiling for the reserve\\r\\n    string public constant INVALID_RESERVE_INDEX = \\\"74\\\"; // 'Invalid reserve index'\\r\\n    string public constant ACL_ADMIN_CANNOT_BE_ZERO = \\\"75\\\"; // 'ACL admin cannot be set to the zero address'\\r\\n    string public constant INCONSISTENT_PARAMS_LENGTH = \\\"76\\\"; // 'Array parameters that should be equal length are not'\\r\\n    string public constant ZERO_ADDRESS_NOT_VALID = \\\"77\\\"; // 'Zero address not valid'\\r\\n    string public constant INVALID_EXPIRATION = \\\"78\\\"; // 'Invalid expiration'\\r\\n    string public constant INVALID_SIGNATURE = \\\"79\\\"; // 'Invalid signature'\\r\\n    string public constant OPERATION_NOT_SUPPORTED = \\\"80\\\"; // 'Operation not supported'\\r\\n    string public constant DEBT_CEILING_NOT_ZERO = \\\"81\\\"; // 'Debt ceiling is not zero'\\r\\n    string public constant ASSET_NOT_LISTED = \\\"82\\\"; // 'Asset is not listed'\\r\\n    string public constant INVALID_OPTIMAL_USAGE_RATIO = \\\"83\\\"; // 'Invalid optimal usage ratio'\\r\\n    string public constant INVALID_OPTIMAL_STABLE_TO_TOTAL_DEBT_RATIO = \\\"84\\\"; // 'Invalid optimal stable to total debt ratio'\\r\\n    string public constant UNDERLYING_CANNOT_BE_RESCUED = \\\"85\\\"; // 'The underlying asset cannot be rescued'\\r\\n    string public constant ADDRESSES_PROVIDER_ALREADY_ADDED = \\\"86\\\"; // 'Reserve has already been added to reserve list'\\r\\n    string public constant POOL_ADDRESSES_DO_NOT_MATCH = \\\"87\\\"; // 'The token implementation pool address and the pool address provided by the initializing pool do not match'\\r\\n    string public constant STABLE_BORROWING_ENABLED = \\\"88\\\"; // 'Stable borrowing is enabled'\\r\\n    string public constant SILOED_BORROWING_VIOLATION = \\\"89\\\"; // 'User is trying to borrow multiple assets including a siloed one'\\r\\n    string public constant RESERVE_DEBT_NOT_ZERO = \\\"90\\\"; // the total debt of the reserve needs to be 0\\r\\n}\\r\\n\",\"keccak256\":\"0xe3a1c2c1ade901dc5c44387454e2938817e9ed41655737c851ec28a10eaa8862\",\"license\":\"BUSL-1.1\"},\"core-v3/contracts/protocol/libraries/logic/BridgeLogic.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity 0.8.10;\\r\\n\\r\\nimport {IERC20} from '../../../dependencies/openzeppelin/contracts/IERC20.sol';\\r\\nimport {GPv2SafeERC20} from '../../../dependencies/gnosis/contracts/GPv2SafeERC20.sol';\\r\\nimport {SafeCast} from '../../../dependencies/openzeppelin/contracts/SafeCast.sol';\\r\\nimport {IAToken} from '../../../interfaces/IAToken.sol';\\r\\nimport {DataTypes} from '../types/DataTypes.sol';\\r\\nimport {UserConfiguration} from '../configuration/UserConfiguration.sol';\\r\\nimport {ReserveConfiguration} from '../configuration/ReserveConfiguration.sol';\\r\\nimport {WadRayMath} from '../math/WadRayMath.sol';\\r\\nimport {PercentageMath} from '../math/PercentageMath.sol';\\r\\nimport {Errors} from '../helpers/Errors.sol';\\r\\nimport {ValidationLogic} from './ValidationLogic.sol';\\r\\nimport {ReserveLogic} from './ReserveLogic.sol';\\r\\n\\r\\nlibrary BridgeLogic {\\r\\n  using ReserveLogic for DataTypes.ReserveCache;\\r\\n  using ReserveLogic for DataTypes.ReserveData;\\r\\n  using UserConfiguration for DataTypes.UserConfigurationMap;\\r\\n  using ReserveConfiguration for DataTypes.ReserveConfigurationMap;\\r\\n  using WadRayMath for uint256;\\r\\n  using PercentageMath for uint256;\\r\\n  using SafeCast for uint256;\\r\\n  using GPv2SafeERC20 for IERC20;\\r\\n\\r\\n  // See `IPool` for descriptions\\r\\n  event ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user);\\r\\n  event MintUnbacked(\\r\\n    address indexed reserve,\\r\\n    address user,\\r\\n    address indexed onBehalfOf,\\r\\n    uint256 amount,\\r\\n    uint16 indexed referralCode\\r\\n  );\\r\\n  event BackUnbacked(address indexed reserve, address indexed backer, uint256 amount, uint256 fee);\\r\\n\\r\\n  /**\\r\\n   * @notice Mint unbacked aTokens to a user and updates the unbacked for the reserve.\\r\\n   * @dev Essentially a supply without transferring the underlying.\\r\\n   * @dev Emits the `MintUnbacked` event\\r\\n   * @dev Emits the `ReserveUsedAsCollateralEnabled` if asset is set as collateral\\r\\n   * @param reservesData The state of all the reserves\\r\\n   * @param reservesList The addresses of all the active reserves\\r\\n   * @param userConfig The user configuration mapping that tracks the supplied/borrowed assets\\r\\n   * @param asset The address of the underlying asset to mint aTokens of\\r\\n   * @param amount The amount to mint\\r\\n   * @param onBehalfOf The address that will receive the aTokens\\r\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\r\\n   *   0 if the action is executed directly by the user, without any middle-man\\r\\n   **/\\r\\n  function executeMintUnbacked(\\r\\n    mapping(address => DataTypes.ReserveData) storage reservesData,\\r\\n    mapping(uint256 => address) storage reservesList,\\r\\n    DataTypes.UserConfigurationMap storage userConfig,\\r\\n    address asset,\\r\\n    uint256 amount,\\r\\n    address onBehalfOf,\\r\\n    uint16 referralCode\\r\\n  ) external {\\r\\n    DataTypes.ReserveData storage reserve = reservesData[asset];\\r\\n    DataTypes.ReserveCache memory reserveCache = reserve.cache();\\r\\n\\r\\n    reserve.updateState(reserveCache);\\r\\n\\r\\n    ValidationLogic.validateSupply(reserveCache, amount);\\r\\n\\r\\n    uint256 unbackedMintCap = reserveCache.reserveConfiguration.getUnbackedMintCap();\\r\\n    uint256 reserveDecimals = reserveCache.reserveConfiguration.getDecimals();\\r\\n\\r\\n    uint256 unbacked = reserve.unbacked += amount.toUint128();\\r\\n\\r\\n    require(unbacked <= unbackedMintCap * (10**reserveDecimals), Errors.UNBACKED_MINT_CAP_EXCEEDED);\\r\\n\\r\\n    reserve.updateInterestRates(reserveCache, asset, 0, 0);\\r\\n\\r\\n    bool isFirstSupply = IAToken(reserveCache.aTokenAddress).mint(\\r\\n      msg.sender,\\r\\n      onBehalfOf,\\r\\n      amount,\\r\\n      reserveCache.nextLiquidityIndex\\r\\n    );\\r\\n\\r\\n    if (isFirstSupply) {\\r\\n      if (\\r\\n        ValidationLogic.validateUseAsCollateral(\\r\\n          reservesData,\\r\\n          reservesList,\\r\\n          userConfig,\\r\\n          reserveCache.reserveConfiguration\\r\\n        )\\r\\n      ) {\\r\\n        userConfig.setUsingAsCollateral(reserve.id, true);\\r\\n        emit ReserveUsedAsCollateralEnabled(asset, onBehalfOf);\\r\\n      }\\r\\n    }\\r\\n\\r\\n    emit MintUnbacked(asset, msg.sender, onBehalfOf, amount, referralCode);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Back the current unbacked with `amount` and pay `fee`.\\r\\n   * @dev Emits the `BackUnbacked` event\\r\\n   * @param reserve The reserve to back unbacked for\\r\\n   * @param asset The address of the underlying asset to repay\\r\\n   * @param amount The amount to back\\r\\n   * @param fee The amount paid in fees\\r\\n   * @param protocolFeeBps The fraction of fees in basis points paid to the protocol\\r\\n   **/\\r\\n  function executeBackUnbacked(\\r\\n    DataTypes.ReserveData storage reserve,\\r\\n    address asset,\\r\\n    uint256 amount,\\r\\n    uint256 fee,\\r\\n    uint256 protocolFeeBps\\r\\n  ) external {\\r\\n    DataTypes.ReserveCache memory reserveCache = reserve.cache();\\r\\n\\r\\n    reserve.updateState(reserveCache);\\r\\n\\r\\n    uint256 backingAmount = (amount < reserve.unbacked) ? amount : reserve.unbacked;\\r\\n\\r\\n    uint256 feeToProtocol = fee.percentMul(protocolFeeBps);\\r\\n    uint256 feeToLP = fee - feeToProtocol;\\r\\n    uint256 added = backingAmount + fee;\\r\\n\\r\\n    reserveCache.nextLiquidityIndex = reserve.cumulateToLiquidityIndex(\\r\\n      IERC20(reserveCache.aTokenAddress).totalSupply(),\\r\\n      feeToLP\\r\\n    );\\r\\n\\r\\n    reserve.accruedToTreasury += feeToProtocol.rayDiv(reserveCache.nextLiquidityIndex).toUint128();\\r\\n\\r\\n    reserve.unbacked -= backingAmount.toUint128();\\r\\n    reserve.updateInterestRates(reserveCache, asset, added, 0);\\r\\n\\r\\n    IERC20(asset).safeTransferFrom(msg.sender, reserveCache.aTokenAddress, added);\\r\\n\\r\\n    emit BackUnbacked(asset, msg.sender, backingAmount, fee);\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x8bf1681e9176da69c0049fe775272eecda00d0c05d2d5f0ed87bb2ab5a0a006b\",\"license\":\"BUSL-1.1\"},\"core-v3/contracts/protocol/libraries/logic/EModeLogic.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity 0.8.10;\\r\\n\\r\\nimport {GPv2SafeERC20} from \\\"../../../dependencies/gnosis/contracts/GPv2SafeERC20.sol\\\";\\r\\nimport {IERC20} from \\\"../../../dependencies/openzeppelin/contracts/IERC20.sol\\\";\\r\\nimport {IPriceOracleGetter} from \\\"../../../interfaces/IPriceOracleGetter.sol\\\";\\r\\nimport {UserConfiguration} from \\\"../configuration/UserConfiguration.sol\\\";\\r\\nimport {Errors} from \\\"../helpers/Errors.sol\\\";\\r\\nimport {WadRayMath} from \\\"../math/WadRayMath.sol\\\";\\r\\nimport {PercentageMath} from \\\"../math/PercentageMath.sol\\\";\\r\\nimport {DataTypes} from \\\"../types/DataTypes.sol\\\";\\r\\nimport {ValidationLogic} from \\\"./ValidationLogic.sol\\\";\\r\\nimport {ReserveLogic} from \\\"./ReserveLogic.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title EModeLogic library\\r\\n * @author Aqualis\\r\\n * @notice Implements the base logic for all the actions related to the eMode\\r\\n */\\r\\nlibrary EModeLogic {\\r\\n    using ReserveLogic for DataTypes.ReserveCache;\\r\\n    using ReserveLogic for DataTypes.ReserveData;\\r\\n    using GPv2SafeERC20 for IERC20;\\r\\n    using UserConfiguration for DataTypes.UserConfigurationMap;\\r\\n    using WadRayMath for uint256;\\r\\n    using PercentageMath for uint256;\\r\\n\\r\\n    // See `IPool` for descriptions\\r\\n    event UserEModeSet(address indexed user, uint8 categoryId);\\r\\n\\r\\n    /**\\r\\n     * @notice Updates the user efficiency mode category\\r\\n     * @dev Will revert if user is borrowing non-compatible asset or change will drop HF < HEALTH_FACTOR_LIQUIDATION_THRESHOLD\\r\\n     * @dev Emits the `UserEModeSet` event\\r\\n     * @param reservesData The state of all the reserves\\r\\n     * @param reservesList The addresses of all the active reserves\\r\\n     * @param eModeCategories The configuration of all the efficiency mode categories\\r\\n     * @param usersEModeCategory The state of all users efficiency mode category\\r\\n     * @param userConfig The user configuration mapping that tracks the supplied/borrowed assets\\r\\n     * @param params The additional parameters needed to execute the setUserEMode function\\r\\n     */\\r\\n    function executeSetUserEMode(\\r\\n        mapping(address => DataTypes.ReserveData) storage reservesData,\\r\\n        mapping(uint256 => address) storage reservesList,\\r\\n        mapping(uint8 => DataTypes.EModeCategory) storage eModeCategories,\\r\\n        mapping(address => uint8) storage usersEModeCategory,\\r\\n        DataTypes.UserConfigurationMap storage userConfig,\\r\\n        DataTypes.ExecuteSetUserEModeParams memory params\\r\\n    ) external {\\r\\n        ValidationLogic.validateSetUserEMode(\\r\\n            reservesData,\\r\\n            reservesList,\\r\\n            eModeCategories,\\r\\n            userConfig,\\r\\n            params.reservesCount,\\r\\n            params.categoryId\\r\\n        );\\r\\n\\r\\n        uint8 prevCategoryId = usersEModeCategory[msg.sender];\\r\\n        usersEModeCategory[msg.sender] = params.categoryId;\\r\\n\\r\\n        if (prevCategoryId != 0) {\\r\\n            ValidationLogic.validateHealthFactor(\\r\\n                reservesData,\\r\\n                reservesList,\\r\\n                eModeCategories,\\r\\n                userConfig,\\r\\n                msg.sender,\\r\\n                params.categoryId,\\r\\n                params.reservesCount,\\r\\n                params.oracle\\r\\n            );\\r\\n        }\\r\\n        emit UserEModeSet(msg.sender, params.categoryId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the eMode configuration and calculates the eMode asset price if a custom oracle is configured\\r\\n     * @dev The eMode asset price returned is 0 if no oracle is specified\\r\\n     * @param category The user eMode category\\r\\n     * @param oracle The price oracle\\r\\n     * @return The eMode ltv\\r\\n     * @return The eMode liquidation threshold\\r\\n     * @return The eMode asset price\\r\\n     **/\\r\\n    function getEModeConfiguration(\\r\\n        DataTypes.EModeCategory storage category,\\r\\n        IPriceOracleGetter oracle\\r\\n    )\\r\\n        internal\\r\\n        view\\r\\n        returns (\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256\\r\\n        )\\r\\n    {\\r\\n        uint256 eModeAssetPrice = 0;\\r\\n        address eModePriceSource = category.priceSource;\\r\\n\\r\\n        if (eModePriceSource != address(0)) {\\r\\n            eModeAssetPrice = oracle.getAssetPrice(eModePriceSource);\\r\\n        }\\r\\n\\r\\n        return (category.ltv, category.liquidationThreshold, eModeAssetPrice);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Checks if eMode is active for a user and if yes, if the asset belongs to the eMode category chosen\\r\\n     * @param eModeUserCategory The user eMode category\\r\\n     * @param eModeAssetCategory The asset eMode category\\r\\n     * @return True if eMode is active and the asset belongs to the eMode category chosen by the user, false otherwise\\r\\n     **/\\r\\n    function isInEModeCategory(\\r\\n        uint256 eModeUserCategory,\\r\\n        uint256 eModeAssetCategory\\r\\n    ) internal pure returns (bool) {\\r\\n        return (eModeUserCategory != 0 &&\\r\\n            eModeAssetCategory == eModeUserCategory);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7cf91eceab19b9b01d3e1463f6cfb542a40c291fc3748024dbc2e1e8ca0308f9\",\"license\":\"BUSL-1.1\"},\"core-v3/contracts/protocol/libraries/logic/GenericLogic.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity 0.8.10;\\r\\n\\r\\nimport {IERC20} from \\\"../../../dependencies/openzeppelin/contracts/IERC20.sol\\\";\\r\\nimport {IScaledBalanceToken} from \\\"../../../interfaces/IScaledBalanceToken.sol\\\";\\r\\nimport {IPriceOracleGetter} from \\\"../../../interfaces/IPriceOracleGetter.sol\\\";\\r\\nimport {ReserveConfiguration} from \\\"../configuration/ReserveConfiguration.sol\\\";\\r\\nimport {UserConfiguration} from \\\"../configuration/UserConfiguration.sol\\\";\\r\\nimport {PercentageMath} from \\\"../math/PercentageMath.sol\\\";\\r\\nimport {WadRayMath} from \\\"../math/WadRayMath.sol\\\";\\r\\nimport {DataTypes} from \\\"../types/DataTypes.sol\\\";\\r\\nimport {ReserveLogic} from \\\"./ReserveLogic.sol\\\";\\r\\nimport {EModeLogic} from \\\"./EModeLogic.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title GenericLogic library\\r\\n * @author Aqualis\\r\\n * @notice Implements protocol-level logic to calculate and validate the state of a user\\r\\n */\\r\\nlibrary GenericLogic {\\r\\n    using ReserveLogic for DataTypes.ReserveData;\\r\\n    using WadRayMath for uint256;\\r\\n    using PercentageMath for uint256;\\r\\n    using ReserveConfiguration for DataTypes.ReserveConfigurationMap;\\r\\n    using UserConfiguration for DataTypes.UserConfigurationMap;\\r\\n\\r\\n    struct CalculateUserAccountDataVars {\\r\\n        uint256 assetPrice;\\r\\n        uint256 assetUnit;\\r\\n        uint256 userBalanceInBaseCurrency;\\r\\n        uint256 decimals;\\r\\n        uint256 ltv;\\r\\n        uint256 liquidationThreshold;\\r\\n        uint256 i;\\r\\n        uint256 healthFactor;\\r\\n        uint256 totalCollateralInBaseCurrency;\\r\\n        uint256 totalDebtInBaseCurrency;\\r\\n        uint256 avgLtv;\\r\\n        uint256 avgLiquidationThreshold;\\r\\n        uint256 eModeAssetPrice;\\r\\n        uint256 eModeLtv;\\r\\n        uint256 eModeLiqThreshold;\\r\\n        uint256 eModeAssetCategory;\\r\\n        address currentReserveAddress;\\r\\n        bool hasZeroLtvCollateral;\\r\\n        bool isInEModeCategory;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculates the user data across the reserves.\\r\\n     * @dev It includes the total liquidity/collateral/borrow balances in the base currency used by the price feed,\\r\\n     * the average Loan To Value, the average Liquidation Ratio, and the Health factor.\\r\\n     * @param reservesData The state of all the reserves\\r\\n     * @param reservesList The addresses of all the active reserves\\r\\n     * @param eModeCategories The configuration of all the efficiency mode categories\\r\\n     * @param params Additional parameters needed for the calculation\\r\\n     * @return The total collateral of the user in the base currency used by the price feed\\r\\n     * @return The total debt of the user in the base currency used by the price feed\\r\\n     * @return The average ltv of the user\\r\\n     * @return The average liquidation threshold of the user\\r\\n     * @return The health factor of the user\\r\\n     * @return True if the ltv is zero, false otherwise\\r\\n     **/\\r\\n    function calculateUserAccountData(\\r\\n        mapping(address => DataTypes.ReserveData) storage reservesData,\\r\\n        mapping(uint256 => address) storage reservesList,\\r\\n        mapping(uint8 => DataTypes.EModeCategory) storage eModeCategories,\\r\\n        DataTypes.CalculateUserAccountDataParams memory params\\r\\n    )\\r\\n        internal\\r\\n        view\\r\\n        returns (\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256,\\r\\n            bool\\r\\n        )\\r\\n    {\\r\\n        if (params.userConfig.isEmpty()) {\\r\\n            return (0, 0, 0, 0, type(uint256).max, false);\\r\\n        }\\r\\n\\r\\n        CalculateUserAccountDataVars memory vars;\\r\\n\\r\\n        if (params.userEModeCategory != 0) {\\r\\n            (\\r\\n                vars.eModeLtv,\\r\\n                vars.eModeLiqThreshold,\\r\\n                vars.eModeAssetPrice\\r\\n            ) = EModeLogic.getEModeConfiguration(\\r\\n                eModeCategories[params.userEModeCategory],\\r\\n                IPriceOracleGetter(params.oracle)\\r\\n            );\\r\\n        }\\r\\n\\r\\n        while (vars.i < params.reservesCount) {\\r\\n            if (!params.userConfig.isUsingAsCollateralOrBorrowing(vars.i)) {\\r\\n                unchecked {\\r\\n                    ++vars.i;\\r\\n                }\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            vars.currentReserveAddress = reservesList[vars.i];\\r\\n\\r\\n            if (vars.currentReserveAddress == address(0)) {\\r\\n                unchecked {\\r\\n                    ++vars.i;\\r\\n                }\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            DataTypes.ReserveData storage currentReserve = reservesData[\\r\\n                vars.currentReserveAddress\\r\\n            ];\\r\\n\\r\\n            (\\r\\n                vars.ltv,\\r\\n                vars.liquidationThreshold,\\r\\n                ,\\r\\n                vars.decimals,\\r\\n                ,\\r\\n                vars.eModeAssetCategory\\r\\n            ) = currentReserve.configuration.getParams();\\r\\n\\r\\n            unchecked {\\r\\n                vars.assetUnit = 10**vars.decimals;\\r\\n            }\\r\\n\\r\\n            vars.assetPrice = vars.eModeAssetPrice != 0 &&\\r\\n                params.userEModeCategory == vars.eModeAssetCategory\\r\\n                ? vars.eModeAssetPrice\\r\\n                : IPriceOracleGetter(params.oracle).getAssetPrice(\\r\\n                    vars.currentReserveAddress\\r\\n                );\\r\\n\\r\\n            if (\\r\\n                vars.liquidationThreshold != 0 &&\\r\\n                params.userConfig.isUsingAsCollateral(vars.i)\\r\\n            ) {\\r\\n                vars.userBalanceInBaseCurrency = _getUserBalanceInBaseCurrency(\\r\\n                    params.user,\\r\\n                    currentReserve,\\r\\n                    vars.assetPrice,\\r\\n                    vars.assetUnit\\r\\n                );\\r\\n\\r\\n                vars.totalCollateralInBaseCurrency += vars\\r\\n                    .userBalanceInBaseCurrency;\\r\\n\\r\\n                vars.isInEModeCategory = EModeLogic.isInEModeCategory(\\r\\n                    params.userEModeCategory,\\r\\n                    vars.eModeAssetCategory\\r\\n                );\\r\\n\\r\\n                if (vars.ltv != 0) {\\r\\n                    vars.avgLtv +=\\r\\n                        vars.userBalanceInBaseCurrency *\\r\\n                        (vars.isInEModeCategory ? vars.eModeLtv : vars.ltv);\\r\\n                } else {\\r\\n                    vars.hasZeroLtvCollateral = true;\\r\\n                }\\r\\n\\r\\n                vars.avgLiquidationThreshold +=\\r\\n                    vars.userBalanceInBaseCurrency *\\r\\n                    (\\r\\n                        vars.isInEModeCategory\\r\\n                            ? vars.eModeLiqThreshold\\r\\n                            : vars.liquidationThreshold\\r\\n                    );\\r\\n            }\\r\\n\\r\\n            if (params.userConfig.isBorrowing(vars.i)) {\\r\\n                vars.totalDebtInBaseCurrency += _getUserDebtInBaseCurrency(\\r\\n                    params.user,\\r\\n                    currentReserve,\\r\\n                    vars.assetPrice,\\r\\n                    vars.assetUnit\\r\\n                );\\r\\n            }\\r\\n\\r\\n            unchecked {\\r\\n                ++vars.i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        unchecked {\\r\\n            vars.avgLtv = vars.totalCollateralInBaseCurrency != 0\\r\\n                ? vars.avgLtv / vars.totalCollateralInBaseCurrency\\r\\n                : 0;\\r\\n            vars.avgLiquidationThreshold = vars.totalCollateralInBaseCurrency !=\\r\\n                0\\r\\n                ? vars.avgLiquidationThreshold /\\r\\n                    vars.totalCollateralInBaseCurrency\\r\\n                : 0;\\r\\n        }\\r\\n\\r\\n        vars.healthFactor = (vars.totalDebtInBaseCurrency == 0)\\r\\n            ? type(uint256).max\\r\\n            : (\\r\\n                vars.totalCollateralInBaseCurrency.percentMul(\\r\\n                    vars.avgLiquidationThreshold\\r\\n                )\\r\\n            ).wadDiv(vars.totalDebtInBaseCurrency);\\r\\n        return (\\r\\n            vars.totalCollateralInBaseCurrency,\\r\\n            vars.totalDebtInBaseCurrency,\\r\\n            vars.avgLtv,\\r\\n            vars.avgLiquidationThreshold,\\r\\n            vars.healthFactor,\\r\\n            vars.hasZeroLtvCollateral\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculates the maximum amount that can be borrowed depending on the available collateral, the total debt\\r\\n     * and the average Loan To Value\\r\\n     * @param totalCollateralInBaseCurrency The total collateral in the base currency used by the price feed\\r\\n     * @param totalDebtInBaseCurrency The total borrow balance in the base currency used by the price feed\\r\\n     * @param ltv The average loan to value\\r\\n     * @return The amount available to borrow in the base currency of the used by the price feed\\r\\n     **/\\r\\n    function calculateAvailableBorrows(\\r\\n        uint256 totalCollateralInBaseCurrency,\\r\\n        uint256 totalDebtInBaseCurrency,\\r\\n        uint256 ltv\\r\\n    ) internal pure returns (uint256) {\\r\\n        uint256 availableBorrowsInBaseCurrency = totalCollateralInBaseCurrency\\r\\n            .percentMul(ltv);\\r\\n\\r\\n        if (availableBorrowsInBaseCurrency < totalDebtInBaseCurrency) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        availableBorrowsInBaseCurrency =\\r\\n            availableBorrowsInBaseCurrency -\\r\\n            totalDebtInBaseCurrency;\\r\\n        return availableBorrowsInBaseCurrency;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculates total debt of the user in the based currency used to normalize the values of the assets\\r\\n     * @dev This fetches the `balanceOf` of the stable and variable debt tokens for the user. For gas reasons, the\\r\\n     * variable debt balance is calculated by fetching `scaledBalancesOf` normalized debt, which is cheaper than\\r\\n     * fetching `balanceOf`\\r\\n     * @param user The address of the user\\r\\n     * @param reserve The data of the reserve for which the total debt of the user is being calculated\\r\\n     * @param assetPrice The price of the asset for which the total debt of the user is being calculated\\r\\n     * @param assetUnit The value representing one full unit of the asset (10^decimals)\\r\\n     * @return The total debt of the user normalized to the base currency\\r\\n     **/\\r\\n    function _getUserDebtInBaseCurrency(\\r\\n        address user,\\r\\n        DataTypes.ReserveData storage reserve,\\r\\n        uint256 assetPrice,\\r\\n        uint256 assetUnit\\r\\n    ) private view returns (uint256) {\\r\\n        // fetching variable debt\\r\\n        uint256 userTotalDebt = IScaledBalanceToken(\\r\\n            reserve.variableDebtTokenAddress\\r\\n        ).scaledBalanceOf(user);\\r\\n        if (userTotalDebt != 0) {\\r\\n            userTotalDebt = userTotalDebt.rayMul(reserve.getNormalizedDebt());\\r\\n        }\\r\\n\\r\\n        userTotalDebt =\\r\\n            userTotalDebt +\\r\\n            IERC20(reserve.stableDebtTokenAddress).balanceOf(user);\\r\\n\\r\\n        userTotalDebt = assetPrice * userTotalDebt;\\r\\n\\r\\n        unchecked {\\r\\n            return userTotalDebt / assetUnit;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculates total aToken balance of the user in the based currency used by the price oracle\\r\\n     * @dev For gas reasons, the aToken balance is calculated by fetching `scaledBalancesOf` normalized debt, which\\r\\n     * is cheaper than fetching `balanceOf`\\r\\n     * @param user The address of the user\\r\\n     * @param reserve The data of the reserve for which the total aToken balance of the user is being calculated\\r\\n     * @param assetPrice The price of the asset for which the total aToken balance of the user is being calculated\\r\\n     * @param assetUnit The value representing one full unit of the asset (10^decimals)\\r\\n     * @return The total aToken balance of the user normalized to the base currency of the price oracle\\r\\n     **/\\r\\n    function _getUserBalanceInBaseCurrency(\\r\\n        address user,\\r\\n        DataTypes.ReserveData storage reserve,\\r\\n        uint256 assetPrice,\\r\\n        uint256 assetUnit\\r\\n    ) private view returns (uint256) {\\r\\n        uint256 normalizedIncome = reserve.getNormalizedIncome();\\r\\n        uint256 balance = (\\r\\n            IScaledBalanceToken(reserve.aTokenAddress)\\r\\n                .scaledBalanceOf(user)\\r\\n                .rayMul(normalizedIncome)\\r\\n        ) * assetPrice;\\r\\n\\r\\n        unchecked {\\r\\n            return balance / assetUnit;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x45cc86a2bd7ad36e4fec05cd3fdb9852ed9aaab67310d90ab5026d7c46d76826\",\"license\":\"BUSL-1.1\"},\"core-v3/contracts/protocol/libraries/logic/ReserveLogic.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity 0.8.10;\\r\\n\\r\\nimport {IERC20} from \\\"../../../dependencies/openzeppelin/contracts/IERC20.sol\\\";\\r\\nimport {GPv2SafeERC20} from \\\"../../../dependencies/gnosis/contracts/GPv2SafeERC20.sol\\\";\\r\\nimport {IStableDebtToken} from \\\"../../../interfaces/IStableDebtToken.sol\\\";\\r\\nimport {IVariableDebtToken} from \\\"../../../interfaces/IVariableDebtToken.sol\\\";\\r\\nimport {IReserveInterestRateStrategy} from \\\"../../../interfaces/IReserveInterestRateStrategy.sol\\\";\\r\\nimport {ReserveConfiguration} from \\\"../configuration/ReserveConfiguration.sol\\\";\\r\\nimport {MathUtils} from \\\"../math/MathUtils.sol\\\";\\r\\nimport {WadRayMath} from \\\"../math/WadRayMath.sol\\\";\\r\\nimport {PercentageMath} from \\\"../math/PercentageMath.sol\\\";\\r\\nimport {Errors} from \\\"../helpers/Errors.sol\\\";\\r\\nimport {DataTypes} from \\\"../types/DataTypes.sol\\\";\\r\\nimport {SafeCast} from \\\"../../../dependencies/openzeppelin/contracts/SafeCast.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title ReserveLogic library\\r\\n * @author Aqualis\\r\\n * @notice Implements the logic to update the reserves state\\r\\n */\\r\\nlibrary ReserveLogic {\\r\\n    using WadRayMath for uint256;\\r\\n    using PercentageMath for uint256;\\r\\n    using SafeCast for uint256;\\r\\n    using GPv2SafeERC20 for IERC20;\\r\\n    using ReserveLogic for DataTypes.ReserveData;\\r\\n    using ReserveConfiguration for DataTypes.ReserveConfigurationMap;\\r\\n\\r\\n    // See `IPool` for descriptions\\r\\n    event ReserveDataUpdated(\\r\\n        address indexed reserve,\\r\\n        uint256 liquidityRate,\\r\\n        uint256 stableBorrowRate,\\r\\n        uint256 variableBorrowRate,\\r\\n        uint256 liquidityIndex,\\r\\n        uint256 variableBorrowIndex\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the ongoing normalized income for the reserve.\\r\\n     * @dev A value of 1e27 means there is no income. As time passes, the income is accrued\\r\\n     * @dev A value of 2*1e27 means for each unit of asset one unit of income has been accrued\\r\\n     * @param reserve The reserve object\\r\\n     * @return The normalized income, expressed in ray\\r\\n     **/\\r\\n    function getNormalizedIncome(DataTypes.ReserveData storage reserve)\\r\\n        internal\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        uint40 timestamp = reserve.lastUpdateTimestamp;\\r\\n\\r\\n        //solium-disable-next-line\\r\\n        if (timestamp == block.timestamp) {\\r\\n            //if the index was updated in the same block, no need to perform any calculation\\r\\n            return reserve.liquidityIndex;\\r\\n        } else {\\r\\n            return\\r\\n                MathUtils\\r\\n                    .calculateLinearInterest(\\r\\n                        reserve.currentLiquidityRate,\\r\\n                        timestamp\\r\\n                    )\\r\\n                    .rayMul(reserve.liquidityIndex);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the ongoing normalized variable debt for the reserve.\\r\\n     * @dev A value of 1e27 means there is no debt. As time passes, the debt is accrued\\r\\n     * @dev A value of 2*1e27 means that for each unit of debt, one unit worth of interest has been accumulated\\r\\n     * @param reserve The reserve object\\r\\n     * @return The normalized variable debt, expressed in ray\\r\\n     **/\\r\\n    function getNormalizedDebt(DataTypes.ReserveData storage reserve)\\r\\n        internal\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        uint40 timestamp = reserve.lastUpdateTimestamp;\\r\\n\\r\\n        //solium-disable-next-line\\r\\n        if (timestamp == block.timestamp) {\\r\\n            //if the index was updated in the same block, no need to perform any calculation\\r\\n            return reserve.variableBorrowIndex;\\r\\n        } else {\\r\\n            return\\r\\n                MathUtils\\r\\n                    .calculateCompoundedInterest(\\r\\n                        reserve.currentVariableBorrowRate,\\r\\n                        timestamp\\r\\n                    )\\r\\n                    .rayMul(reserve.variableBorrowIndex);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Updates the liquidity cumulative index and the variable borrow index.\\r\\n     * @param reserve The reserve object\\r\\n     * @param reserveCache The caching layer for the reserve data\\r\\n     **/\\r\\n    function updateState(\\r\\n        DataTypes.ReserveData storage reserve,\\r\\n        DataTypes.ReserveCache memory reserveCache\\r\\n    ) internal {\\r\\n        _updateIndexes(reserve, reserveCache);\\r\\n        _accrueToTreasury(reserve, reserveCache);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Accumulates a predefined amount of asset to the reserve as a fixed, instantaneous income. Used for example\\r\\n     * to accumulate the flashloan fee to the reserve, and spread it between all the suppliers.\\r\\n     * @param reserve The reserve object\\r\\n     * @param totalLiquidity The total liquidity available in the reserve\\r\\n     * @param amount The amount to accumulate\\r\\n     * @return The next liquidity index of the reserve\\r\\n     **/\\r\\n    function cumulateToLiquidityIndex(\\r\\n        DataTypes.ReserveData storage reserve,\\r\\n        uint256 totalLiquidity,\\r\\n        uint256 amount\\r\\n    ) internal returns (uint256) {\\r\\n        //next liquidity index is calculated this way: `((amount / totalLiquidity) + 1) * liquidityIndex`\\r\\n        //division `amount / totalLiquidity` done in ray for precision\\r\\n        uint256 result = (amount.wadToRay().rayDiv(totalLiquidity.wadToRay()) +\\r\\n            WadRayMath.RAY).rayMul(reserve.liquidityIndex);\\r\\n        reserve.liquidityIndex = result.toUint128();\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Initializes a reserve.\\r\\n     * @param reserve The reserve object\\r\\n     * @param aTokenAddress The address of the overlying atoken contract\\r\\n     * @param stableDebtTokenAddress The address of the overlying stable debt token contract\\r\\n     * @param variableDebtTokenAddress The address of the overlying variable debt token contract\\r\\n     * @param interestRateStrategyAddress The address of the interest rate strategy contract\\r\\n     **/\\r\\n    function init(\\r\\n        DataTypes.ReserveData storage reserve,\\r\\n        address aTokenAddress,\\r\\n        address stableDebtTokenAddress,\\r\\n        address variableDebtTokenAddress,\\r\\n        address interestRateStrategyAddress\\r\\n    ) internal {\\r\\n        require(\\r\\n            reserve.aTokenAddress == address(0),\\r\\n            Errors.RESERVE_ALREADY_INITIALIZED\\r\\n        );\\r\\n\\r\\n        reserve.liquidityIndex = uint128(WadRayMath.RAY);\\r\\n        reserve.variableBorrowIndex = uint128(WadRayMath.RAY);\\r\\n        reserve.aTokenAddress = aTokenAddress;\\r\\n        reserve.stableDebtTokenAddress = stableDebtTokenAddress;\\r\\n        reserve.variableDebtTokenAddress = variableDebtTokenAddress;\\r\\n        reserve.interestRateStrategyAddress = interestRateStrategyAddress;\\r\\n    }\\r\\n\\r\\n    struct UpdateInterestRatesLocalVars {\\r\\n        uint256 nextLiquidityRate;\\r\\n        uint256 nextStableRate;\\r\\n        uint256 nextVariableRate;\\r\\n        uint256 totalVariableDebt;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Updates the reserve current stable borrow rate, the current variable borrow rate and the current liquidity rate.\\r\\n     * @param reserve The reserve reserve to be updated\\r\\n     * @param reserveCache The caching layer for the reserve data\\r\\n     * @param reserveAddress The address of the reserve to be updated\\r\\n     * @param liquidityAdded The amount of liquidity added to the protocol (supply or repay) in the previous action\\r\\n     * @param liquidityTaken The amount of liquidity taken from the protocol (redeem or borrow)\\r\\n     **/\\r\\n    function updateInterestRates(\\r\\n        DataTypes.ReserveData storage reserve,\\r\\n        DataTypes.ReserveCache memory reserveCache,\\r\\n        address reserveAddress,\\r\\n        uint256 liquidityAdded,\\r\\n        uint256 liquidityTaken\\r\\n    ) internal {\\r\\n        UpdateInterestRatesLocalVars memory vars;\\r\\n\\r\\n        vars.totalVariableDebt = reserveCache.nextScaledVariableDebt.rayMul(\\r\\n            reserveCache.nextVariableBorrowIndex\\r\\n        );\\r\\n\\r\\n        (\\r\\n            vars.nextLiquidityRate,\\r\\n            vars.nextStableRate,\\r\\n            vars.nextVariableRate\\r\\n        ) = IReserveInterestRateStrategy(reserve.interestRateStrategyAddress)\\r\\n            .calculateInterestRates(\\r\\n                DataTypes.CalculateInterestRatesParams({\\r\\n                    unbacked: reserveCache\\r\\n                        .reserveConfiguration\\r\\n                        .getUnbackedMintCap() != 0\\r\\n                        ? reserve.unbacked\\r\\n                        : 0,\\r\\n                    liquidityAdded: liquidityAdded,\\r\\n                    liquidityTaken: liquidityTaken,\\r\\n                    totalStableDebt: reserveCache.nextTotalStableDebt,\\r\\n                    totalVariableDebt: vars.totalVariableDebt,\\r\\n                    averageStableBorrowRate: reserveCache\\r\\n                        .nextAvgStableBorrowRate,\\r\\n                    reserveFactor: reserveCache.reserveFactor,\\r\\n                    reserve: reserveAddress,\\r\\n                    aToken: reserveCache.aTokenAddress\\r\\n                })\\r\\n            );\\r\\n\\r\\n        reserve.currentLiquidityRate = vars.nextLiquidityRate.toUint128();\\r\\n        reserve.currentStableBorrowRate = vars.nextStableRate.toUint128();\\r\\n        reserve.currentVariableBorrowRate = vars.nextVariableRate.toUint128();\\r\\n\\r\\n        emit ReserveDataUpdated(\\r\\n            reserveAddress,\\r\\n            vars.nextLiquidityRate,\\r\\n            vars.nextStableRate,\\r\\n            vars.nextVariableRate,\\r\\n            reserveCache.nextLiquidityIndex,\\r\\n            reserveCache.nextVariableBorrowIndex\\r\\n        );\\r\\n    }\\r\\n\\r\\n    struct AccrueToTreasuryLocalVars {\\r\\n        uint256 prevTotalStableDebt;\\r\\n        uint256 prevTotalVariableDebt;\\r\\n        uint256 currTotalVariableDebt;\\r\\n        uint256 cumulatedStableInterest;\\r\\n        uint256 totalDebtAccrued;\\r\\n        uint256 amountToMint;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Mints part of the repaid interest to the reserve treasury as a function of the reserve factor for the\\r\\n     * specific asset.\\r\\n     * @param reserve The reserve to be updated\\r\\n     * @param reserveCache The caching layer for the reserve data\\r\\n     **/\\r\\n    function _accrueToTreasury(\\r\\n        DataTypes.ReserveData storage reserve,\\r\\n        DataTypes.ReserveCache memory reserveCache\\r\\n    ) internal {\\r\\n        AccrueToTreasuryLocalVars memory vars;\\r\\n\\r\\n        if (reserveCache.reserveFactor == 0) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        //calculate the total variable debt at moment of the last interaction\\r\\n        vars.prevTotalVariableDebt = reserveCache.currScaledVariableDebt.rayMul(\\r\\n            reserveCache.currVariableBorrowIndex\\r\\n        );\\r\\n\\r\\n        //calculate the new total variable debt after accumulation of the interest on the index\\r\\n        vars.currTotalVariableDebt = reserveCache.currScaledVariableDebt.rayMul(\\r\\n            reserveCache.nextVariableBorrowIndex\\r\\n        );\\r\\n\\r\\n        //calculate the stable debt until the last timestamp update\\r\\n        vars.cumulatedStableInterest = MathUtils.calculateCompoundedInterest(\\r\\n            reserveCache.currAvgStableBorrowRate,\\r\\n            reserveCache.stableDebtLastUpdateTimestamp,\\r\\n            reserveCache.reserveLastUpdateTimestamp\\r\\n        );\\r\\n\\r\\n        vars.prevTotalStableDebt = reserveCache.currPrincipalStableDebt.rayMul(\\r\\n            vars.cumulatedStableInterest\\r\\n        );\\r\\n\\r\\n        //debt accrued is the sum of the current debt minus the sum of the debt at the last update\\r\\n        vars.totalDebtAccrued =\\r\\n            vars.currTotalVariableDebt +\\r\\n            reserveCache.currTotalStableDebt -\\r\\n            vars.prevTotalVariableDebt -\\r\\n            vars.prevTotalStableDebt;\\r\\n\\r\\n        vars.amountToMint = vars.totalDebtAccrued.percentMul(\\r\\n            reserveCache.reserveFactor\\r\\n        );\\r\\n\\r\\n        if (vars.amountToMint != 0) {\\r\\n            reserve.accruedToTreasury += vars\\r\\n                .amountToMint\\r\\n                .rayDiv(reserveCache.nextLiquidityIndex)\\r\\n                .toUint128();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Updates the reserve indexes and the timestamp of the update.\\r\\n     * @param reserve The reserve reserve to be updated\\r\\n     * @param reserveCache The cache layer holding the cached protocol data\\r\\n     **/\\r\\n    function _updateIndexes(\\r\\n        DataTypes.ReserveData storage reserve,\\r\\n        DataTypes.ReserveCache memory reserveCache\\r\\n    ) internal {\\r\\n        reserveCache.nextLiquidityIndex = reserveCache.currLiquidityIndex;\\r\\n        reserveCache.nextVariableBorrowIndex = reserveCache\\r\\n            .currVariableBorrowIndex;\\r\\n\\r\\n        //only cumulating if there is any income being produced\\r\\n        if (reserveCache.currLiquidityRate != 0) {\\r\\n            uint256 cumulatedLiquidityInterest = MathUtils\\r\\n                .calculateLinearInterest(\\r\\n                    reserveCache.currLiquidityRate,\\r\\n                    reserveCache.reserveLastUpdateTimestamp\\r\\n                );\\r\\n            reserveCache.nextLiquidityIndex = cumulatedLiquidityInterest.rayMul(\\r\\n                reserveCache.currLiquidityIndex\\r\\n            );\\r\\n            reserve.liquidityIndex = reserveCache\\r\\n                .nextLiquidityIndex\\r\\n                .toUint128();\\r\\n\\r\\n            //as the liquidity rate might come only from stable rate loans, we need to ensure\\r\\n            //that there is actual variable debt before accumulating\\r\\n            if (reserveCache.currScaledVariableDebt != 0) {\\r\\n                uint256 cumulatedVariableBorrowInterest = MathUtils\\r\\n                    .calculateCompoundedInterest(\\r\\n                        reserveCache.currVariableBorrowRate,\\r\\n                        reserveCache.reserveLastUpdateTimestamp\\r\\n                    );\\r\\n                reserveCache\\r\\n                    .nextVariableBorrowIndex = cumulatedVariableBorrowInterest\\r\\n                    .rayMul(reserveCache.currVariableBorrowIndex);\\r\\n                reserve.variableBorrowIndex = reserveCache\\r\\n                    .nextVariableBorrowIndex\\r\\n                    .toUint128();\\r\\n            }\\r\\n        }\\r\\n\\r\\n        //solium-disable-next-line\\r\\n        reserve.lastUpdateTimestamp = uint40(block.timestamp);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Creates a cache object to avoid repeated storage reads and external contract calls when updating state and\\r\\n     * interest rates.\\r\\n     * @param reserve The reserve object for which the cache will be filled\\r\\n     * @return The cache object\\r\\n     */\\r\\n    function cache(DataTypes.ReserveData storage reserve)\\r\\n        internal\\r\\n        view\\r\\n        returns (DataTypes.ReserveCache memory)\\r\\n    {\\r\\n        DataTypes.ReserveCache memory reserveCache;\\r\\n\\r\\n        reserveCache.reserveConfiguration = reserve.configuration;\\r\\n        reserveCache.reserveFactor = reserveCache\\r\\n            .reserveConfiguration\\r\\n            .getReserveFactor();\\r\\n        reserveCache.currLiquidityIndex = reserve.liquidityIndex;\\r\\n        reserveCache.currVariableBorrowIndex = reserve.variableBorrowIndex;\\r\\n        reserveCache.currLiquidityRate = reserve.currentLiquidityRate;\\r\\n        reserveCache.currVariableBorrowRate = reserve.currentVariableBorrowRate;\\r\\n\\r\\n        reserveCache.aTokenAddress = reserve.aTokenAddress;\\r\\n        reserveCache.stableDebtTokenAddress = reserve.stableDebtTokenAddress;\\r\\n        reserveCache.variableDebtTokenAddress = reserve\\r\\n            .variableDebtTokenAddress;\\r\\n\\r\\n        reserveCache.reserveLastUpdateTimestamp = reserve.lastUpdateTimestamp;\\r\\n\\r\\n        reserveCache.currScaledVariableDebt = reserveCache\\r\\n            .nextScaledVariableDebt = IVariableDebtToken(\\r\\n            reserveCache.variableDebtTokenAddress\\r\\n        ).scaledTotalSupply();\\r\\n\\r\\n        (\\r\\n            reserveCache.currPrincipalStableDebt,\\r\\n            reserveCache.currTotalStableDebt,\\r\\n            reserveCache.currAvgStableBorrowRate,\\r\\n            reserveCache.stableDebtLastUpdateTimestamp\\r\\n        ) = IStableDebtToken(reserveCache.stableDebtTokenAddress)\\r\\n            .getSupplyData();\\r\\n\\r\\n        // by default the actions are considered as not affecting the debt balances.\\r\\n        // if the action involves mint/burn of debt, the cache needs to be updated\\r\\n        reserveCache.nextTotalStableDebt = reserveCache.currTotalStableDebt;\\r\\n        reserveCache.nextAvgStableBorrowRate = reserveCache\\r\\n            .currAvgStableBorrowRate;\\r\\n\\r\\n        return reserveCache;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xe015e121681b1b942fb77f8cd298dcc2f1a960be70fde5f622d385fc3c01df61\",\"license\":\"BUSL-1.1\"},\"core-v3/contracts/protocol/libraries/logic/ValidationLogic.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity 0.8.10;\\r\\n\\r\\nimport {IERC20} from \\\"../../../dependencies/openzeppelin/contracts/IERC20.sol\\\";\\r\\nimport {Address} from \\\"../../../dependencies/openzeppelin/contracts/Address.sol\\\";\\r\\nimport {GPv2SafeERC20} from \\\"../../../dependencies/gnosis/contracts/GPv2SafeERC20.sol\\\";\\r\\nimport {IReserveInterestRateStrategy} from \\\"../../../interfaces/IReserveInterestRateStrategy.sol\\\";\\r\\nimport {IStableDebtToken} from \\\"../../../interfaces/IStableDebtToken.sol\\\";\\r\\nimport {IScaledBalanceToken} from \\\"../../../interfaces/IScaledBalanceToken.sol\\\";\\r\\nimport {IPriceOracleGetter} from \\\"../../../interfaces/IPriceOracleGetter.sol\\\";\\r\\nimport {IAToken} from \\\"../../../interfaces/IAToken.sol\\\";\\r\\nimport {IPriceOracleSentinel} from \\\"../../../interfaces/IPriceOracleSentinel.sol\\\";\\r\\nimport {ReserveConfiguration} from \\\"../configuration/ReserveConfiguration.sol\\\";\\r\\nimport {UserConfiguration} from \\\"../configuration/UserConfiguration.sol\\\";\\r\\nimport {Errors} from \\\"../helpers/Errors.sol\\\";\\r\\nimport {WadRayMath} from \\\"../math/WadRayMath.sol\\\";\\r\\nimport {PercentageMath} from \\\"../math/PercentageMath.sol\\\";\\r\\nimport {DataTypes} from \\\"../types/DataTypes.sol\\\";\\r\\nimport {ReserveLogic} from \\\"./ReserveLogic.sol\\\";\\r\\nimport {GenericLogic} from \\\"./GenericLogic.sol\\\";\\r\\nimport {SafeCast} from \\\"../../../dependencies/openzeppelin/contracts/SafeCast.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title ReserveLogic library\\r\\n * @author Aqualis\\r\\n * @notice Implements functions to validate the different actions of the protocol\\r\\n */\\r\\nlibrary ValidationLogic {\\r\\n    using ReserveLogic for DataTypes.ReserveData;\\r\\n    using WadRayMath for uint256;\\r\\n    using PercentageMath for uint256;\\r\\n    using SafeCast for uint256;\\r\\n    using GPv2SafeERC20 for IERC20;\\r\\n    using ReserveConfiguration for DataTypes.ReserveConfigurationMap;\\r\\n    using UserConfiguration for DataTypes.UserConfigurationMap;\\r\\n    using Address for address;\\r\\n\\r\\n    // Factor to apply to \\\"only-variable-debt\\\" liquidity rate to get threshold for rebalancing, expressed in bps\\r\\n    // A value of 0.9e4 results in 90%\\r\\n    uint256 public constant REBALANCE_UP_LIQUIDITY_RATE_THRESHOLD = 0.9e4;\\r\\n\\r\\n    // Minimum health factor allowed under any circumstance\\r\\n    // A value of 0.95e18 results in 0.95\\r\\n    uint256 public constant MINIMUM_HEALTH_FACTOR_LIQUIDATION_THRESHOLD =\\r\\n        0.95e18;\\r\\n\\r\\n    /**\\r\\n     * @dev Minimum health factor to consider a user position healthy\\r\\n     * A value of 1e18 results in 1\\r\\n     */\\r\\n    uint256 public constant HEALTH_FACTOR_LIQUIDATION_THRESHOLD = 1e18;\\r\\n\\r\\n    /**\\r\\n     * @notice Validates a supply action.\\r\\n     * @param reserveCache The cached data of the reserve\\r\\n     * @param amount The amount to be supplied\\r\\n     */\\r\\n    function validateSupply(\\r\\n        DataTypes.ReserveCache memory reserveCache,\\r\\n        uint256 amount\\r\\n    ) internal view {\\r\\n        require(amount != 0, Errors.INVALID_AMOUNT);\\r\\n\\r\\n        (bool isActive, bool isFrozen, , , bool isPaused) = reserveCache\\r\\n            .reserveConfiguration\\r\\n            .getFlags();\\r\\n        require(isActive, Errors.RESERVE_INACTIVE);\\r\\n        require(!isPaused, Errors.RESERVE_PAUSED);\\r\\n        require(!isFrozen, Errors.RESERVE_FROZEN);\\r\\n\\r\\n        uint256 supplyCap = reserveCache.reserveConfiguration.getSupplyCap();\\r\\n        require(\\r\\n            supplyCap == 0 ||\\r\\n                (IAToken(reserveCache.aTokenAddress).scaledTotalSupply().rayMul(\\r\\n                    reserveCache.nextLiquidityIndex\\r\\n                ) + amount) <=\\r\\n                supplyCap *\\r\\n                    (10**reserveCache.reserveConfiguration.getDecimals()),\\r\\n            Errors.SUPPLY_CAP_EXCEEDED\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Validates a withdraw action.\\r\\n     * @param reserveCache The cached data of the reserve\\r\\n     * @param amount The amount to be withdrawn\\r\\n     * @param userBalance The balance of the user\\r\\n     */\\r\\n    function validateWithdraw(\\r\\n        DataTypes.ReserveCache memory reserveCache,\\r\\n        uint256 amount,\\r\\n        uint256 userBalance\\r\\n    ) internal pure {\\r\\n        require(amount != 0, Errors.INVALID_AMOUNT);\\r\\n        require(\\r\\n            amount <= userBalance,\\r\\n            Errors.NOT_ENOUGH_AVAILABLE_USER_BALANCE\\r\\n        );\\r\\n\\r\\n        (bool isActive, , , , bool isPaused) = reserveCache\\r\\n            .reserveConfiguration\\r\\n            .getFlags();\\r\\n        require(isActive, Errors.RESERVE_INACTIVE);\\r\\n        require(!isPaused, Errors.RESERVE_PAUSED);\\r\\n    }\\r\\n\\r\\n    struct ValidateBorrowLocalVars {\\r\\n        uint256 currentLtv;\\r\\n        uint256 collateralNeededInBaseCurrency;\\r\\n        uint256 userCollateralInBaseCurrency;\\r\\n        uint256 userDebtInBaseCurrency;\\r\\n        uint256 availableLiquidity;\\r\\n        uint256 healthFactor;\\r\\n        uint256 totalDebt;\\r\\n        uint256 totalSupplyVariableDebt;\\r\\n        uint256 reserveDecimals;\\r\\n        uint256 borrowCap;\\r\\n        uint256 amountInBaseCurrency;\\r\\n        uint256 assetUnit;\\r\\n        address eModePriceSource;\\r\\n        address siloedBorrowingAddress;\\r\\n        bool isActive;\\r\\n        bool isFrozen;\\r\\n        bool isPaused;\\r\\n        bool borrowingEnabled;\\r\\n        bool stableRateBorrowingEnabled;\\r\\n        bool siloedBorrowingEnabled;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Validates a borrow action.\\r\\n     * @param reservesData The state of all the reserves\\r\\n     * @param reservesList The addresses of all the active reserves\\r\\n     * @param eModeCategories The configuration of all the efficiency mode categories\\r\\n     * @param params Additional params needed for the validation\\r\\n     */\\r\\n    function validateBorrow(\\r\\n        mapping(address => DataTypes.ReserveData) storage reservesData,\\r\\n        mapping(uint256 => address) storage reservesList,\\r\\n        mapping(uint8 => DataTypes.EModeCategory) storage eModeCategories,\\r\\n        DataTypes.ValidateBorrowParams memory params\\r\\n    ) internal view {\\r\\n        require(params.amount != 0, Errors.INVALID_AMOUNT);\\r\\n\\r\\n        ValidateBorrowLocalVars memory vars;\\r\\n\\r\\n        (\\r\\n            vars.isActive,\\r\\n            vars.isFrozen,\\r\\n            vars.borrowingEnabled,\\r\\n            vars.stableRateBorrowingEnabled,\\r\\n            vars.isPaused\\r\\n        ) = params.reserveCache.reserveConfiguration.getFlags();\\r\\n\\r\\n        require(vars.isActive, Errors.RESERVE_INACTIVE);\\r\\n        require(!vars.isPaused, Errors.RESERVE_PAUSED);\\r\\n        require(!vars.isFrozen, Errors.RESERVE_FROZEN);\\r\\n        require(vars.borrowingEnabled, Errors.BORROWING_NOT_ENABLED);\\r\\n\\r\\n        require(\\r\\n            params.priceOracleSentinel == address(0) ||\\r\\n                IPriceOracleSentinel(params.priceOracleSentinel)\\r\\n                    .isBorrowAllowed(),\\r\\n            Errors.PRICE_ORACLE_SENTINEL_CHECK_FAILED\\r\\n        );\\r\\n\\r\\n        //validate interest rate mode\\r\\n        require(\\r\\n            params.interestRateMode == DataTypes.InterestRateMode.VARIABLE ||\\r\\n                params.interestRateMode == DataTypes.InterestRateMode.STABLE,\\r\\n            Errors.INVALID_INTEREST_RATE_MODE_SELECTED\\r\\n        );\\r\\n\\r\\n        vars.reserveDecimals = params\\r\\n            .reserveCache\\r\\n            .reserveConfiguration\\r\\n            .getDecimals();\\r\\n        vars.borrowCap = params\\r\\n            .reserveCache\\r\\n            .reserveConfiguration\\r\\n            .getBorrowCap();\\r\\n        unchecked {\\r\\n            vars.assetUnit = 10**vars.reserveDecimals;\\r\\n        }\\r\\n\\r\\n        if (vars.borrowCap != 0) {\\r\\n            vars.totalSupplyVariableDebt = params\\r\\n                .reserveCache\\r\\n                .currScaledVariableDebt\\r\\n                .rayMul(params.reserveCache.nextVariableBorrowIndex);\\r\\n\\r\\n            vars.totalDebt =\\r\\n                params.reserveCache.currTotalStableDebt +\\r\\n                vars.totalSupplyVariableDebt +\\r\\n                params.amount;\\r\\n\\r\\n            unchecked {\\r\\n                require(\\r\\n                    vars.totalDebt <= vars.borrowCap * vars.assetUnit,\\r\\n                    Errors.BORROW_CAP_EXCEEDED\\r\\n                );\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (params.isolationModeActive) {\\r\\n            // check that the asset being borrowed is borrowable in isolation mode AND\\r\\n            // the total exposure is no bigger than the collateral debt ceiling\\r\\n            require(\\r\\n                params\\r\\n                    .reserveCache\\r\\n                    .reserveConfiguration\\r\\n                    .getBorrowableInIsolation(),\\r\\n                Errors.ASSET_NOT_BORROWABLE_IN_ISOLATION\\r\\n            );\\r\\n\\r\\n            require(\\r\\n                reservesData[params.isolationModeCollateralAddress]\\r\\n                    .isolationModeTotalDebt +\\r\\n                    (params.amount /\\r\\n                        10 **\\r\\n                            (vars.reserveDecimals -\\r\\n                                ReserveConfiguration.DEBT_CEILING_DECIMALS))\\r\\n                        .toUint128() <=\\r\\n                    params.isolationModeDebtCeiling,\\r\\n                Errors.DEBT_CEILING_EXCEEDED\\r\\n            );\\r\\n        }\\r\\n\\r\\n        if (params.userEModeCategory != 0) {\\r\\n            require(\\r\\n                params.reserveCache.reserveConfiguration.getEModeCategory() ==\\r\\n                    params.userEModeCategory,\\r\\n                Errors.INCONSISTENT_EMODE_CATEGORY\\r\\n            );\\r\\n            vars.eModePriceSource = eModeCategories[params.userEModeCategory]\\r\\n                .priceSource;\\r\\n        }\\r\\n\\r\\n        (\\r\\n            vars.userCollateralInBaseCurrency,\\r\\n            vars.userDebtInBaseCurrency,\\r\\n            vars.currentLtv,\\r\\n            ,\\r\\n            vars.healthFactor,\\r\\n\\r\\n        ) = GenericLogic.calculateUserAccountData(\\r\\n            reservesData,\\r\\n            reservesList,\\r\\n            eModeCategories,\\r\\n            DataTypes.CalculateUserAccountDataParams({\\r\\n                userConfig: params.userConfig,\\r\\n                reservesCount: params.reservesCount,\\r\\n                user: params.userAddress,\\r\\n                oracle: params.oracle,\\r\\n                userEModeCategory: params.userEModeCategory\\r\\n            })\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            vars.userCollateralInBaseCurrency != 0,\\r\\n            Errors.COLLATERAL_BALANCE_IS_ZERO\\r\\n        );\\r\\n        require(vars.currentLtv != 0, Errors.LTV_VALIDATION_FAILED);\\r\\n\\r\\n        require(\\r\\n            vars.healthFactor > HEALTH_FACTOR_LIQUIDATION_THRESHOLD,\\r\\n            Errors.HEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD\\r\\n        );\\r\\n\\r\\n        vars.amountInBaseCurrency =\\r\\n            IPriceOracleGetter(params.oracle).getAssetPrice(\\r\\n                vars.eModePriceSource != address(0)\\r\\n                    ? vars.eModePriceSource\\r\\n                    : params.asset\\r\\n            ) *\\r\\n            params.amount;\\r\\n        unchecked {\\r\\n            vars.amountInBaseCurrency /= vars.assetUnit;\\r\\n        }\\r\\n\\r\\n        //add the current already borrowed amount to the amount requested to calculate the total collateral needed.\\r\\n        vars.collateralNeededInBaseCurrency = (vars.userDebtInBaseCurrency +\\r\\n            vars.amountInBaseCurrency).percentDiv(vars.currentLtv); //LTV is calculated in percentage\\r\\n\\r\\n        require(\\r\\n            vars.collateralNeededInBaseCurrency <=\\r\\n                vars.userCollateralInBaseCurrency,\\r\\n            Errors.COLLATERAL_CANNOT_COVER_NEW_BORROW\\r\\n        );\\r\\n\\r\\n        /**\\r\\n         * Following conditions need to be met if the user is borrowing at a stable rate:\\r\\n         * 1. Reserve must be enabled for stable rate borrowing\\r\\n         * 2. Users cannot borrow from the reserve if their collateral is (mostly) the same currency\\r\\n         *    they are borrowing, to prevent abuses.\\r\\n         * 3. Users will be able to borrow only a portion of the total available liquidity\\r\\n         **/\\r\\n\\r\\n        if (params.interestRateMode == DataTypes.InterestRateMode.STABLE) {\\r\\n            //check if the borrow mode is stable and if stable rate borrowing is enabled on this reserve\\r\\n\\r\\n            require(\\r\\n                vars.stableRateBorrowingEnabled,\\r\\n                Errors.STABLE_BORROWING_NOT_ENABLED\\r\\n            );\\r\\n\\r\\n            require(\\r\\n                !params.userConfig.isUsingAsCollateral(\\r\\n                    reservesData[params.asset].id\\r\\n                ) ||\\r\\n                    params.reserveCache.reserveConfiguration.getLtv() == 0 ||\\r\\n                    params.amount >\\r\\n                    IERC20(params.reserveCache.aTokenAddress).balanceOf(\\r\\n                        params.userAddress\\r\\n                    ),\\r\\n                Errors.COLLATERAL_SAME_AS_BORROWING_CURRENCY\\r\\n            );\\r\\n\\r\\n            vars.availableLiquidity = IERC20(params.asset).balanceOf(\\r\\n                params.reserveCache.aTokenAddress\\r\\n            );\\r\\n\\r\\n            //calculate the max available loan size in stable rate mode as a percentage of the\\r\\n            //available liquidity\\r\\n            uint256 maxLoanSizeStable = vars.availableLiquidity.percentMul(\\r\\n                params.maxStableLoanPercent\\r\\n            );\\r\\n\\r\\n            require(\\r\\n                params.amount <= maxLoanSizeStable,\\r\\n                Errors.AMOUNT_BIGGER_THAN_MAX_LOAN_SIZE_STABLE\\r\\n            );\\r\\n        }\\r\\n\\r\\n        if (params.userConfig.isBorrowingAny()) {\\r\\n            (vars.siloedBorrowingEnabled, vars.siloedBorrowingAddress) = params\\r\\n                .userConfig\\r\\n                .getSiloedBorrowingState(reservesData, reservesList);\\r\\n\\r\\n            if (vars.siloedBorrowingEnabled) {\\r\\n                require(\\r\\n                    vars.siloedBorrowingAddress == params.asset,\\r\\n                    Errors.SILOED_BORROWING_VIOLATION\\r\\n                );\\r\\n            } else {\\r\\n                require(\\r\\n                    !params\\r\\n                        .reserveCache\\r\\n                        .reserveConfiguration\\r\\n                        .getSiloedBorrowing(),\\r\\n                    Errors.SILOED_BORROWING_VIOLATION\\r\\n                );\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Validates a repay action.\\r\\n     * @param reserveCache The cached data of the reserve\\r\\n     * @param amountSent The amount sent for the repayment. Can be an actual value or uint(-1)\\r\\n     * @param interestRateMode The interest rate mode of the debt being repaid\\r\\n     * @param onBehalfOf The address of the user msg.sender is repaying for\\r\\n     * @param stableDebt The borrow balance of the user\\r\\n     * @param variableDebt The borrow balance of the user\\r\\n     */\\r\\n    function validateRepay(\\r\\n        DataTypes.ReserveCache memory reserveCache,\\r\\n        uint256 amountSent,\\r\\n        DataTypes.InterestRateMode interestRateMode,\\r\\n        address onBehalfOf,\\r\\n        uint256 stableDebt,\\r\\n        uint256 variableDebt\\r\\n    ) internal view {\\r\\n        require(amountSent != 0, Errors.INVALID_AMOUNT);\\r\\n        require(\\r\\n            amountSent != type(uint256).max || msg.sender == onBehalfOf,\\r\\n            Errors.NO_EXPLICIT_AMOUNT_TO_REPAY_ON_BEHALF\\r\\n        );\\r\\n\\r\\n        (bool isActive, , , , bool isPaused) = reserveCache\\r\\n            .reserveConfiguration\\r\\n            .getFlags();\\r\\n        require(isActive, Errors.RESERVE_INACTIVE);\\r\\n        require(!isPaused, Errors.RESERVE_PAUSED);\\r\\n\\r\\n        uint256 variableDebtPreviousIndex = IScaledBalanceToken(\\r\\n            reserveCache.variableDebtTokenAddress\\r\\n        ).getPreviousIndex(onBehalfOf);\\r\\n\\r\\n        uint40 stableRatePreviousTimestamp = IStableDebtToken(\\r\\n            reserveCache.stableDebtTokenAddress\\r\\n        ).getUserLastUpdated(onBehalfOf);\\r\\n\\r\\n        require(\\r\\n            (stableRatePreviousTimestamp < uint40(block.timestamp) &&\\r\\n                interestRateMode == DataTypes.InterestRateMode.STABLE) ||\\r\\n                (variableDebtPreviousIndex <\\r\\n                    reserveCache.nextVariableBorrowIndex &&\\r\\n                    interestRateMode == DataTypes.InterestRateMode.VARIABLE),\\r\\n            Errors.SAME_BLOCK_BORROW_REPAY\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            (stableDebt != 0 &&\\r\\n                interestRateMode == DataTypes.InterestRateMode.STABLE) ||\\r\\n                (variableDebt != 0 &&\\r\\n                    interestRateMode == DataTypes.InterestRateMode.VARIABLE),\\r\\n            Errors.NO_DEBT_OF_SELECTED_TYPE\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Validates a swap of borrow rate mode.\\r\\n     * @param reserve The reserve state on which the user is swapping the rate\\r\\n     * @param reserveCache The cached data of the reserve\\r\\n     * @param userConfig The user reserves configuration\\r\\n     * @param stableDebt The stable debt of the user\\r\\n     * @param variableDebt The variable debt of the user\\r\\n     * @param currentRateMode The rate mode of the debt being swapped\\r\\n     */\\r\\n    function validateSwapRateMode(\\r\\n        DataTypes.ReserveData storage reserve,\\r\\n        DataTypes.ReserveCache memory reserveCache,\\r\\n        DataTypes.UserConfigurationMap storage userConfig,\\r\\n        uint256 stableDebt,\\r\\n        uint256 variableDebt,\\r\\n        DataTypes.InterestRateMode currentRateMode\\r\\n    ) internal view {\\r\\n        (\\r\\n            bool isActive,\\r\\n            bool isFrozen,\\r\\n            ,\\r\\n            bool stableRateEnabled,\\r\\n            bool isPaused\\r\\n        ) = reserveCache.reserveConfiguration.getFlags();\\r\\n        require(isActive, Errors.RESERVE_INACTIVE);\\r\\n        require(!isPaused, Errors.RESERVE_PAUSED);\\r\\n        require(!isFrozen, Errors.RESERVE_FROZEN);\\r\\n\\r\\n        if (currentRateMode == DataTypes.InterestRateMode.STABLE) {\\r\\n            require(stableDebt != 0, Errors.NO_OUTSTANDING_STABLE_DEBT);\\r\\n        } else if (currentRateMode == DataTypes.InterestRateMode.VARIABLE) {\\r\\n            require(variableDebt != 0, Errors.NO_OUTSTANDING_VARIABLE_DEBT);\\r\\n            /**\\r\\n             * user wants to swap to stable, before swapping we need to ensure that\\r\\n             * 1. stable borrow rate is enabled on the reserve\\r\\n             * 2. user is not trying to abuse the reserve by supplying\\r\\n             * more collateral than he is borrowing, artificially lowering\\r\\n             * the interest rate, borrowing at variable, and switching to stable\\r\\n             **/\\r\\n            require(stableRateEnabled, Errors.STABLE_BORROWING_NOT_ENABLED);\\r\\n\\r\\n            require(\\r\\n                !userConfig.isUsingAsCollateral(reserve.id) ||\\r\\n                    reserveCache.reserveConfiguration.getLtv() == 0 ||\\r\\n                    stableDebt + variableDebt >\\r\\n                    IERC20(reserveCache.aTokenAddress).balanceOf(msg.sender),\\r\\n                Errors.COLLATERAL_SAME_AS_BORROWING_CURRENCY\\r\\n            );\\r\\n        } else {\\r\\n            revert(Errors.INVALID_INTEREST_RATE_MODE_SELECTED);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Validates a stable borrow rate rebalance action.\\r\\n     * @dev Rebalancing is accepted when depositors are earning <= 90% of their earnings in pure supply/demand market (variable rate only)\\r\\n     * For this to be the case, there has to be quite large stable debt with an interest rate below the current variable rate.\\r\\n     * @param reserve The reserve state on which the user is getting rebalanced\\r\\n     * @param reserveCache The cached state of the reserve\\r\\n     * @param reserveAddress The address of the reserve\\r\\n     */\\r\\n    function validateRebalanceStableBorrowRate(\\r\\n        DataTypes.ReserveData storage reserve,\\r\\n        DataTypes.ReserveCache memory reserveCache,\\r\\n        address reserveAddress\\r\\n    ) internal view {\\r\\n        (bool isActive, , , , bool isPaused) = reserveCache\\r\\n            .reserveConfiguration\\r\\n            .getFlags();\\r\\n        require(isActive, Errors.RESERVE_INACTIVE);\\r\\n        require(!isPaused, Errors.RESERVE_PAUSED);\\r\\n\\r\\n        uint256 totalDebt = IERC20(reserveCache.stableDebtTokenAddress)\\r\\n            .totalSupply() +\\r\\n            IERC20(reserveCache.variableDebtTokenAddress).totalSupply();\\r\\n\\r\\n        (\\r\\n            uint256 liquidityRateVariableDebtOnly,\\r\\n            ,\\r\\n\\r\\n        ) = IReserveInterestRateStrategy(reserve.interestRateStrategyAddress)\\r\\n                .calculateInterestRates(\\r\\n                    DataTypes.CalculateInterestRatesParams({\\r\\n                        unbacked: reserve.unbacked,\\r\\n                        liquidityAdded: 0,\\r\\n                        liquidityTaken: 0,\\r\\n                        totalStableDebt: 0,\\r\\n                        totalVariableDebt: totalDebt,\\r\\n                        averageStableBorrowRate: 0,\\r\\n                        reserveFactor: reserveCache.reserveFactor,\\r\\n                        reserve: reserveAddress,\\r\\n                        aToken: reserveCache.aTokenAddress\\r\\n                    })\\r\\n                );\\r\\n\\r\\n        require(\\r\\n            reserveCache.currLiquidityRate <=\\r\\n                liquidityRateVariableDebtOnly.percentMul(\\r\\n                    REBALANCE_UP_LIQUIDITY_RATE_THRESHOLD\\r\\n                ),\\r\\n            Errors.INTEREST_RATE_REBALANCE_CONDITIONS_NOT_MET\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Validates the action of setting an asset as collateral.\\r\\n     * @param reserveCache The cached data of the reserve\\r\\n     * @param userBalance The balance of the user\\r\\n     */\\r\\n    function validateSetUseReserveAsCollateral(\\r\\n        DataTypes.ReserveCache memory reserveCache,\\r\\n        uint256 userBalance\\r\\n    ) internal pure {\\r\\n        require(userBalance != 0, Errors.UNDERLYING_BALANCE_ZERO);\\r\\n\\r\\n        (bool isActive, , , , bool isPaused) = reserveCache\\r\\n            .reserveConfiguration\\r\\n            .getFlags();\\r\\n        require(isActive, Errors.RESERVE_INACTIVE);\\r\\n        require(!isPaused, Errors.RESERVE_PAUSED);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Validates a flashloan action.\\r\\n     * @param reservesData The state of all the reserves\\r\\n     * @param assets The assets being flash-borrowed\\r\\n     * @param amounts The amounts for each asset being borrowed\\r\\n     */\\r\\n    function validateFlashloan(\\r\\n        mapping(address => DataTypes.ReserveData) storage reservesData,\\r\\n        address[] memory assets,\\r\\n        uint256[] memory amounts\\r\\n    ) internal view {\\r\\n        require(\\r\\n            assets.length == amounts.length,\\r\\n            Errors.INCONSISTENT_FLASHLOAN_PARAMS\\r\\n        );\\r\\n        for (uint256 i = 0; i < assets.length; i++) {\\r\\n            DataTypes.ReserveConfigurationMap\\r\\n                memory configuration = reservesData[assets[i]].configuration;\\r\\n            require(!configuration.getPaused(), Errors.RESERVE_PAUSED);\\r\\n            require(configuration.getActive(), Errors.RESERVE_INACTIVE);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Validates a flashloan action.\\r\\n     * @param reserve The state of the reserve\\r\\n     */\\r\\n    function validateFlashloanSimple(DataTypes.ReserveData storage reserve)\\r\\n        internal\\r\\n        view\\r\\n    {\\r\\n        DataTypes.ReserveConfigurationMap memory configuration = reserve\\r\\n            .configuration;\\r\\n        require(!configuration.getPaused(), Errors.RESERVE_PAUSED);\\r\\n        require(configuration.getActive(), Errors.RESERVE_INACTIVE);\\r\\n    }\\r\\n\\r\\n    struct ValidateLiquidationCallLocalVars {\\r\\n        bool collateralReserveActive;\\r\\n        bool collateralReservePaused;\\r\\n        bool principalReserveActive;\\r\\n        bool principalReservePaused;\\r\\n        bool isCollateralEnabled;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Validates the liquidation action.\\r\\n     * @param userConfig The user configuration mapping\\r\\n     * @param collateralReserve The reserve data of the collateral\\r\\n     * @param params Additional parameters needed for the validation\\r\\n     */\\r\\n    function validateLiquidationCall(\\r\\n        DataTypes.UserConfigurationMap storage userConfig,\\r\\n        DataTypes.ReserveData storage collateralReserve,\\r\\n        DataTypes.ValidateLiquidationCallParams memory params\\r\\n    ) internal view {\\r\\n        ValidateLiquidationCallLocalVars memory vars;\\r\\n\\r\\n        (\\r\\n            vars.collateralReserveActive,\\r\\n            ,\\r\\n            ,\\r\\n            ,\\r\\n            vars.collateralReservePaused\\r\\n        ) = collateralReserve.configuration.getFlags();\\r\\n\\r\\n        (\\r\\n            vars.principalReserveActive,\\r\\n            ,\\r\\n            ,\\r\\n            ,\\r\\n            vars.principalReservePaused\\r\\n        ) = params.debtReserveCache.reserveConfiguration.getFlags();\\r\\n\\r\\n        require(\\r\\n            vars.collateralReserveActive && vars.principalReserveActive,\\r\\n            Errors.RESERVE_INACTIVE\\r\\n        );\\r\\n        require(\\r\\n            !vars.collateralReservePaused && !vars.principalReservePaused,\\r\\n            Errors.RESERVE_PAUSED\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            params.priceOracleSentinel == address(0) ||\\r\\n                params.healthFactor <\\r\\n                MINIMUM_HEALTH_FACTOR_LIQUIDATION_THRESHOLD ||\\r\\n                IPriceOracleSentinel(params.priceOracleSentinel)\\r\\n                    .isLiquidationAllowed(),\\r\\n            Errors.PRICE_ORACLE_SENTINEL_CHECK_FAILED\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            params.healthFactor < HEALTH_FACTOR_LIQUIDATION_THRESHOLD,\\r\\n            Errors.HEALTH_FACTOR_NOT_BELOW_THRESHOLD\\r\\n        );\\r\\n\\r\\n        vars.isCollateralEnabled =\\r\\n            collateralReserve.configuration.getLiquidationThreshold() != 0 &&\\r\\n            userConfig.isUsingAsCollateral(collateralReserve.id);\\r\\n\\r\\n        //if collateral isn't enabled as collateral by user, it cannot be liquidated\\r\\n        require(\\r\\n            vars.isCollateralEnabled,\\r\\n            Errors.COLLATERAL_CANNOT_BE_LIQUIDATED\\r\\n        );\\r\\n        require(\\r\\n            params.totalDebt != 0,\\r\\n            Errors.SPECIFIED_CURRENCY_NOT_BORROWED_BY_USER\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Validates the health factor of a user.\\r\\n     * @param reservesData The state of all the reserves\\r\\n     * @param reservesList The addresses of all the active reserves\\r\\n     * @param eModeCategories The configuration of all the efficiency mode categories\\r\\n     * @param userConfig The state of the user for the specific reserve\\r\\n     * @param user The user to validate health factor of\\r\\n     * @param userEModeCategory The users active efficiency mode category\\r\\n     * @param reservesCount The number of available reserves\\r\\n     * @param oracle The price oracle\\r\\n     */\\r\\n    function validateHealthFactor(\\r\\n        mapping(address => DataTypes.ReserveData) storage reservesData,\\r\\n        mapping(uint256 => address) storage reservesList,\\r\\n        mapping(uint8 => DataTypes.EModeCategory) storage eModeCategories,\\r\\n        DataTypes.UserConfigurationMap memory userConfig,\\r\\n        address user,\\r\\n        uint8 userEModeCategory,\\r\\n        uint256 reservesCount,\\r\\n        address oracle\\r\\n    ) internal view returns (uint256, bool) {\\r\\n        (, , , , uint256 healthFactor, bool hasZeroLtvCollateral) = GenericLogic\\r\\n            .calculateUserAccountData(\\r\\n                reservesData,\\r\\n                reservesList,\\r\\n                eModeCategories,\\r\\n                DataTypes.CalculateUserAccountDataParams({\\r\\n                    userConfig: userConfig,\\r\\n                    reservesCount: reservesCount,\\r\\n                    user: user,\\r\\n                    oracle: oracle,\\r\\n                    userEModeCategory: userEModeCategory\\r\\n                })\\r\\n            );\\r\\n\\r\\n        require(\\r\\n            healthFactor >= HEALTH_FACTOR_LIQUIDATION_THRESHOLD,\\r\\n            Errors.HEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD\\r\\n        );\\r\\n\\r\\n        return (healthFactor, hasZeroLtvCollateral);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Validates the health factor of a user and the ltv of the asset being withdrawn.\\r\\n     * @param reservesData The state of all the reserves\\r\\n     * @param reservesList The addresses of all the active reserves\\r\\n     * @param eModeCategories The configuration of all the efficiency mode categories\\r\\n     * @param userConfig The state of the user for the specific reserve\\r\\n     * @param asset The asset for which the ltv will be validated\\r\\n     * @param from The user from which the aTokens are being transferred\\r\\n     * @param reservesCount The number of available reserves\\r\\n     * @param oracle The price oracle\\r\\n     * @param userEModeCategory The users active efficiency mode category\\r\\n     */\\r\\n    function validateHFAndLtv(\\r\\n        mapping(address => DataTypes.ReserveData) storage reservesData,\\r\\n        mapping(uint256 => address) storage reservesList,\\r\\n        mapping(uint8 => DataTypes.EModeCategory) storage eModeCategories,\\r\\n        DataTypes.UserConfigurationMap memory userConfig,\\r\\n        address asset,\\r\\n        address from,\\r\\n        uint256 reservesCount,\\r\\n        address oracle,\\r\\n        uint8 userEModeCategory\\r\\n    ) internal view {\\r\\n        DataTypes.ReserveData memory reserve = reservesData[asset];\\r\\n\\r\\n        (, bool hasZeroLtvCollateral) = validateHealthFactor(\\r\\n            reservesData,\\r\\n            reservesList,\\r\\n            eModeCategories,\\r\\n            userConfig,\\r\\n            from,\\r\\n            userEModeCategory,\\r\\n            reservesCount,\\r\\n            oracle\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            !hasZeroLtvCollateral || reserve.configuration.getLtv() == 0,\\r\\n            Errors.LTV_VALIDATION_FAILED\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Validates a transfer action.\\r\\n     * @param reserve The reserve object\\r\\n     */\\r\\n    function validateTransfer(DataTypes.ReserveData storage reserve)\\r\\n        internal\\r\\n        view\\r\\n    {\\r\\n        require(!reserve.configuration.getPaused(), Errors.RESERVE_PAUSED);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Validates a drop reserve action.\\r\\n     * @param reservesList The addresses of all the active reserves\\r\\n     * @param reserve The reserve object\\r\\n     * @param asset The address of the reserve's underlying asset\\r\\n     **/\\r\\n    function validateDropReserve(\\r\\n        mapping(uint256 => address) storage reservesList,\\r\\n        DataTypes.ReserveData storage reserve,\\r\\n        address asset\\r\\n    ) internal view {\\r\\n        require(asset != address(0), Errors.ZERO_ADDRESS_NOT_VALID);\\r\\n        require(\\r\\n            reserve.id != 0 || reservesList[0] == asset,\\r\\n            Errors.ASSET_NOT_LISTED\\r\\n        );\\r\\n        require(\\r\\n            IERC20(reserve.stableDebtTokenAddress).totalSupply() == 0,\\r\\n            Errors.STABLE_DEBT_NOT_ZERO\\r\\n        );\\r\\n        require(\\r\\n            IERC20(reserve.variableDebtTokenAddress).totalSupply() == 0,\\r\\n            Errors.VARIABLE_DEBT_SUPPLY_NOT_ZERO\\r\\n        );\\r\\n        require(\\r\\n            IERC20(reserve.aTokenAddress).totalSupply() == 0,\\r\\n            Errors.ATOKEN_SUPPLY_NOT_ZERO\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Validates the action of setting efficiency mode.\\r\\n     * @param reservesData The state of all the reserves\\r\\n     * @param reservesList The addresses of all the active reserves\\r\\n     * @param eModeCategories a mapping storing configurations for all efficiency mode categories\\r\\n     * @param userConfig the user configuration\\r\\n     * @param reservesCount The total number of valid reserves\\r\\n     * @param categoryId The id of the category\\r\\n     **/\\r\\n    function validateSetUserEMode(\\r\\n        mapping(address => DataTypes.ReserveData) storage reservesData,\\r\\n        mapping(uint256 => address) storage reservesList,\\r\\n        mapping(uint8 => DataTypes.EModeCategory) storage eModeCategories,\\r\\n        DataTypes.UserConfigurationMap memory userConfig,\\r\\n        uint256 reservesCount,\\r\\n        uint8 categoryId\\r\\n    ) internal view {\\r\\n        // category is invalid if the liq threshold is not set\\r\\n        require(\\r\\n            categoryId == 0 ||\\r\\n                eModeCategories[categoryId].liquidationThreshold != 0,\\r\\n            Errors.INCONSISTENT_EMODE_CATEGORY\\r\\n        );\\r\\n\\r\\n        //eMode can always be enabled if the user hasn't supplied anything\\r\\n        if (userConfig.isEmpty()) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        // if user is trying to set another category than default we require that\\r\\n        // either the user is not borrowing, or it's borrowing assets of categoryId\\r\\n        if (categoryId != 0) {\\r\\n            unchecked {\\r\\n                for (uint256 i = 0; i < reservesCount; i++) {\\r\\n                    if (userConfig.isBorrowing(i)) {\\r\\n                        DataTypes.ReserveConfigurationMap\\r\\n                            memory configuration = reservesData[reservesList[i]]\\r\\n                                .configuration;\\r\\n                        require(\\r\\n                            configuration.getEModeCategory() == categoryId,\\r\\n                            Errors.INCONSISTENT_EMODE_CATEGORY\\r\\n                        );\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Validates if an asset can be activated as collateral in the following actions: supply, transfer,\\r\\n     * set as collateral, mint unbacked, and liquidate\\r\\n     * @dev This is used to ensure that the constraints for isolated assets are respected by all the actions that\\r\\n     * generate transfers of aTokens\\r\\n     * @param reservesData The state of all the reserves\\r\\n     * @param reservesList The addresses of all the active reserves\\r\\n     * @param userConfig the user configuration\\r\\n     * @param reserveConfig The reserve configuration\\r\\n     * @return True if the asset can be activated as collateral, false otherwise\\r\\n     **/\\r\\n    function validateUseAsCollateral(\\r\\n        mapping(address => DataTypes.ReserveData) storage reservesData,\\r\\n        mapping(uint256 => address) storage reservesList,\\r\\n        DataTypes.UserConfigurationMap storage userConfig,\\r\\n        DataTypes.ReserveConfigurationMap memory reserveConfig\\r\\n    ) internal view returns (bool) {\\r\\n        if (!userConfig.isUsingAsCollateralAny()) {\\r\\n            return true;\\r\\n        }\\r\\n        (bool isolationModeActive, , ) = userConfig.getIsolationModeState(\\r\\n            reservesData,\\r\\n            reservesList\\r\\n        );\\r\\n\\r\\n        return (!isolationModeActive && reserveConfig.getDebtCeiling() == 0);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x47b2cc1614e03864e4544a3c719f07332326006efa3e94fc0919148cc99b9570\",\"license\":\"BUSL-1.1\"},\"core-v3/contracts/protocol/libraries/math/MathUtils.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity 0.8.10;\\r\\n\\r\\nimport {WadRayMath} from \\\"./WadRayMath.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title MathUtils library\\r\\n * @author Aqualis\\r\\n * @notice Provides functions to perform linear and compounded interest calculations\\r\\n */\\r\\nlibrary MathUtils {\\r\\n    using WadRayMath for uint256;\\r\\n\\r\\n    /// @dev Ignoring leap years\\r\\n    uint256 internal constant SECONDS_PER_YEAR = 365 days;\\r\\n\\r\\n    /**\\r\\n     * @dev Function to calculate the interest accumulated using a linear interest rate formula\\r\\n     * @param rate The interest rate, in ray\\r\\n     * @param lastUpdateTimestamp The timestamp of the last update of the interest\\r\\n     * @return The interest rate linearly accumulated during the timeDelta, in ray\\r\\n     **/\\r\\n    function calculateLinearInterest(uint256 rate, uint40 lastUpdateTimestamp)\\r\\n        internal\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        //solium-disable-next-line\\r\\n        uint256 result = rate *\\r\\n            (block.timestamp - uint256(lastUpdateTimestamp));\\r\\n        unchecked {\\r\\n            result = result / SECONDS_PER_YEAR;\\r\\n        }\\r\\n\\r\\n        return WadRayMath.RAY + result;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Function to calculate the interest using a compounded interest rate formula\\r\\n     * To avoid expensive exponentiation, the calculation is performed using a binomial approximation:\\r\\n     *\\r\\n     *  (1+x)^n = 1+n*x+[n/2*(n-1)]*x^2+[n/6*(n-1)*(n-2)*x^3...\\r\\n     *\\r\\n     * The approximation slightly underpays liquidity providers and undercharges borrowers, with the advantage of great\\r\\n     * gas cost reductions. The whitepaper contains reference to the approximation and a table showing the margin of\\r\\n     * error per different time periods\\r\\n     *\\r\\n     * @param rate The interest rate, in ray\\r\\n     * @param lastUpdateTimestamp The timestamp of the last update of the interest\\r\\n     * @return The interest rate compounded during the timeDelta, in ray\\r\\n     **/\\r\\n    function calculateCompoundedInterest(\\r\\n        uint256 rate,\\r\\n        uint40 lastUpdateTimestamp,\\r\\n        uint256 currentTimestamp\\r\\n    ) internal pure returns (uint256) {\\r\\n        //solium-disable-next-line\\r\\n        uint256 exp = currentTimestamp - uint256(lastUpdateTimestamp);\\r\\n\\r\\n        if (exp == 0) {\\r\\n            return WadRayMath.RAY;\\r\\n        }\\r\\n\\r\\n        uint256 expMinusOne;\\r\\n        uint256 expMinusTwo;\\r\\n        uint256 basePowerTwo;\\r\\n        uint256 basePowerThree;\\r\\n        unchecked {\\r\\n            expMinusOne = exp - 1;\\r\\n\\r\\n            expMinusTwo = exp > 2 ? exp - 2 : 0;\\r\\n\\r\\n            basePowerTwo =\\r\\n                rate.rayMul(rate) /\\r\\n                (SECONDS_PER_YEAR * SECONDS_PER_YEAR);\\r\\n            basePowerThree = basePowerTwo.rayMul(rate) / SECONDS_PER_YEAR;\\r\\n        }\\r\\n\\r\\n        uint256 secondTerm = exp * expMinusOne * basePowerTwo;\\r\\n        unchecked {\\r\\n            secondTerm /= 2;\\r\\n        }\\r\\n        uint256 thirdTerm = exp * expMinusOne * expMinusTwo * basePowerThree;\\r\\n        unchecked {\\r\\n            thirdTerm /= 6;\\r\\n        }\\r\\n\\r\\n        return\\r\\n            WadRayMath.RAY +\\r\\n            (rate * exp) /\\r\\n            SECONDS_PER_YEAR +\\r\\n            secondTerm +\\r\\n            thirdTerm;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Calculates the compounded interest between the timestamp of the last update and the current block timestamp\\r\\n     * @param rate The interest rate (in ray)\\r\\n     * @param lastUpdateTimestamp The timestamp from which the interest accumulation needs to be calculated\\r\\n     * @return The interest rate compounded between lastUpdateTimestamp and current block timestamp, in ray\\r\\n     **/\\r\\n    function calculateCompoundedInterest(\\r\\n        uint256 rate,\\r\\n        uint40 lastUpdateTimestamp\\r\\n    ) internal view returns (uint256) {\\r\\n        return\\r\\n            calculateCompoundedInterest(\\r\\n                rate,\\r\\n                lastUpdateTimestamp,\\r\\n                block.timestamp\\r\\n            );\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x1546fca057bd7acb647328e79efde20e5ce58526d985c6374efdb9eb5b858a56\",\"license\":\"BUSL-1.1\"},\"core-v3/contracts/protocol/libraries/math/PercentageMath.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity 0.8.10;\\r\\n\\r\\n/**\\r\\n * @title PercentageMath library\\r\\n * @author Aqualis\\r\\n * @notice Provides functions to perform percentage calculations\\r\\n * @dev Percentages are defined by default with 2 decimals of precision (100.00). The precision is indicated by PERCENTAGE_FACTOR\\r\\n * @dev Operations are rounded. If a value is >=.5, will be rounded up, otherwise rounded down.\\r\\n **/\\r\\nlibrary PercentageMath {\\r\\n    // Maximum percentage factor (100.00%)\\r\\n    uint256 internal constant PERCENTAGE_FACTOR = 1e4;\\r\\n\\r\\n    // Half percentage factor (50.00%)\\r\\n    uint256 internal constant HALF_PERCENTAGE_FACTOR = 0.5e4;\\r\\n\\r\\n    /**\\r\\n     * @notice Executes a percentage multiplication\\r\\n     * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\r\\n     * @param value The value of which the percentage needs to be calculated\\r\\n     * @param percentage The percentage of the value to be calculated\\r\\n     * @return result value percentmul percentage\\r\\n     **/\\r\\n    function percentMul(uint256 value, uint256 percentage)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256 result)\\r\\n    {\\r\\n        // to avoid overflow, value <= (type(uint256).max - HALF_PERCENTAGE_FACTOR) / percentage\\r\\n        assembly {\\r\\n            if iszero(\\r\\n                or(\\r\\n                    iszero(percentage),\\r\\n                    iszero(\\r\\n                        gt(\\r\\n                            value,\\r\\n                            div(sub(not(0), HALF_PERCENTAGE_FACTOR), percentage)\\r\\n                        )\\r\\n                    )\\r\\n                )\\r\\n            ) {\\r\\n                revert(0, 0)\\r\\n            }\\r\\n\\r\\n            result := div(\\r\\n                add(mul(value, percentage), HALF_PERCENTAGE_FACTOR),\\r\\n                PERCENTAGE_FACTOR\\r\\n            )\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Executes a percentage division\\r\\n     * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\r\\n     * @param value The value of which the percentage needs to be calculated\\r\\n     * @param percentage The percentage of the value to be calculated\\r\\n     * @return result value percentdiv percentage\\r\\n     **/\\r\\n    function percentDiv(uint256 value, uint256 percentage)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256 result)\\r\\n    {\\r\\n        // to avoid overflow, value <= (type(uint256).max - halfPercentage) / PERCENTAGE_FACTOR\\r\\n        assembly {\\r\\n            if or(\\r\\n                iszero(percentage),\\r\\n                iszero(\\r\\n                    iszero(\\r\\n                        gt(\\r\\n                            value,\\r\\n                            div(\\r\\n                                sub(not(0), div(percentage, 2)),\\r\\n                                PERCENTAGE_FACTOR\\r\\n                            )\\r\\n                        )\\r\\n                    )\\r\\n                )\\r\\n            ) {\\r\\n                revert(0, 0)\\r\\n            }\\r\\n\\r\\n            result := div(\\r\\n                add(mul(value, PERCENTAGE_FACTOR), div(percentage, 2)),\\r\\n                percentage\\r\\n            )\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x6a057cd0c622f4b6a42521a1c553e7e87dac42d2a7c734afe00826e9702e54cd\",\"license\":\"BUSL-1.1\"},\"core-v3/contracts/protocol/libraries/math/WadRayMath.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity 0.8.10;\\r\\n\\r\\n/**\\r\\n * @title WadRayMath library\\r\\n * @author Aqualis\\r\\n * @notice Provides functions to perform calculations with Wad and Ray units\\r\\n * @dev Provides mul and div function for wads (decimal numbers with 18 digits of precision) and rays (decimal numbers\\r\\n * with 27 digits of precision)\\r\\n * @dev Operations are rounded. If a value is >=.5, will be rounded up, otherwise rounded down.\\r\\n **/\\r\\nlibrary WadRayMath {\\r\\n    // HALF_WAD and HALF_RAY expressed with extended notation as constant with operations are not supported in Yul assembly\\r\\n    uint256 internal constant WAD = 1e18;\\r\\n    uint256 internal constant HALF_WAD = 0.5e18;\\r\\n\\r\\n    uint256 internal constant RAY = 1e27;\\r\\n    uint256 internal constant HALF_RAY = 0.5e27;\\r\\n\\r\\n    uint256 internal constant WAD_RAY_RATIO = 1e9;\\r\\n\\r\\n    /**\\r\\n     * @dev Multiplies two wad, rounding half up to the nearest wad\\r\\n     * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\r\\n     * @param a Wad\\r\\n     * @param b Wad\\r\\n     * @return c = a*b, in wad\\r\\n     **/\\r\\n    function wadMul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\r\\n        // to avoid overflow, a <= (type(uint256).max - HALF_WAD) / b\\r\\n        assembly {\\r\\n            if iszero(\\r\\n                or(iszero(b), iszero(gt(a, div(sub(not(0), HALF_WAD), b))))\\r\\n            ) {\\r\\n                revert(0, 0)\\r\\n            }\\r\\n\\r\\n            c := div(add(mul(a, b), HALF_WAD), WAD)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Divides two wad, rounding half up to the nearest wad\\r\\n     * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\r\\n     * @param a Wad\\r\\n     * @param b Wad\\r\\n     * @return c = a/b, in wad\\r\\n     **/\\r\\n    function wadDiv(uint256 a, uint256 b) internal pure returns (uint256 c) {\\r\\n        // to avoid overflow, a <= (type(uint256).max - halfB) / WAD\\r\\n        assembly {\\r\\n            if or(\\r\\n                iszero(b),\\r\\n                iszero(iszero(gt(a, div(sub(not(0), div(b, 2)), WAD))))\\r\\n            ) {\\r\\n                revert(0, 0)\\r\\n            }\\r\\n\\r\\n            c := div(add(mul(a, WAD), div(b, 2)), b)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Multiplies two ray, rounding half up to the nearest ray\\r\\n     * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\r\\n     * @param a Ray\\r\\n     * @param b Ray\\r\\n     * @return c = a raymul b\\r\\n     **/\\r\\n    function rayMul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\r\\n        // to avoid overflow, a <= (type(uint256).max - HALF_RAY) / b\\r\\n        assembly {\\r\\n            if iszero(\\r\\n                or(iszero(b), iszero(gt(a, div(sub(not(0), HALF_RAY), b))))\\r\\n            ) {\\r\\n                revert(0, 0)\\r\\n            }\\r\\n\\r\\n            c := div(add(mul(a, b), HALF_RAY), RAY)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Divides two ray, rounding half up to the nearest ray\\r\\n     * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\r\\n     * @param a Ray\\r\\n     * @param b Ray\\r\\n     * @return c = a raydiv b\\r\\n     **/\\r\\n    function rayDiv(uint256 a, uint256 b) internal pure returns (uint256 c) {\\r\\n        // to avoid overflow, a <= (type(uint256).max - halfB) / RAY\\r\\n        assembly {\\r\\n            if or(\\r\\n                iszero(b),\\r\\n                iszero(iszero(gt(a, div(sub(not(0), div(b, 2)), RAY))))\\r\\n            ) {\\r\\n                revert(0, 0)\\r\\n            }\\r\\n\\r\\n            c := div(add(mul(a, RAY), div(b, 2)), b)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Casts ray down to wad\\r\\n     * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\r\\n     * @param a Ray\\r\\n     * @return b = a converted to wad, rounded half up to the nearest wad\\r\\n     **/\\r\\n    function rayToWad(uint256 a) internal pure returns (uint256 b) {\\r\\n        assembly {\\r\\n            b := div(a, WAD_RAY_RATIO)\\r\\n            let remainder := mod(a, WAD_RAY_RATIO)\\r\\n            if iszero(lt(remainder, div(WAD_RAY_RATIO, 2))) {\\r\\n                b := add(b, 1)\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts wad up to ray\\r\\n     * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\r\\n     * @param a Wad\\r\\n     * @return b = a converted in ray\\r\\n     **/\\r\\n    function wadToRay(uint256 a) internal pure returns (uint256 b) {\\r\\n        // to avoid overflow, b/WAD_RAY_RATIO == a\\r\\n        assembly {\\r\\n            b := mul(a, WAD_RAY_RATIO)\\r\\n\\r\\n            if iszero(eq(div(b, WAD_RAY_RATIO), a)) {\\r\\n                revert(0, 0)\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x8e85729fdfc7ddeed27d06881711a6b7d0858bb0b9e2d8c099caeafa56a54816\",\"license\":\"BUSL-1.1\"},\"core-v3/contracts/protocol/libraries/types/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity 0.8.10;\\r\\n\\r\\nlibrary DataTypes {\\r\\n  struct ReserveData {\\r\\n    //stores the reserve configuration\\r\\n    ReserveConfigurationMap configuration;\\r\\n    //the liquidity index. Expressed in ray\\r\\n    uint128 liquidityIndex;\\r\\n    //the current supply rate. Expressed in ray\\r\\n    uint128 currentLiquidityRate;\\r\\n    //variable borrow index. Expressed in ray\\r\\n    uint128 variableBorrowIndex;\\r\\n    //the current variable borrow rate. Expressed in ray\\r\\n    uint128 currentVariableBorrowRate;\\r\\n    //the current stable borrow rate. Expressed in ray\\r\\n    uint128 currentStableBorrowRate;\\r\\n    //timestamp of last update\\r\\n    uint40 lastUpdateTimestamp;\\r\\n    //the id of the reserve. Represents the position in the list of the active reserves\\r\\n    uint16 id;\\r\\n    //aToken address\\r\\n    address aTokenAddress;\\r\\n    //stableDebtToken address\\r\\n    address stableDebtTokenAddress;\\r\\n    //variableDebtToken address\\r\\n    address variableDebtTokenAddress;\\r\\n    //address of the interest rate strategy\\r\\n    address interestRateStrategyAddress;\\r\\n    //the current treasury balance, scaled\\r\\n    uint128 accruedToTreasury;\\r\\n    //the outstanding unbacked aTokens minted through the bridging feature\\r\\n    uint128 unbacked;\\r\\n    //the outstanding debt borrowed against this asset in isolation mode\\r\\n    uint128 isolationModeTotalDebt;\\r\\n  }\\r\\n\\r\\n  struct ReserveConfigurationMap {\\r\\n    //bit 0-15: LTV\\r\\n    //bit 16-31: Liq. threshold\\r\\n    //bit 32-47: Liq. bonus\\r\\n    //bit 48-55: Decimals\\r\\n    //bit 56: reserve is active\\r\\n    //bit 57: reserve is frozen\\r\\n    //bit 58: borrowing is enabled\\r\\n    //bit 59: stable rate borrowing enabled\\r\\n    //bit 60: asset is paused\\r\\n    //bit 61: borrowing in isolation mode is enabled\\r\\n    //bit 62-63: reserved\\r\\n    //bit 64-79: reserve factor\\r\\n    //bit 80-115 borrow cap in whole tokens, borrowCap == 0 => no cap\\r\\n    //bit 116-151 supply cap in whole tokens, supplyCap == 0 => no cap\\r\\n    //bit 152-167 liquidation protocol fee\\r\\n    //bit 168-175 eMode category\\r\\n    //bit 176-211 unbacked mint cap in whole tokens, unbackedMintCap == 0 => minting disabled\\r\\n    //bit 212-251 debt ceiling for isolation mode with (ReserveConfiguration::DEBT_CEILING_DECIMALS) decimals\\r\\n    //bit 252-255 unused\\r\\n\\r\\n    uint256 data;\\r\\n  }\\r\\n\\r\\n  struct UserConfigurationMap {\\r\\n    /**\\r\\n     * @dev Bitmap of the users collaterals and borrows. It is divided in pairs of bits, one pair per asset.\\r\\n     * The first bit indicates if an asset is used as collateral by the user, the second whether an\\r\\n     * asset is borrowed by the user.\\r\\n     */\\r\\n    uint256 data;\\r\\n  }\\r\\n\\r\\n  struct EModeCategory {\\r\\n    // each eMode category has a custom ltv and liquidation threshold\\r\\n    uint16 ltv;\\r\\n    uint16 liquidationThreshold;\\r\\n    uint16 liquidationBonus;\\r\\n    // each eMode category may or may not have a custom oracle to override the individual assets price oracles\\r\\n    address priceSource;\\r\\n    string label;\\r\\n  }\\r\\n\\r\\n  enum InterestRateMode {\\r\\n    NONE,\\r\\n    STABLE,\\r\\n    VARIABLE\\r\\n  }\\r\\n\\r\\n  struct ReserveCache {\\r\\n    uint256 currScaledVariableDebt;\\r\\n    uint256 nextScaledVariableDebt;\\r\\n    uint256 currPrincipalStableDebt;\\r\\n    uint256 currAvgStableBorrowRate;\\r\\n    uint256 currTotalStableDebt;\\r\\n    uint256 nextAvgStableBorrowRate;\\r\\n    uint256 nextTotalStableDebt;\\r\\n    uint256 currLiquidityIndex;\\r\\n    uint256 nextLiquidityIndex;\\r\\n    uint256 currVariableBorrowIndex;\\r\\n    uint256 nextVariableBorrowIndex;\\r\\n    uint256 currLiquidityRate;\\r\\n    uint256 currVariableBorrowRate;\\r\\n    uint256 reserveFactor;\\r\\n    ReserveConfigurationMap reserveConfiguration;\\r\\n    address aTokenAddress;\\r\\n    address stableDebtTokenAddress;\\r\\n    address variableDebtTokenAddress;\\r\\n    uint40 reserveLastUpdateTimestamp;\\r\\n    uint40 stableDebtLastUpdateTimestamp;\\r\\n  }\\r\\n\\r\\n  struct ExecuteLiquidationCallParams {\\r\\n    uint256 reservesCount;\\r\\n    uint256 debtToCover;\\r\\n    address collateralAsset;\\r\\n    address debtAsset;\\r\\n    address user;\\r\\n    bool receiveAToken;\\r\\n    address priceOracle;\\r\\n    uint8 userEModeCategory;\\r\\n    address priceOracleSentinel;\\r\\n  }\\r\\n\\r\\n  struct ExecuteSupplyParams {\\r\\n    address asset;\\r\\n    uint256 amount;\\r\\n    address onBehalfOf;\\r\\n    uint16 referralCode;\\r\\n  }\\r\\n\\r\\n  struct ExecuteBorrowParams {\\r\\n    address asset;\\r\\n    address user;\\r\\n    address onBehalfOf;\\r\\n    uint256 amount;\\r\\n    InterestRateMode interestRateMode;\\r\\n    uint16 referralCode;\\r\\n    bool releaseUnderlying;\\r\\n    uint256 maxStableRateBorrowSizePercent;\\r\\n    uint256 reservesCount;\\r\\n    address oracle;\\r\\n    uint8 userEModeCategory;\\r\\n    address priceOracleSentinel;\\r\\n  }\\r\\n\\r\\n  struct ExecuteRepayParams {\\r\\n    address asset;\\r\\n    uint256 amount;\\r\\n    InterestRateMode interestRateMode;\\r\\n    address onBehalfOf;\\r\\n    bool useATokens;\\r\\n  }\\r\\n\\r\\n  struct ExecuteWithdrawParams {\\r\\n    address asset;\\r\\n    uint256 amount;\\r\\n    address to;\\r\\n    uint256 reservesCount;\\r\\n    address oracle;\\r\\n    uint8 userEModeCategory;\\r\\n  }\\r\\n\\r\\n  struct ExecuteSetUserEModeParams {\\r\\n    uint256 reservesCount;\\r\\n    address oracle;\\r\\n    uint8 categoryId;\\r\\n  }\\r\\n\\r\\n  struct FinalizeTransferParams {\\r\\n    address asset;\\r\\n    address from;\\r\\n    address to;\\r\\n    uint256 amount;\\r\\n    uint256 balanceFromBefore;\\r\\n    uint256 balanceToBefore;\\r\\n    uint256 reservesCount;\\r\\n    address oracle;\\r\\n    uint8 fromEModeCategory;\\r\\n  }\\r\\n\\r\\n  struct FlashloanParams {\\r\\n    address receiverAddress;\\r\\n    address[] assets;\\r\\n    uint256[] amounts;\\r\\n    uint256[] interestRateModes;\\r\\n    address onBehalfOf;\\r\\n    bytes params;\\r\\n    uint16 referralCode;\\r\\n    uint256 flashLoanPremiumToProtocol;\\r\\n    uint256 flashLoanPremiumTotal;\\r\\n    uint256 maxStableRateBorrowSizePercent;\\r\\n    uint256 reservesCount;\\r\\n    address addressesProvider;\\r\\n    uint8 userEModeCategory;\\r\\n    bool isAuthorizedFlashBorrower;\\r\\n  }\\r\\n\\r\\n  struct FlashloanSimpleParams {\\r\\n    address receiverAddress;\\r\\n    address asset;\\r\\n    uint256 amount;\\r\\n    bytes params;\\r\\n    uint16 referralCode;\\r\\n    uint256 flashLoanPremiumToProtocol;\\r\\n    uint256 flashLoanPremiumTotal;\\r\\n  }\\r\\n\\r\\n  struct FlashLoanRepaymentParams {\\r\\n    uint256 amount;\\r\\n    uint256 totalPremium;\\r\\n    uint256 flashLoanPremiumToProtocol;\\r\\n    address asset;\\r\\n    address receiverAddress;\\r\\n    uint16 referralCode;\\r\\n  }\\r\\n\\r\\n  struct CalculateUserAccountDataParams {\\r\\n    UserConfigurationMap userConfig;\\r\\n    uint256 reservesCount;\\r\\n    address user;\\r\\n    address oracle;\\r\\n    uint8 userEModeCategory;\\r\\n  }\\r\\n\\r\\n  struct ValidateBorrowParams {\\r\\n    ReserveCache reserveCache;\\r\\n    UserConfigurationMap userConfig;\\r\\n    address asset;\\r\\n    address userAddress;\\r\\n    uint256 amount;\\r\\n    InterestRateMode interestRateMode;\\r\\n    uint256 maxStableLoanPercent;\\r\\n    uint256 reservesCount;\\r\\n    address oracle;\\r\\n    uint8 userEModeCategory;\\r\\n    address priceOracleSentinel;\\r\\n    bool isolationModeActive;\\r\\n    address isolationModeCollateralAddress;\\r\\n    uint256 isolationModeDebtCeiling;\\r\\n  }\\r\\n\\r\\n  struct ValidateLiquidationCallParams {\\r\\n    ReserveCache debtReserveCache;\\r\\n    uint256 totalDebt;\\r\\n    uint256 healthFactor;\\r\\n    address priceOracleSentinel;\\r\\n  }\\r\\n\\r\\n  struct CalculateInterestRatesParams {\\r\\n    uint256 unbacked;\\r\\n    uint256 liquidityAdded;\\r\\n    uint256 liquidityTaken;\\r\\n    uint256 totalStableDebt;\\r\\n    uint256 totalVariableDebt;\\r\\n    uint256 averageStableBorrowRate;\\r\\n    uint256 reserveFactor;\\r\\n    address reserve;\\r\\n    address aToken;\\r\\n  }\\r\\n\\r\\n  struct InitReserveParams {\\r\\n    address asset;\\r\\n    address aTokenAddress;\\r\\n    address stableDebtAddress;\\r\\n    address variableDebtAddress;\\r\\n    address interestRateStrategyAddress;\\r\\n    uint16 reservesCount;\\r\\n    uint16 maxNumberReserves;\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x2b24b9915b58cd37fcecf8e291093a8a8af188cb36a6aebc2d72e14aa8689ec6\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x611fff61003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100405760003560e01c80630413c86f146100455780638e74324814610067575b600080fd5b81801561005157600080fd5b50610065610060366004611b51565b610087565b005b81801561007357600080fd5b50610065610082366004611bc6565b6103de565b73ffffffffffffffffffffffffffffffffffffffff84166000908152602088905260408120906100b68261069a565b90506100c282826108a3565b6100cc81866108bb565b6101c08101515160b081901c640fffffffff169060301c60ff1660006100f188610c15565b60088601805460109061012b90849070010000000000000000000000000000000090046fffffffffffffffffffffffffffffffff16611c3b565b92506101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790556fffffffffffffffffffffffffffffffff16905081600a6101819190611d8f565b61018b9084611d9b565b8111156040518060400160405280600281526020017f353200000000000000000000000000000000000000000000000000000000000081525090610205576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101fc9190611dd8565b60405180910390fd5b5061021485858b600080610cbb565b6101e08401516101008501516040517fb3f1c93d00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff8a81166024830152604482018c90526064820192909252600092919091169063b3f1c93d906084016020604051808303816000875af11580156102a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102cc9190611e4b565b90508015610373576102e58d8d8d886101c0015161103b565b15610373576003860154610319908c907501000000000000000000000000000000000000000000900461ffff1660016110c1565b8773ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff167e058a56ea94653cdf4f152d227ace22d4c00ad99e2a43f58cb7d9e3feb295f260405160405180910390a35b60408051338152602081018b905261ffff89169173ffffffffffffffffffffffffffffffffffffffff808c1692908e16917ff25af37b3d3ec226063dc9bdc103ece7eb110a50f340fe854bb7bc1b0676d7d0910160405180910390a450505050505050505050505050565b60006103e98661069a565b90506103f586826108a3565b600886015460009070010000000000000000000000000000000090046fffffffffffffffffffffffffffffffff16851061045957600887015470010000000000000000000000000000000090046fffffffffffffffffffffffffffffffff1661045b565b845b905060006104698585611158565b905060006104778287611e6d565b905060006104858785611e84565b9050610506856101e0015173ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104fe9190611e9c565b8b908461119b565b61010086018190526105229061051d908590611245565b610c15565b60088b0180546000906105489084906fffffffffffffffffffffffffffffffff16611c3b565b92506101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555061058784610c15565b60088b0180546010906105c190849070010000000000000000000000000000000090046fffffffffffffffffffffffffffffffff16611eb5565b92506101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff160217905550610611858a8360008e610cbb90949392919063ffffffff16565b6101e085015161063b9073ffffffffffffffffffffffffffffffffffffffff8b1690339084611284565b6040805185815260208101899052339173ffffffffffffffffffffffffffffffffffffffff8c16917f281596e92b2d974beb7d4f124df30a0b39067b096893e95011ce4bdad798b759910160405180910390a350505050505050505050565b6106a2611a80565b6106aa611a80565b60408051602081018252845481526101c0830181905251901c61ffff166101a082015260018301546fffffffffffffffffffffffffffffffff80821660e084015260028501548082166101208501527001000000000000000000000000000000009283900482166101608501528290041661018083015260048085015473ffffffffffffffffffffffffffffffffffffffff9081166101e085015260058601548116610200850152600686015416610220840181905260038601549290920464ffffffffff16610240840152604080517fb1bf962d000000000000000000000000000000000000000000000000000000008152905163b1bf962d928281019260209291908290030181865afa1580156107c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107eb9190611e9c565b816020018181525081600001818152505080610200015173ffffffffffffffffffffffffffffffffffffffff1663797743386040518163ffffffff1660e01b8152600401608060405180830381865afa15801561084c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108709190611ee6565b64ffffffffff166102608501526060840181905260808401829052604084019290925260c083015260a082015292915050565b6108ad8282611366565b6108b782826114e2565b5050565b60408051808201909152600281527f3236000000000000000000000000000000000000000000000000000000000000602082015281610927576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101fc9190611dd8565b50600080600061097e856101c0015151670100000000000000811615159167020000000000000082161515916704000000000000008116151591670800000000000000821615159167100000000000000016151590565b9450505092509250826040518060400160405280600281526020017f3237000000000000000000000000000000000000000000000000000000000000815250906109f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101fc9190611dd8565b5060408051808201909152600281527f323900000000000000000000000000000000000000000000000000000000000060208201528115610a63576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101fc9190611dd8565b5060408051808201909152600281527f323800000000000000000000000000000000000000000000000000000000000060208201528215610ad1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101fc9190611dd8565b506101c08501515160741c640fffffffff16801580610b9e57506101c08601515160301c60ff16610b0390600a611d8f565b610b0d9082611d9b565b85610b91886101000151896101e0015173ffffffffffffffffffffffffffffffffffffffff1663b1bf962d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b67573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b8b9190611e9c565b90611662565b610b9b9190611e84565b11155b6040518060400160405280600281526020017f353100000000000000000000000000000000000000000000000000000000000081525090610c0c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101fc9190611dd8565b50505050505050565b60006fffffffffffffffffffffffffffffffff821115610cb7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203160448201527f323820626974730000000000000000000000000000000000000000000000000060648201526084016101fc565b5090565b610ce66040518060800160405280600081526020016000815260200160008152602001600081525090565b6101408501516020860151610cfa91611662565b606082015260078601546040805161012081019091526101c08701515173ffffffffffffffffffffffffffffffffffffffff9092169163a58987099190819060b01c640fffffffff16610d4e576000610d7a565b60088a015470010000000000000000000000000000000090046fffffffffffffffffffffffffffffffff165b6fffffffffffffffffffffffffffffffff1681526020018681526020018581526020018860c001518152602001846060015181526020018860a001518152602001886101a0015181526020018773ffffffffffffffffffffffffffffffffffffffff168152602001886101e0015173ffffffffffffffffffffffffffffffffffffffff168152506040518263ffffffff1660e01b8152600401610e9a9190600061012082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015173ffffffffffffffffffffffffffffffffffffffff80821660e0850152610100915080828601511682850152505092915050565b606060405180830381865afa158015610eb7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610edb9190611f31565b60408401526020830152808252610ef190610c15565b6001870180546fffffffffffffffffffffffffffffffff9283167001000000000000000000000000000000000292169190911790556020810151610f3490610c15565b6003870180547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166fffffffffffffffffffffffffffffffff929092169190911790556040810151610f8590610c15565b6002870180546fffffffffffffffffffffffffffffffff92831670010000000000000000000000000000000002921691909117905580516020808301516040808501516101008a01516101408b0151835196875294860193909352908401526060830152608082015273ffffffffffffffffffffffffffffffffffffffff8516907f804c9b842b2748a22bb64b345453a3de7ca54a6ca45ce00d415894979e22897a9060a00160405180910390a2505050505050565b60408051602081019091528254908190526000907faaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa1661107d575060016110b9565b60408051602081019091528354815260009061109a9087876116b9565b50509050801580156110b55750825160d41c64ffffffffff16155b9150505b949350505050565b60408051808201909152600281527f3734000000000000000000000000000000000000000000000000000000000000602082015260808310611130576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101fc9190611dd8565b50600182811b81011b811561114a57835481178455611152565b835481191684555b50505050565b600081157fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec778390048411151761118d57600080fd5b506127109102611388010490565b600183015460009081906111ed906fffffffffffffffffffffffffffffffff166b033b2e3c9fd0803ce80000006111e36111d488611771565b6111dd88611771565b90611245565b610b8b9190611e84565b90506111f881610c15565b6001860180547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166fffffffffffffffffffffffffffffffff9290921691909117905590505b9392505050565b600081156b033b2e3c9fd0803ce80000006002840419048411171561126957600080fd5b506b033b2e3c9fd0803ce80000009190910260028204010490565b6040517f23b872dd0000000000000000000000000000000000000000000000000000000080825273ffffffffffffffffffffffffffffffffffffffff8581166004840152841660248301526044820183905290600080606483828a5af16112ef573d6000803e3d6000fd5b506112f98561178c565b61135f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f475076323a206661696c6564207472616e7366657246726f6d0000000000000060448201526064016101fc565b5050505050565b60e08101516101008201526101208101516101408201526101608101511561149a57600061139e826101600151836102400151611858565b90506113b78260e001518261166290919063ffffffff16565b61010083018190526113c890610c15565b6001840180547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166fffffffffffffffffffffffffffffffff9290921691909117905581511561149857600061142883610180015184610240015161189f565b90506114428361012001518261166290919063ffffffff16565b610140840181905261145390610c15565b6002850180547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166fffffffffffffffffffffffffffffffff92909216919091179055505b505b5060030180547fffffffffffffffffffffff0000000000ffffffffffffffffffffffffffffffff167001000000000000000000000000000000004264ffffffffff1602179055565b61151b6040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6101a082015161152a57505050565b610120820151825161153b91611662565b6020820152610140820151825161155191611662565b6040820152606082015161026083015161024084015161157992919064ffffffffff166118a8565b60608201819052604083015161158e91611662565b8082526020820151608084015160408401516115aa9190611e84565b6115b49190611e6d565b6115be9190611e6d565b608082018190526101a08301516115d59190611158565b60a082018190521561165d5761160061051d8361010001518360a0015161124590919063ffffffff16565b6008840180546000906116269084906fffffffffffffffffffffffffffffffff16611c3b565b92506101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055505b505050565b600081157ffffffffffffffffffffffffffffffffffffffffffe6268e1b017bfe18bffffff8390048411151761169757600080fd5b506b033b2e3c9fd0803ce800000091026b019d971e4fe8401e74000000010490565b60008060006116c7866119ef565b1561175e5760006116f8877faaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa611a33565b6000818152602087815260408083205473ffffffffffffffffffffffffffffffffffffffff168084528a8352818420825193840190925290549182905292935060d41c64ffffffffff169050801561175a576001955090935091506117689050565b5050505b5060009150819050805b93509350939050565b633b9aca00818102908104821461178757600080fd5b919050565b60006117cc565b7f08c379a00000000000000000000000000000000000000000000000000000000060005260206004528060245250806044525060646000fd5b3d801561180b5760208114611845576118067f475076323a206d616c666f726d6564207472616e7366657220726573756c7400601f611793565b611852565b823b61183c5761183c7f475076323a206e6f74206120636f6e74726163740000000000000000000000006014611793565b60019150611852565b3d6000803e600051151591505b50919050565b60008061186c64ffffffffff841642611e6d565b6118769085611d9b565b6301e1338090049050611895816b033b2e3c9fd0803ce8000000611e84565b9150505b92915050565b600061123e8383425b6000806118bc64ffffffffff851684611e6d565b9050806118d8576b033b2e3c9fd0803ce800000091505061123e565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8101600080806002851161190e576000611913565b600285035b925066038882915c40006119278a80611662565b8161193457611934611f5f565b0491506301e13380611946838b611662565b8161195357611953611f5f565b0490506000826119638688611d9b565b61196d9190611d9b565b60029004905060008285611981888a611d9b565b61198b9190611d9b565b6119959190611d9b565b60069004905080826301e133806119ac8a8f611d9b565b6119b69190611f8e565b6119cc906b033b2e3c9fd0803ce8000000611e84565b6119d69190611e84565b6119e09190611e84565b9b9a5050505050505050505050565b80516000907faaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa16801580159061123e5750611a2b600182611e6d565b161592915050565b815160009082167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8101198116825b60029190911c908115611a7757600101611a62565b95945050505050565b6040518061028001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001611b046040518060200160405280600081525090565b815260006020820181905260408201819052606082018190526080820181905260a09091015290565b803573ffffffffffffffffffffffffffffffffffffffff8116811461178757600080fd5b600080600080600080600060e0888a031215611b6c57600080fd5b873596506020880135955060408801359450611b8a60608901611b2d565b935060808801359250611b9f60a08901611b2d565b915060c088013561ffff81168114611bb657600080fd5b8091505092959891949750929550565b600080600080600060a08688031215611bde57600080fd5b85359450611bee60208701611b2d565b94979496505050506040830135926060810135926080909101359150565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006fffffffffffffffffffffffffffffffff808316818516808303821115611c6657611c66611c0c565b01949350505050565b600181815b80851115611cc857817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821115611cae57611cae611c0c565b80851615611cbb57918102915b93841c9390800290611c74565b509250929050565b600082611cdf57506001611899565b81611cec57506000611899565b8160018114611d025760028114611d0c57611d28565b6001915050611899565b60ff841115611d1d57611d1d611c0c565b50506001821b611899565b5060208310610133831016604e8410600b8410161715611d4b575081810a611899565b611d558383611c6f565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821115611d8757611d87611c0c565b029392505050565b600061123e8383611cd0565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611dd357611dd3611c0c565b500290565b600060208083528351808285015260005b81811015611e0557858101830151858201604001528201611de9565b81811115611e17576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b600060208284031215611e5d57600080fd5b8151801515811461123e57600080fd5b600082821015611e7f57611e7f611c0c565b500390565b60008219821115611e9757611e97611c0c565b500190565b600060208284031215611eae57600080fd5b5051919050565b60006fffffffffffffffffffffffffffffffff83811690831681811015611ede57611ede611c0c565b039392505050565b60008060008060808587031215611efc57600080fd5b845193506020850151925060408501519150606085015164ffffffffff81168114611f2657600080fd5b939692955090935050565b600080600060608486031215611f4657600080fd5b8351925060208401519150604084015190509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600082611fc4577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b50049056fea2646970667358221220544d8a3c72f94636ebba7281751637a7467000c608de2d5fea7a1aa45b15b08464736f6c634300080a0033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100405760003560e01c80630413c86f146100455780638e74324814610067575b600080fd5b81801561005157600080fd5b50610065610060366004611b51565b610087565b005b81801561007357600080fd5b50610065610082366004611bc6565b6103de565b73ffffffffffffffffffffffffffffffffffffffff84166000908152602088905260408120906100b68261069a565b90506100c282826108a3565b6100cc81866108bb565b6101c08101515160b081901c640fffffffff169060301c60ff1660006100f188610c15565b60088601805460109061012b90849070010000000000000000000000000000000090046fffffffffffffffffffffffffffffffff16611c3b565b92506101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790556fffffffffffffffffffffffffffffffff16905081600a6101819190611d8f565b61018b9084611d9b565b8111156040518060400160405280600281526020017f353200000000000000000000000000000000000000000000000000000000000081525090610205576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101fc9190611dd8565b60405180910390fd5b5061021485858b600080610cbb565b6101e08401516101008501516040517fb3f1c93d00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff8a81166024830152604482018c90526064820192909252600092919091169063b3f1c93d906084016020604051808303816000875af11580156102a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102cc9190611e4b565b90508015610373576102e58d8d8d886101c0015161103b565b15610373576003860154610319908c907501000000000000000000000000000000000000000000900461ffff1660016110c1565b8773ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff167e058a56ea94653cdf4f152d227ace22d4c00ad99e2a43f58cb7d9e3feb295f260405160405180910390a35b60408051338152602081018b905261ffff89169173ffffffffffffffffffffffffffffffffffffffff808c1692908e16917ff25af37b3d3ec226063dc9bdc103ece7eb110a50f340fe854bb7bc1b0676d7d0910160405180910390a450505050505050505050505050565b60006103e98661069a565b90506103f586826108a3565b600886015460009070010000000000000000000000000000000090046fffffffffffffffffffffffffffffffff16851061045957600887015470010000000000000000000000000000000090046fffffffffffffffffffffffffffffffff1661045b565b845b905060006104698585611158565b905060006104778287611e6d565b905060006104858785611e84565b9050610506856101e0015173ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104fe9190611e9c565b8b908461119b565b61010086018190526105229061051d908590611245565b610c15565b60088b0180546000906105489084906fffffffffffffffffffffffffffffffff16611c3b565b92506101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555061058784610c15565b60088b0180546010906105c190849070010000000000000000000000000000000090046fffffffffffffffffffffffffffffffff16611eb5565b92506101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff160217905550610611858a8360008e610cbb90949392919063ffffffff16565b6101e085015161063b9073ffffffffffffffffffffffffffffffffffffffff8b1690339084611284565b6040805185815260208101899052339173ffffffffffffffffffffffffffffffffffffffff8c16917f281596e92b2d974beb7d4f124df30a0b39067b096893e95011ce4bdad798b759910160405180910390a350505050505050505050565b6106a2611a80565b6106aa611a80565b60408051602081018252845481526101c0830181905251901c61ffff166101a082015260018301546fffffffffffffffffffffffffffffffff80821660e084015260028501548082166101208501527001000000000000000000000000000000009283900482166101608501528290041661018083015260048085015473ffffffffffffffffffffffffffffffffffffffff9081166101e085015260058601548116610200850152600686015416610220840181905260038601549290920464ffffffffff16610240840152604080517fb1bf962d000000000000000000000000000000000000000000000000000000008152905163b1bf962d928281019260209291908290030181865afa1580156107c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107eb9190611e9c565b816020018181525081600001818152505080610200015173ffffffffffffffffffffffffffffffffffffffff1663797743386040518163ffffffff1660e01b8152600401608060405180830381865afa15801561084c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108709190611ee6565b64ffffffffff166102608501526060840181905260808401829052604084019290925260c083015260a082015292915050565b6108ad8282611366565b6108b782826114e2565b5050565b60408051808201909152600281527f3236000000000000000000000000000000000000000000000000000000000000602082015281610927576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101fc9190611dd8565b50600080600061097e856101c0015151670100000000000000811615159167020000000000000082161515916704000000000000008116151591670800000000000000821615159167100000000000000016151590565b9450505092509250826040518060400160405280600281526020017f3237000000000000000000000000000000000000000000000000000000000000815250906109f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101fc9190611dd8565b5060408051808201909152600281527f323900000000000000000000000000000000000000000000000000000000000060208201528115610a63576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101fc9190611dd8565b5060408051808201909152600281527f323800000000000000000000000000000000000000000000000000000000000060208201528215610ad1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101fc9190611dd8565b506101c08501515160741c640fffffffff16801580610b9e57506101c08601515160301c60ff16610b0390600a611d8f565b610b0d9082611d9b565b85610b91886101000151896101e0015173ffffffffffffffffffffffffffffffffffffffff1663b1bf962d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b67573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b8b9190611e9c565b90611662565b610b9b9190611e84565b11155b6040518060400160405280600281526020017f353100000000000000000000000000000000000000000000000000000000000081525090610c0c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101fc9190611dd8565b50505050505050565b60006fffffffffffffffffffffffffffffffff821115610cb7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203160448201527f323820626974730000000000000000000000000000000000000000000000000060648201526084016101fc565b5090565b610ce66040518060800160405280600081526020016000815260200160008152602001600081525090565b6101408501516020860151610cfa91611662565b606082015260078601546040805161012081019091526101c08701515173ffffffffffffffffffffffffffffffffffffffff9092169163a58987099190819060b01c640fffffffff16610d4e576000610d7a565b60088a015470010000000000000000000000000000000090046fffffffffffffffffffffffffffffffff165b6fffffffffffffffffffffffffffffffff1681526020018681526020018581526020018860c001518152602001846060015181526020018860a001518152602001886101a0015181526020018773ffffffffffffffffffffffffffffffffffffffff168152602001886101e0015173ffffffffffffffffffffffffffffffffffffffff168152506040518263ffffffff1660e01b8152600401610e9a9190600061012082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015173ffffffffffffffffffffffffffffffffffffffff80821660e0850152610100915080828601511682850152505092915050565b606060405180830381865afa158015610eb7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610edb9190611f31565b60408401526020830152808252610ef190610c15565b6001870180546fffffffffffffffffffffffffffffffff9283167001000000000000000000000000000000000292169190911790556020810151610f3490610c15565b6003870180547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166fffffffffffffffffffffffffffffffff929092169190911790556040810151610f8590610c15565b6002870180546fffffffffffffffffffffffffffffffff92831670010000000000000000000000000000000002921691909117905580516020808301516040808501516101008a01516101408b0151835196875294860193909352908401526060830152608082015273ffffffffffffffffffffffffffffffffffffffff8516907f804c9b842b2748a22bb64b345453a3de7ca54a6ca45ce00d415894979e22897a9060a00160405180910390a2505050505050565b60408051602081019091528254908190526000907faaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa1661107d575060016110b9565b60408051602081019091528354815260009061109a9087876116b9565b50509050801580156110b55750825160d41c64ffffffffff16155b9150505b949350505050565b60408051808201909152600281527f3734000000000000000000000000000000000000000000000000000000000000602082015260808310611130576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101fc9190611dd8565b50600182811b81011b811561114a57835481178455611152565b835481191684555b50505050565b600081157fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec778390048411151761118d57600080fd5b506127109102611388010490565b600183015460009081906111ed906fffffffffffffffffffffffffffffffff166b033b2e3c9fd0803ce80000006111e36111d488611771565b6111dd88611771565b90611245565b610b8b9190611e84565b90506111f881610c15565b6001860180547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166fffffffffffffffffffffffffffffffff9290921691909117905590505b9392505050565b600081156b033b2e3c9fd0803ce80000006002840419048411171561126957600080fd5b506b033b2e3c9fd0803ce80000009190910260028204010490565b6040517f23b872dd0000000000000000000000000000000000000000000000000000000080825273ffffffffffffffffffffffffffffffffffffffff8581166004840152841660248301526044820183905290600080606483828a5af16112ef573d6000803e3d6000fd5b506112f98561178c565b61135f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f475076323a206661696c6564207472616e7366657246726f6d0000000000000060448201526064016101fc565b5050505050565b60e08101516101008201526101208101516101408201526101608101511561149a57600061139e826101600151836102400151611858565b90506113b78260e001518261166290919063ffffffff16565b61010083018190526113c890610c15565b6001840180547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166fffffffffffffffffffffffffffffffff9290921691909117905581511561149857600061142883610180015184610240015161189f565b90506114428361012001518261166290919063ffffffff16565b610140840181905261145390610c15565b6002850180547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166fffffffffffffffffffffffffffffffff92909216919091179055505b505b5060030180547fffffffffffffffffffffff0000000000ffffffffffffffffffffffffffffffff167001000000000000000000000000000000004264ffffffffff1602179055565b61151b6040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6101a082015161152a57505050565b610120820151825161153b91611662565b6020820152610140820151825161155191611662565b6040820152606082015161026083015161024084015161157992919064ffffffffff166118a8565b60608201819052604083015161158e91611662565b8082526020820151608084015160408401516115aa9190611e84565b6115b49190611e6d565b6115be9190611e6d565b608082018190526101a08301516115d59190611158565b60a082018190521561165d5761160061051d8361010001518360a0015161124590919063ffffffff16565b6008840180546000906116269084906fffffffffffffffffffffffffffffffff16611c3b565b92506101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055505b505050565b600081157ffffffffffffffffffffffffffffffffffffffffffe6268e1b017bfe18bffffff8390048411151761169757600080fd5b506b033b2e3c9fd0803ce800000091026b019d971e4fe8401e74000000010490565b60008060006116c7866119ef565b1561175e5760006116f8877faaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa611a33565b6000818152602087815260408083205473ffffffffffffffffffffffffffffffffffffffff168084528a8352818420825193840190925290549182905292935060d41c64ffffffffff169050801561175a576001955090935091506117689050565b5050505b5060009150819050805b93509350939050565b633b9aca00818102908104821461178757600080fd5b919050565b60006117cc565b7f08c379a00000000000000000000000000000000000000000000000000000000060005260206004528060245250806044525060646000fd5b3d801561180b5760208114611845576118067f475076323a206d616c666f726d6564207472616e7366657220726573756c7400601f611793565b611852565b823b61183c5761183c7f475076323a206e6f74206120636f6e74726163740000000000000000000000006014611793565b60019150611852565b3d6000803e600051151591505b50919050565b60008061186c64ffffffffff841642611e6d565b6118769085611d9b565b6301e1338090049050611895816b033b2e3c9fd0803ce8000000611e84565b9150505b92915050565b600061123e8383425b6000806118bc64ffffffffff851684611e6d565b9050806118d8576b033b2e3c9fd0803ce800000091505061123e565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8101600080806002851161190e576000611913565b600285035b925066038882915c40006119278a80611662565b8161193457611934611f5f565b0491506301e13380611946838b611662565b8161195357611953611f5f565b0490506000826119638688611d9b565b61196d9190611d9b565b60029004905060008285611981888a611d9b565b61198b9190611d9b565b6119959190611d9b565b60069004905080826301e133806119ac8a8f611d9b565b6119b69190611f8e565b6119cc906b033b2e3c9fd0803ce8000000611e84565b6119d69190611e84565b6119e09190611e84565b9b9a5050505050505050505050565b80516000907faaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa16801580159061123e5750611a2b600182611e6d565b161592915050565b815160009082167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8101198116825b60029190911c908115611a7757600101611a62565b95945050505050565b6040518061028001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001611b046040518060200160405280600081525090565b815260006020820181905260408201819052606082018190526080820181905260a09091015290565b803573ffffffffffffffffffffffffffffffffffffffff8116811461178757600080fd5b600080600080600080600060e0888a031215611b6c57600080fd5b873596506020880135955060408801359450611b8a60608901611b2d565b935060808801359250611b9f60a08901611b2d565b915060c088013561ffff81168114611bb657600080fd5b8091505092959891949750929550565b600080600080600060a08688031215611bde57600080fd5b85359450611bee60208701611b2d565b94979496505050506040830135926060810135926080909101359150565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006fffffffffffffffffffffffffffffffff808316818516808303821115611c6657611c66611c0c565b01949350505050565b600181815b80851115611cc857817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821115611cae57611cae611c0c565b80851615611cbb57918102915b93841c9390800290611c74565b509250929050565b600082611cdf57506001611899565b81611cec57506000611899565b8160018114611d025760028114611d0c57611d28565b6001915050611899565b60ff841115611d1d57611d1d611c0c565b50506001821b611899565b5060208310610133831016604e8410600b8410161715611d4b575081810a611899565b611d558383611c6f565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821115611d8757611d87611c0c565b029392505050565b600061123e8383611cd0565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611dd357611dd3611c0c565b500290565b600060208083528351808285015260005b81811015611e0557858101830151858201604001528201611de9565b81811115611e17576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b600060208284031215611e5d57600080fd5b8151801515811461123e57600080fd5b600082821015611e7f57611e7f611c0c565b500390565b60008219821115611e9757611e97611c0c565b500190565b600060208284031215611eae57600080fd5b5051919050565b60006fffffffffffffffffffffffffffffffff83811690831681811015611ede57611ede611c0c565b039392505050565b60008060008060808587031215611efc57600080fd5b845193506020850151925060408501519150606085015164ffffffffff81168114611f2657600080fd5b939692955090935050565b600080600060608486031215611f4657600080fd5b8351925060208401519150604084015190509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600082611fc4577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b50049056fea2646970667358221220544d8a3c72f94636ebba7281751637a7467000c608de2d5fea7a1aa45b15b08464736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "executeBackUnbacked(DataTypes.ReserveData storage,address,uint256,uint256,uint256)": {
        "details": "Emits the `BackUnbacked` event",
        "params": {
          "amount": "The amount to back",
          "asset": "The address of the underlying asset to repay",
          "fee": "The amount paid in fees",
          "protocolFeeBps": "The fraction of fees in basis points paid to the protocol*",
          "reserve": "The reserve to back unbacked for"
        }
      },
      "executeMintUnbacked(mapping(address => DataTypes.ReserveData) storage,mapping(uint256 => address) storage,DataTypes.UserConfigurationMap storage,address,uint256,address,uint16)": {
        "details": "Essentially a supply without transferring the underlying.Emits the `MintUnbacked` eventEmits the `ReserveUsedAsCollateralEnabled` if asset is set as collateral",
        "params": {
          "amount": "The amount to mint",
          "asset": "The address of the underlying asset to mint aTokens of",
          "onBehalfOf": "The address that will receive the aTokens",
          "referralCode": "Code used to register the integrator originating the operation, for potential rewards.   0 if the action is executed directly by the user, without any middle-man*",
          "reservesData": "The state of all the reserves",
          "reservesList": "The addresses of all the active reserves",
          "userConfig": "The user configuration mapping that tracks the supplied/borrowed assets"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "executeBackUnbacked(DataTypes.ReserveData storage,address,uint256,uint256,uint256)": {
        "notice": "Back the current unbacked with `amount` and pay `fee`."
      },
      "executeMintUnbacked(mapping(address => DataTypes.ReserveData) storage,mapping(uint256 => address) storage,DataTypes.UserConfigurationMap storage,address,uint256,address,uint16)": {
        "notice": "Mint unbacked aTokens to a user and updates the unbacked for the reserve."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}