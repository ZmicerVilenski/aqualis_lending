{
  "address": "0xaE3606B2DD7849dCFF497057555430e717d7520a",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "proxy",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "ATokenUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "aToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "stableDebtToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "variableDebtToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "interestRateStrategyAddress",
          "type": "address"
        }
      ],
      "name": "ReserveInitialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "proxy",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "StableDebtTokenUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "proxy",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "VariableDebtTokenUpgraded",
      "type": "event"
    }
  ],
  "transactionHash": "0x7e5fdf996d35f00db64d04beea735510e1472374e300b4cbe8438be1c382526a",
  "receipt": {
    "to": null,
    "from": "0x577B08faE2F7fEDD5BFeDe95E02445ed56D02e0e",
    "contractAddress": "0xaE3606B2DD7849dCFF497057555430e717d7520a",
    "transactionIndex": 46,
    "gasUsed": "1941989",
    "logsBloom": "0x
    "blockHash": "0x52a7e8d0f62bd2921e7a6f0b0427204a57db2aa36d2d49e49b6eb21af7035038",
    "transactionHash": "0x7e5fdf996d35f00db64d04beea735510e1472374e300b4cbe8438be1c382526a",
    "logs": [],
    "blockNumber": 8171115,
    "cumulativeGasUsed": "9676243",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "945f0ba62ddff0d0d4db696532f357a5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"ATokenUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"aToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"stableDebtToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"variableDebtToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"interestRateStrategyAddress\",\"type\":\"address\"}],\"name\":\"ReserveInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"StableDebtTokenUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"VariableDebtTokenUpgraded\",\"type\":\"event\"}],\"devdoc\":{\"author\":\"Aqualis\",\"kind\":\"dev\",\"methods\":{\"executeInitReserve(IPool,ConfiguratorInputTypes.InitReserveInput)\":{\"details\":\"Emits the `ReserveInitialized` event\",\"params\":{\"input\":\"The needed parameters for the initialization\",\"pool\":\"The Pool in which the reserve will be initialized\"}},\"executeUpdateAToken(IPool,ConfiguratorInputTypes.UpdateATokenInput)\":{\"details\":\"Emits the `ATokenUpgraded` event\",\"params\":{\"cachedPool\":\"The Pool containing the reserve with the aToken\",\"input\":\"The parameters needed for the initialize call\"}},\"executeUpdateStableDebtToken(IPool,ConfiguratorInputTypes.UpdateDebtTokenInput)\":{\"details\":\"Emits the `StableDebtTokenUpgraded` event\",\"params\":{\"cachedPool\":\"The Pool containing the reserve with the stable debt token\",\"input\":\"The parameters needed for the initialize call\"}},\"executeUpdateVariableDebtToken(IPool,ConfiguratorInputTypes.UpdateDebtTokenInput)\":{\"details\":\"Emits the `VariableDebtTokenUpgraded` event\",\"params\":{\"cachedPool\":\"The Pool containing the reserve with the variable debt token\",\"input\":\"The parameters needed for the initialize call\"}}},\"title\":\"ConfiguratorLogic library\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"executeInitReserve(IPool,ConfiguratorInputTypes.InitReserveInput)\":{\"notice\":\"Initialize a reserve by creating and initializing aToken, stable debt token and variable debt token\"},\"executeUpdateAToken(IPool,ConfiguratorInputTypes.UpdateATokenInput)\":{\"notice\":\"Updates the aToken implementation and initializes it\"},\"executeUpdateStableDebtToken(IPool,ConfiguratorInputTypes.UpdateDebtTokenInput)\":{\"notice\":\"Updates the stable debt token implementation and initializes it\"},\"executeUpdateVariableDebtToken(IPool,ConfiguratorInputTypes.UpdateDebtTokenInput)\":{\"notice\":\"Updates the variable debt token implementation and initializes it\"}},\"notice\":\"Implements the functions to initialize reserves and update aTokens and debtTokens\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"core-v3/contracts/protocol/libraries/logic/ConfiguratorLogic.sol\":\"ConfiguratorLogic\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100000},\"remappings\":[]},\"sources\":{\"core-v3/contracts/dependencies/openzeppelin/contracts/Address.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\r\\npragma solidity 0.8.10;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n  /**\\r\\n   * @dev Returns true if `account` is a contract.\\r\\n   *\\r\\n   * [IMPORTANT]\\r\\n   * ====\\r\\n   * It is unsafe to assume that an address for which this function returns\\r\\n   * false is an externally-owned account (EOA) and not a contract.\\r\\n   *\\r\\n   * Among others, `isContract` will return false for the following\\r\\n   * types of addresses:\\r\\n   *\\r\\n   *  - an externally-owned account\\r\\n   *  - a contract in construction\\r\\n   *  - an address where a contract will be created\\r\\n   *  - an address where a contract lived, but was destroyed\\r\\n   * ====\\r\\n   */\\r\\n  function isContract(address account) internal view returns (bool) {\\r\\n    // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\r\\n    // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\r\\n    // for accounts without code, i.e. `keccak256('')`\\r\\n    bytes32 codehash;\\r\\n    bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\r\\n    // solhint-disable-next-line no-inline-assembly\\r\\n    assembly {\\r\\n      codehash := extcodehash(account)\\r\\n    }\\r\\n    return (codehash != accountHash && codehash != 0x0);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n   * `recipient`, forwarding all available gas and reverting on errors.\\r\\n   *\\r\\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n   * imposed by `transfer`, making them unable to receive funds via\\r\\n   * `transfer`. {sendValue} removes this limitation.\\r\\n   *\\r\\n   * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n   *\\r\\n   * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n   * taken to not create reentrancy vulnerabilities. Consider using\\r\\n   * {ReentrancyGuard} or the\\r\\n   * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n   */\\r\\n  function sendValue(address payable recipient, uint256 amount) internal {\\r\\n    require(address(this).balance >= amount, 'Address: insufficient balance');\\r\\n\\r\\n    // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\r\\n    (bool success, ) = recipient.call{value: amount}('');\\r\\n    require(success, 'Address: unable to send value, recipient may have reverted');\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x1e7806cb61fc2059a68e0894ffa72aaf4a3cd06ae0a33a72364a2354728a669e\",\"license\":\"agpl-3.0\"},\"core-v3/contracts/dependencies/openzeppelin/upgradeability/BaseUpgradeabilityProxy.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\r\\npragma solidity 0.8.10;\\r\\n\\r\\nimport './Proxy.sol';\\r\\nimport '../contracts/Address.sol';\\r\\n\\r\\n/**\\r\\n * @title BaseUpgradeabilityProxy\\r\\n * @dev This contract implements a proxy that allows to change the\\r\\n * implementation address to which it will delegate.\\r\\n * Such a change is called an implementation upgrade.\\r\\n */\\r\\ncontract BaseUpgradeabilityProxy is Proxy {\\r\\n  /**\\r\\n   * @dev Emitted when the implementation is upgraded.\\r\\n   * @param implementation Address of the new implementation.\\r\\n   */\\r\\n  event Upgraded(address indexed implementation);\\r\\n\\r\\n  /**\\r\\n   * @dev Storage slot with the address of the current implementation.\\r\\n   * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\r\\n   * validated in the constructor.\\r\\n   */\\r\\n  bytes32 internal constant IMPLEMENTATION_SLOT =\\r\\n    0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the current implementation.\\r\\n   * @return impl Address of the current implementation\\r\\n   */\\r\\n  function _implementation() internal view override returns (address impl) {\\r\\n    bytes32 slot = IMPLEMENTATION_SLOT;\\r\\n    //solium-disable-next-line\\r\\n    assembly {\\r\\n      impl := sload(slot)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Upgrades the proxy to a new implementation.\\r\\n   * @param newImplementation Address of the new implementation.\\r\\n   */\\r\\n  function _upgradeTo(address newImplementation) internal {\\r\\n    _setImplementation(newImplementation);\\r\\n    emit Upgraded(newImplementation);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Sets the implementation address of the proxy.\\r\\n   * @param newImplementation Address of the new implementation.\\r\\n   */\\r\\n  function _setImplementation(address newImplementation) internal {\\r\\n    require(\\r\\n      Address.isContract(newImplementation),\\r\\n      'Cannot set a proxy implementation to a non-contract address'\\r\\n    );\\r\\n\\r\\n    bytes32 slot = IMPLEMENTATION_SLOT;\\r\\n\\r\\n    //solium-disable-next-line\\r\\n    assembly {\\r\\n      sstore(slot, newImplementation)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0xf64a58c026eea7045920d9a7611bd767071542ab73eee7e794b8a9256e4eda26\",\"license\":\"agpl-3.0\"},\"core-v3/contracts/dependencies/openzeppelin/upgradeability/InitializableUpgradeabilityProxy.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\r\\npragma solidity 0.8.10;\\r\\n\\r\\nimport './BaseUpgradeabilityProxy.sol';\\r\\n\\r\\n/**\\r\\n * @title InitializableUpgradeabilityProxy\\r\\n * @dev Extends BaseUpgradeabilityProxy with an initializer for initializing\\r\\n * implementation and init data.\\r\\n */\\r\\ncontract InitializableUpgradeabilityProxy is BaseUpgradeabilityProxy {\\r\\n  /**\\r\\n   * @dev Contract initializer.\\r\\n   * @param _logic Address of the initial implementation.\\r\\n   * @param _data Data to send as msg.data to the implementation to initialize the proxied contract.\\r\\n   * It should include the signature and the parameters of the function to be called, as described in\\r\\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\\r\\n   * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.\\r\\n   */\\r\\n  function initialize(address _logic, bytes memory _data) public payable {\\r\\n    require(_implementation() == address(0));\\r\\n    assert(IMPLEMENTATION_SLOT == bytes32(uint256(keccak256('eip1967.proxy.implementation')) - 1));\\r\\n    _setImplementation(_logic);\\r\\n    if (_data.length > 0) {\\r\\n      (bool success, ) = _logic.delegatecall(_data);\\r\\n      require(success);\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x828c181dc4d7ca3e7ca1906791fc5860767f59f63d3d9422334a472847d4400c\",\"license\":\"agpl-3.0\"},\"core-v3/contracts/dependencies/openzeppelin/upgradeability/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\r\\npragma solidity 0.8.10;\\r\\n\\r\\n/**\\r\\n * @title Proxy\\r\\n * @dev Implements delegation of calls to other contracts, with proper\\r\\n * forwarding of return values and bubbling of failures.\\r\\n * It defines a fallback function that delegates all calls to the address\\r\\n * returned by the abstract _implementation() internal function.\\r\\n */\\r\\nabstract contract Proxy {\\r\\n  /**\\r\\n   * @dev Fallback function.\\r\\n   * Will run if no other function in the contract matches the call data.\\r\\n   * Implemented entirely in `_fallback`.\\r\\n   */\\r\\n  fallback() external payable {\\r\\n    _fallback();\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @return The Address of the implementation.\\r\\n   */\\r\\n  function _implementation() internal view virtual returns (address);\\r\\n\\r\\n  /**\\r\\n   * @dev Delegates execution to an implementation contract.\\r\\n   * This is a low level function that doesn't return to its internal call site.\\r\\n   * It will return to the external caller whatever the implementation returns.\\r\\n   * @param implementation Address to delegate.\\r\\n   */\\r\\n  function _delegate(address implementation) internal {\\r\\n    //solium-disable-next-line\\r\\n    assembly {\\r\\n      // Copy msg.data. We take full control of memory in this inline assembly\\r\\n      // block because it will not return to Solidity code. We overwrite the\\r\\n      // Solidity scratch pad at memory position 0.\\r\\n      calldatacopy(0, 0, calldatasize())\\r\\n\\r\\n      // Call the implementation.\\r\\n      // out and outsize are 0 because we don't know the size yet.\\r\\n      let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\r\\n\\r\\n      // Copy the returned data.\\r\\n      returndatacopy(0, 0, returndatasize())\\r\\n\\r\\n      switch result\\r\\n      // delegatecall returns 0 on error.\\r\\n      case 0 {\\r\\n        revert(0, returndatasize())\\r\\n      }\\r\\n      default {\\r\\n        return(0, returndatasize())\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Function that is run as the first thing in the fallback function.\\r\\n   * Can be redefined in derived contracts to add functionality.\\r\\n   * Redefinitions must call super._willFallback().\\r\\n   */\\r\\n  function _willFallback() internal virtual {}\\r\\n\\r\\n  /**\\r\\n   * @dev fallback implementation.\\r\\n   * Extracted to enable manual triggering.\\r\\n   */\\r\\n  function _fallback() internal {\\r\\n    _willFallback();\\r\\n    _delegate(_implementation());\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x59d6e042cbc2881313105dff1f0558e290c0d748acbc2312e105a8980b55af96\",\"license\":\"agpl-3.0\"},\"core-v3/contracts/interfaces/IAqualisIncentivesController.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title IAqualisIncentivesController\\r\\n * @author Aqualis\\r\\n * @notice Defines the basic interface for an Aqualis Incentives Controller.\\r\\n **/\\r\\ninterface IAqualisIncentivesController {\\r\\n    /**\\r\\n     * @dev Emitted during `handleAction`, `claimRewards` and `claimRewardsOnBehalf`\\r\\n     * @param user The user that accrued rewards\\r\\n     * @param amount The amount of accrued rewards\\r\\n     */\\r\\n    event RewardsAccrued(address indexed user, uint256 amount);\\r\\n\\r\\n    event RewardsClaimed(\\r\\n        address indexed user,\\r\\n        address indexed to,\\r\\n        uint256 amount\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted during `claimRewards` and `claimRewardsOnBehalf`\\r\\n     * @param user The address that accrued rewards\\r\\n     *\\u00a0@param to The address that will be receiving the rewards\\r\\n     * @param claimer The address that performed the claim\\r\\n     * @param amount The amount of rewards\\r\\n     */\\r\\n    event RewardsClaimed(\\r\\n        address indexed user,\\r\\n        address indexed to,\\r\\n        address indexed claimer,\\r\\n        uint256 amount\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted during `setClaimer`\\r\\n     * @param user The address of the user\\r\\n     * @param claimer The address of the claimer\\r\\n     */\\r\\n    event ClaimerSet(address indexed user, address indexed claimer);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the configuration of the distribution for a certain asset\\r\\n     * @param asset The address of the reference asset of the distribution\\r\\n     * @return The asset index\\r\\n     * @return The emission per second\\r\\n     * @return The last updated timestamp\\r\\n     **/\\r\\n    function getAssetData(address asset)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256\\r\\n        );\\r\\n\\r\\n    /**\\r\\n     * LEGACY **************************\\r\\n     * @dev Returns the configuration of the distribution for a certain asset\\r\\n     * @param asset The address of the reference asset of the distribution\\r\\n     * @return The asset index, the emission per second and the last updated timestamp\\r\\n     **/\\r\\n    function assets(address asset)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint128,\\r\\n            uint128,\\r\\n            uint256\\r\\n        );\\r\\n\\r\\n    /**\\r\\n     * @notice Whitelists an address to claim the rewards on behalf of another address\\r\\n     * @param user The address of the user\\r\\n     * @param claimer The address of the claimer\\r\\n     */\\r\\n    function setClaimer(address user, address claimer) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the whitelisted claimer for a certain address (0x0 if not set)\\r\\n     * @param user The address of the user\\r\\n     * @return The claimer address\\r\\n     */\\r\\n    function getClaimer(address user) external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @notice Configure assets for a certain rewards emission\\r\\n     * @param assets The assets to incentivize\\r\\n     * @param emissionsPerSecond The emission for each asset\\r\\n     */\\r\\n    function configureAssets(\\r\\n        address[] calldata assets,\\r\\n        uint256[] calldata emissionsPerSecond\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Called by the corresponding asset on any update that affects the rewards distribution\\r\\n     * @param asset The address of the user\\r\\n     * @param userBalance The balance of the user of the asset in the pool\\r\\n     * @param totalSupply The total supply of the asset in the pool\\r\\n     **/\\r\\n    function handleAction(\\r\\n        address asset,\\r\\n        uint256 userBalance,\\r\\n        uint256 totalSupply\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the total of rewards of a user, already accrued + not yet accrued\\r\\n     * @param assets The assets to accumulate rewards for\\r\\n     * @param user The address of the user\\r\\n     * @return The rewards\\r\\n     **/\\r\\n    function getRewardsBalance(address[] calldata assets, address user)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Claims reward for a user, on the assets of the pool, accumulating the pending rewards\\r\\n     * @param assets The assets to accumulate rewards for\\r\\n     * @param amount Amount of rewards to claim\\r\\n     * @param to Address that will be receiving the rewards\\r\\n     * @return Rewards claimed\\r\\n     **/\\r\\n    function claimRewards(\\r\\n        address[] calldata assets,\\r\\n        uint256 amount,\\r\\n        address to\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Claims reward for a user on its behalf, on the assets of the pool, accumulating the pending rewards.\\r\\n     * @dev The caller must be whitelisted via \\\"allowClaimOnBehalf\\\" function by the RewardsAdmin role manager\\r\\n     * @param assets The assets to accumulate rewards for\\r\\n     * @param amount The amount of rewards to claim\\r\\n     * @param user The address to check and claim rewards\\r\\n     * @param to The address that will be receiving the rewards\\r\\n     * @return The amount of rewards claimed\\r\\n     **/\\r\\n    function claimRewardsOnBehalf(\\r\\n        address[] calldata assets,\\r\\n        uint256 amount,\\r\\n        address user,\\r\\n        address to\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the unclaimed rewards of the user\\r\\n     * @param user The address of the user\\r\\n     * @return The unclaimed user rewards\\r\\n     */\\r\\n    function getUserUnclaimedRewards(address user)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the user index for a specific asset\\r\\n     * @param user The address of the user\\r\\n     * @param asset The asset to incentivize\\r\\n     * @return The user index for the asset\\r\\n     */\\r\\n    function getUserAssetData(address user, address asset)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice for backward compatibility with previous implementation of the Incentives controller\\r\\n     * @return The address of the reward token\\r\\n     */\\r\\n    function REWARD_TOKEN() external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @notice for backward compatibility with previous implementation of the Incentives controller\\r\\n     * @return The precision used in the incentives controller\\r\\n     */\\r\\n    function PRECISION() external view returns (uint8);\\r\\n\\r\\n    /**\\r\\n     * @dev Gets the distribution end timestamp of the emissions\\r\\n     */\\r\\n    function DISTRIBUTION_END() external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0x7c3f1c91774988ddfe176b99e75517b816a368a5dbd048bb7be7b2499edff822\",\"license\":\"AGPL-3.0\"},\"core-v3/contracts/interfaces/IInitializableAToken.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport {IAqualisIncentivesController} from \\\"./IAqualisIncentivesController.sol\\\";\\r\\nimport {IPool} from \\\"./IPool.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title IInitializableAToken\\r\\n * @author Aqualis\\r\\n * @notice Interface for the initialize function on AToken\\r\\n **/\\r\\ninterface IInitializableAToken {\\r\\n    /**\\r\\n     * @dev Emitted when an aToken is initialized\\r\\n     * @param underlyingAsset The address of the underlying asset\\r\\n     * @param pool The address of the associated pool\\r\\n     * @param treasury The address of the treasury\\r\\n     * @param incentivesController The address of the incentives controller for this aToken\\r\\n     * @param aTokenDecimals The decimals of the underlying\\r\\n     * @param aTokenName The name of the aToken\\r\\n     * @param aTokenSymbol The symbol of the aToken\\r\\n     * @param params A set of encoded parameters for additional initialization\\r\\n     **/\\r\\n    event Initialized(\\r\\n        address indexed underlyingAsset,\\r\\n        address indexed pool,\\r\\n        address treasury,\\r\\n        address incentivesController,\\r\\n        uint8 aTokenDecimals,\\r\\n        string aTokenName,\\r\\n        string aTokenSymbol,\\r\\n        bytes params\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @notice Initializes the aToken\\r\\n     * @param pool The pool contract that is initializing this contract\\r\\n     * @param treasury The address of the Aqualis treasury, receiving the fees on this aToken\\r\\n     * @param underlyingAsset The address of the underlying asset of this aToken (E.g. WETH for aWETH)\\r\\n     * @param incentivesController The smart contract managing potential incentives distribution\\r\\n     * @param aTokenDecimals The decimals of the aToken, same as the underlying asset's\\r\\n     * @param aTokenName The name of the aToken\\r\\n     * @param aTokenSymbol The symbol of the aToken\\r\\n     * @param params A set of encoded parameters for additional initialization\\r\\n     */\\r\\n    function initialize(\\r\\n        IPool pool,\\r\\n        address treasury,\\r\\n        address underlyingAsset,\\r\\n        IAqualisIncentivesController incentivesController,\\r\\n        uint8 aTokenDecimals,\\r\\n        string calldata aTokenName,\\r\\n        string calldata aTokenSymbol,\\r\\n        bytes calldata params\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xff2c0a168092a2589c9060a0c937d76305ba83ca2b2c0dc4ae6714fe232ec6a0\",\"license\":\"AGPL-3.0\"},\"core-v3/contracts/interfaces/IInitializableDebtToken.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport {IAqualisIncentivesController} from \\\"./IAqualisIncentivesController.sol\\\";\\r\\nimport {IPool} from \\\"./IPool.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title IInitializableDebtToken\\r\\n * @author Aqualis\\r\\n * @notice Interface for the initialize function common between debt tokens\\r\\n **/\\r\\ninterface IInitializableDebtToken {\\r\\n    /**\\r\\n     * @dev Emitted when a debt token is initialized\\r\\n     * @param underlyingAsset The address of the underlying asset\\r\\n     * @param pool The address of the associated pool\\r\\n     * @param incentivesController The address of the incentives controller for this aToken\\r\\n     * @param debtTokenDecimals The decimals of the debt token\\r\\n     * @param debtTokenName The name of the debt token\\r\\n     * @param debtTokenSymbol The symbol of the debt token\\r\\n     * @param params A set of encoded parameters for additional initialization\\r\\n     **/\\r\\n    event Initialized(\\r\\n        address indexed underlyingAsset,\\r\\n        address indexed pool,\\r\\n        address incentivesController,\\r\\n        uint8 debtTokenDecimals,\\r\\n        string debtTokenName,\\r\\n        string debtTokenSymbol,\\r\\n        bytes params\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @notice Initializes the debt token.\\r\\n     * @param pool The pool contract that is initializing this contract\\r\\n     * @param underlyingAsset The address of the underlying asset of this aToken (E.g. WETH for aWETH)\\r\\n     * @param incentivesController The smart contract managing potential incentives distribution\\r\\n     * @param debtTokenDecimals The decimals of the debtToken, same as the underlying asset's\\r\\n     * @param debtTokenName The name of the token\\r\\n     * @param debtTokenSymbol The symbol of the token\\r\\n     * @param params A set of encoded parameters for additional initialization\\r\\n     */\\r\\n    function initialize(\\r\\n        IPool pool,\\r\\n        address underlyingAsset,\\r\\n        IAqualisIncentivesController incentivesController,\\r\\n        uint8 debtTokenDecimals,\\r\\n        string memory debtTokenName,\\r\\n        string memory debtTokenSymbol,\\r\\n        bytes calldata params\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xb5c24fadfcbd6148579d7541c84ca2b62fbdacb6da7e0324b920c5286362067d\",\"license\":\"AGPL-3.0\"},\"core-v3/contracts/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport {IPoolAddressesProvider} from \\\"./IPoolAddressesProvider.sol\\\";\\r\\nimport {DataTypes} from \\\"../protocol/libraries/types/DataTypes.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title IPool\\r\\n * @author Aqualis\\r\\n * @notice Defines the basic interface for an Aqualis Pool.\\r\\n **/\\r\\ninterface IPool {\\r\\n    /**\\r\\n     * @dev Emitted on mintUnbacked()\\r\\n     * @param reserve The address of the underlying asset of the reserve\\r\\n     * @param user The address initiating the supply\\r\\n     * @param onBehalfOf The beneficiary of the supplied assets, receiving the aTokens\\r\\n     * @param amount The amount of supplied assets\\r\\n     * @param referralCode The referral code used\\r\\n     **/\\r\\n    event MintUnbacked(\\r\\n        address indexed reserve,\\r\\n        address user,\\r\\n        address indexed onBehalfOf,\\r\\n        uint256 amount,\\r\\n        uint16 indexed referralCode\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted on backUnbacked()\\r\\n     * @param reserve The address of the underlying asset of the reserve\\r\\n     * @param backer The address paying for the backing\\r\\n     * @param amount The amount added as backing\\r\\n     * @param fee The amount paid in fees\\r\\n     **/\\r\\n    event BackUnbacked(\\r\\n        address indexed reserve,\\r\\n        address indexed backer,\\r\\n        uint256 amount,\\r\\n        uint256 fee\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted on supply()\\r\\n     * @param reserve The address of the underlying asset of the reserve\\r\\n     * @param user The address initiating the supply\\r\\n     * @param onBehalfOf The beneficiary of the supply, receiving the aTokens\\r\\n     * @param amount The amount supplied\\r\\n     * @param referralCode The referral code used\\r\\n     **/\\r\\n    event Supply(\\r\\n        address indexed reserve,\\r\\n        address user,\\r\\n        address indexed onBehalfOf,\\r\\n        uint256 amount,\\r\\n        uint16 indexed referralCode\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted on withdraw()\\r\\n     * @param reserve The address of the underlying asset being withdrawn\\r\\n     * @param user The address initiating the withdrawal, owner of aTokens\\r\\n     * @param to The address that will receive the underlying\\r\\n     * @param amount The amount to be withdrawn\\r\\n     **/\\r\\n    event Withdraw(\\r\\n        address indexed reserve,\\r\\n        address indexed user,\\r\\n        address indexed to,\\r\\n        uint256 amount\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\\r\\n     * @param reserve The address of the underlying asset being borrowed\\r\\n     * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\\r\\n     * initiator of the transaction on flashLoan()\\r\\n     * @param onBehalfOf The address that will be getting the debt\\r\\n     * @param amount The amount borrowed out\\r\\n     * @param interestRateMode The rate mode: 1 for Stable, 2 for Variable\\r\\n     * @param borrowRate The numeric rate at which the user has borrowed, expressed in ray\\r\\n     * @param referralCode The referral code used\\r\\n     **/\\r\\n    event Borrow(\\r\\n        address indexed reserve,\\r\\n        address user,\\r\\n        address indexed onBehalfOf,\\r\\n        uint256 amount,\\r\\n        DataTypes.InterestRateMode interestRateMode,\\r\\n        uint256 borrowRate,\\r\\n        uint16 indexed referralCode\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted on repay()\\r\\n     * @param reserve The address of the underlying asset of the reserve\\r\\n     * @param user The beneficiary of the repayment, getting his debt reduced\\r\\n     * @param repayer The address of the user initiating the repay(), providing the funds\\r\\n     * @param amount The amount repaid\\r\\n     * @param useATokens True if the repayment is done using aTokens, `false` if done with underlying asset directly\\r\\n     **/\\r\\n    event Repay(\\r\\n        address indexed reserve,\\r\\n        address indexed user,\\r\\n        address indexed repayer,\\r\\n        uint256 amount,\\r\\n        bool useATokens\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted on swapBorrowRateMode()\\r\\n     * @param reserve The address of the underlying asset of the reserve\\r\\n     * @param user The address of the user swapping his rate mode\\r\\n     * @param interestRateMode The current interest rate mode of the position being swapped: 1 for Stable, 2 for Variable\\r\\n     **/\\r\\n    event SwapBorrowRateMode(\\r\\n        address indexed reserve,\\r\\n        address indexed user,\\r\\n        DataTypes.InterestRateMode interestRateMode\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted on borrow(), repay() and liquidationCall() when using isolated assets\\r\\n     * @param asset The address of the underlying asset of the reserve\\r\\n     * @param totalDebt The total isolation mode debt for the reserve\\r\\n     */\\r\\n    event IsolationModeTotalDebtUpdated(\\r\\n        address indexed asset,\\r\\n        uint256 totalDebt\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the user selects a certain asset category for eMode\\r\\n     * @param user The address of the user\\r\\n     * @param categoryId The category id\\r\\n     **/\\r\\n    event UserEModeSet(address indexed user, uint8 categoryId);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted on setUserUseReserveAsCollateral()\\r\\n     * @param reserve The address of the underlying asset of the reserve\\r\\n     * @param user The address of the user enabling the usage as collateral\\r\\n     **/\\r\\n    event ReserveUsedAsCollateralEnabled(\\r\\n        address indexed reserve,\\r\\n        address indexed user\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted on setUserUseReserveAsCollateral()\\r\\n     * @param reserve The address of the underlying asset of the reserve\\r\\n     * @param user The address of the user enabling the usage as collateral\\r\\n     **/\\r\\n    event ReserveUsedAsCollateralDisabled(\\r\\n        address indexed reserve,\\r\\n        address indexed user\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted on rebalanceStableBorrowRate()\\r\\n     * @param reserve The address of the underlying asset of the reserve\\r\\n     * @param user The address of the user for which the rebalance has been executed\\r\\n     **/\\r\\n    event RebalanceStableBorrowRate(\\r\\n        address indexed reserve,\\r\\n        address indexed user\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted on flashLoan()\\r\\n     * @param target The address of the flash loan receiver contract\\r\\n     * @param initiator The address initiating the flash loan\\r\\n     * @param asset The address of the asset being flash borrowed\\r\\n     * @param amount The amount flash borrowed\\r\\n     * @param interestRateMode The flashloan mode: 0 for regular flashloan, 1 for Stable debt, 2 for Variable debt\\r\\n     * @param premium The fee flash borrowed\\r\\n     * @param referralCode The referral code used\\r\\n     **/\\r\\n    event FlashLoan(\\r\\n        address indexed target,\\r\\n        address initiator,\\r\\n        address indexed asset,\\r\\n        uint256 amount,\\r\\n        DataTypes.InterestRateMode interestRateMode,\\r\\n        uint256 premium,\\r\\n        uint16 indexed referralCode\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when a borrower is liquidated.\\r\\n     * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\r\\n     * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\r\\n     * @param user The address of the borrower getting liquidated\\r\\n     * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\r\\n     * @param liquidatedCollateralAmount The amount of collateral received by the liquidator\\r\\n     * @param liquidator The address of the liquidator\\r\\n     * @param receiveAToken True if the liquidators wants to receive the collateral aTokens, `false` if he wants\\r\\n     * to receive the underlying collateral asset directly\\r\\n     **/\\r\\n    event LiquidationCall(\\r\\n        address indexed collateralAsset,\\r\\n        address indexed debtAsset,\\r\\n        address indexed user,\\r\\n        uint256 debtToCover,\\r\\n        uint256 liquidatedCollateralAmount,\\r\\n        address liquidator,\\r\\n        bool receiveAToken\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the state of a reserve is updated.\\r\\n     * @param reserve The address of the underlying asset of the reserve\\r\\n     * @param liquidityRate The next liquidity rate\\r\\n     * @param stableBorrowRate The next stable borrow rate\\r\\n     * @param variableBorrowRate The next variable borrow rate\\r\\n     * @param liquidityIndex The next liquidity index\\r\\n     * @param variableBorrowIndex The next variable borrow index\\r\\n     **/\\r\\n    event ReserveDataUpdated(\\r\\n        address indexed reserve,\\r\\n        uint256 liquidityRate,\\r\\n        uint256 stableBorrowRate,\\r\\n        uint256 variableBorrowRate,\\r\\n        uint256 liquidityIndex,\\r\\n        uint256 variableBorrowIndex\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the protocol treasury receives minted aTokens from the accrued interest.\\r\\n     * @param reserve The address of the reserve\\r\\n     * @param amountMinted The amount minted to the treasury\\r\\n     **/\\r\\n    event MintedToTreasury(address indexed reserve, uint256 amountMinted);\\r\\n\\r\\n    /**\\r\\n     * @dev Mints an `amount` of aTokens to the `onBehalfOf`\\r\\n     * @param asset The address of the underlying asset to mint\\r\\n     * @param amount The amount to mint\\r\\n     * @param onBehalfOf The address that will receive the aTokens\\r\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\r\\n     *   0 if the action is executed directly by the user, without any middle-man\\r\\n     **/\\r\\n    function mintUnbacked(\\r\\n        address asset,\\r\\n        uint256 amount,\\r\\n        address onBehalfOf,\\r\\n        uint16 referralCode\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Back the current unbacked underlying with `amount` and pay `fee`.\\r\\n     * @param asset The address of the underlying asset to back\\r\\n     * @param amount The amount to back\\r\\n     * @param fee The amount paid in fees\\r\\n     **/\\r\\n    function backUnbacked(\\r\\n        address asset,\\r\\n        uint256 amount,\\r\\n        uint256 fee\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\r\\n     * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\\r\\n     * @param asset The address of the underlying asset to supply\\r\\n     * @param amount The amount to be supplied\\r\\n     * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\r\\n     *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\r\\n     *   is a different wallet\\r\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\r\\n     *   0 if the action is executed directly by the user, without any middle-man\\r\\n     **/\\r\\n    function supply(\\r\\n        address asset,\\r\\n        uint256 amount,\\r\\n        address onBehalfOf,\\r\\n        uint16 referralCode\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Supply with transfer approval of asset to be supplied done via permit function\\r\\n     * see: https://eips.ethereum.org/EIPS/eip-2612 and https://eips.ethereum.org/EIPS/eip-713\\r\\n     * @param asset The address of the underlying asset to supply\\r\\n     * @param amount The amount to be supplied\\r\\n     * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\r\\n     *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\r\\n     *   is a different wallet\\r\\n     * @param deadline The deadline timestamp that the permit is valid\\r\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\r\\n     *   0 if the action is executed directly by the user, without any middle-man\\r\\n     * @param permitV The V parameter of ERC712 permit sig\\r\\n     * @param permitR The R parameter of ERC712 permit sig\\r\\n     * @param permitS The S parameter of ERC712 permit sig\\r\\n     **/\\r\\n    function supplyWithPermit(\\r\\n        address asset,\\r\\n        uint256 amount,\\r\\n        address onBehalfOf,\\r\\n        uint16 referralCode,\\r\\n        uint256 deadline,\\r\\n        uint8 permitV,\\r\\n        bytes32 permitR,\\r\\n        bytes32 permitS\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\\r\\n     * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\r\\n     * @param asset The address of the underlying asset to withdraw\\r\\n     * @param amount The underlying amount to be withdrawn\\r\\n     *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\\r\\n     * @param to The address that will receive the underlying, same as msg.sender if the user\\r\\n     *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\r\\n     *   different wallet\\r\\n     * @return The final amount withdrawn\\r\\n     **/\\r\\n    function withdraw(\\r\\n        address asset,\\r\\n        uint256 amount,\\r\\n        address to\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\\r\\n     * already supplied enough collateral, or he was given enough allowance by a credit delegator on the\\r\\n     * corresponding debt token (StableDebtToken or VariableDebtToken)\\r\\n     * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\\r\\n     *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\\r\\n     * @param asset The address of the underlying asset to borrow\\r\\n     * @param amount The amount to be borrowed\\r\\n     * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\\r\\n     * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\r\\n     *   0 if the action is executed directly by the user, without any middle-man\\r\\n     * @param onBehalfOf The address of the user who will receive the debt. Should be the address of the borrower itself\\r\\n     * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\\r\\n     * if he has been given credit delegation allowance\\r\\n     **/\\r\\n    function borrow(\\r\\n        address asset,\\r\\n        uint256 amount,\\r\\n        uint256 interestRateMode,\\r\\n        uint16 referralCode,\\r\\n        address onBehalfOf\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\\r\\n     * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\\r\\n     * @param asset The address of the borrowed underlying asset previously borrowed\\r\\n     * @param amount The amount to repay\\r\\n     * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\r\\n     * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\r\\n     * @param onBehalfOf The address of the user who will get his debt reduced/removed. Should be the address of the\\r\\n     * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\r\\n     * other borrower whose debt should be removed\\r\\n     * @return The final amount repaid\\r\\n     **/\\r\\n    function repay(\\r\\n        address asset,\\r\\n        uint256 amount,\\r\\n        uint256 interestRateMode,\\r\\n        address onBehalfOf\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Repay with transfer approval of asset to be repaid done via permit function\\r\\n     * see: https://eips.ethereum.org/EIPS/eip-2612 and https://eips.ethereum.org/EIPS/eip-713\\r\\n     * @param asset The address of the borrowed underlying asset previously borrowed\\r\\n     * @param amount The amount to repay\\r\\n     * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\r\\n     * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\r\\n     * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\\r\\n     * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\r\\n     * other borrower whose debt should be removed\\r\\n     * @param deadline The deadline timestamp that the permit is valid\\r\\n     * @param permitV The V parameter of ERC712 permit sig\\r\\n     * @param permitR The R parameter of ERC712 permit sig\\r\\n     * @param permitS The S parameter of ERC712 permit sig\\r\\n     * @return The final amount repaid\\r\\n     **/\\r\\n    function repayWithPermit(\\r\\n        address asset,\\r\\n        uint256 amount,\\r\\n        uint256 interestRateMode,\\r\\n        address onBehalfOf,\\r\\n        uint256 deadline,\\r\\n        uint8 permitV,\\r\\n        bytes32 permitR,\\r\\n        bytes32 permitS\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Repays a borrowed `amount` on a specific reserve using the reserve aTokens, burning the\\r\\n     * equivalent debt tokens\\r\\n     * - E.g. User repays 100 USDC using 100 aUSDC, burning 100 variable/stable debt tokens\\r\\n     * @dev  Passing uint256.max as amount will clean up any residual aToken dust balance, if the user aToken\\r\\n     * balance is not enough to cover the whole debt\\r\\n     * @param asset The address of the borrowed underlying asset previously borrowed\\r\\n     * @param amount The amount to repay\\r\\n     * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\r\\n     * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\r\\n     * @return The final amount repaid\\r\\n     **/\\r\\n    function repayWithATokens(\\r\\n        address asset,\\r\\n        uint256 amount,\\r\\n        uint256 interestRateMode\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Allows a borrower to swap his debt between stable and variable mode, or vice versa\\r\\n     * @param asset The address of the underlying asset borrowed\\r\\n     * @param interestRateMode The current interest rate mode of the position being swapped: 1 for Stable, 2 for Variable\\r\\n     **/\\r\\n    function swapBorrowRateMode(address asset, uint256 interestRateMode)\\r\\n        external;\\r\\n\\r\\n    /**\\r\\n     * @notice Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\\r\\n     * - Users can be rebalanced if the following conditions are satisfied:\\r\\n     *     1. Usage ratio is above 95%\\r\\n     *     2. the current supply APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too\\r\\n     *        much has been borrowed at a stable rate and suppliers are not earning enough\\r\\n     * @param asset The address of the underlying asset borrowed\\r\\n     * @param user The address of the user to be rebalanced\\r\\n     **/\\r\\n    function rebalanceStableBorrowRate(address asset, address user) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Allows suppliers to enable/disable a specific supplied asset as collateral\\r\\n     * @param asset The address of the underlying asset supplied\\r\\n     * @param useAsCollateral True if the user wants to use the supply as collateral, false otherwise\\r\\n     **/\\r\\n    function setUserUseReserveAsCollateral(address asset, bool useAsCollateral)\\r\\n        external;\\r\\n\\r\\n    /**\\r\\n     * @notice Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\\r\\n     * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\\r\\n     *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\\r\\n     * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\r\\n     * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\r\\n     * @param user The address of the borrower getting liquidated\\r\\n     * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\r\\n     * @param receiveAToken True if the liquidators wants to receive the collateral aTokens, `false` if he wants\\r\\n     * to receive the underlying collateral asset directly\\r\\n     **/\\r\\n    function liquidationCall(\\r\\n        address collateralAsset,\\r\\n        address debtAsset,\\r\\n        address user,\\r\\n        uint256 debtToCover,\\r\\n        bool receiveAToken\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Allows smartcontracts to access the liquidity of the pool within one transaction,\\r\\n     * as long as the amount taken plus a fee is returned.\\r\\n     * @dev IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept\\r\\n     * into consideration. For further details please visit https://developers.aave.com\\r\\n     * @param receiverAddress The address of the contract receiving the funds, implementing IFlashLoanReceiver interface\\r\\n     * @param assets The addresses of the assets being flash-borrowed\\r\\n     * @param amounts The amounts of the assets being flash-borrowed\\r\\n     * @param interestRateModes Types of the debt to open if the flash loan is not returned:\\r\\n     *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\\r\\n     *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\r\\n     *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\r\\n     * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\\r\\n     * @param params Variadic packed params to pass to the receiver as extra information\\r\\n     * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\r\\n     *   0 if the action is executed directly by the user, without any middle-man\\r\\n     **/\\r\\n    function flashLoan(\\r\\n        address receiverAddress,\\r\\n        address[] calldata assets,\\r\\n        uint256[] calldata amounts,\\r\\n        uint256[] calldata interestRateModes,\\r\\n        address onBehalfOf,\\r\\n        bytes calldata params,\\r\\n        uint16 referralCode\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Allows smartcontracts to access the liquidity of the pool within one transaction,\\r\\n     * as long as the amount taken plus a fee is returned.\\r\\n     * @dev IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept\\r\\n     * into consideration. For further details please visit https://developers.aave.com\\r\\n     * @param receiverAddress The address of the contract receiving the funds, implementing IFlashLoanSimpleReceiver interface\\r\\n     * @param asset The address of the asset being flash-borrowed\\r\\n     * @param amount The amount of the asset being flash-borrowed\\r\\n     * @param params Variadic packed params to pass to the receiver as extra information\\r\\n     * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\r\\n     *   0 if the action is executed directly by the user, without any middle-man\\r\\n     **/\\r\\n    function flashLoanSimple(\\r\\n        address receiverAddress,\\r\\n        address asset,\\r\\n        uint256 amount,\\r\\n        bytes calldata params,\\r\\n        uint16 referralCode\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the user account data across all the reserves\\r\\n     * @param user The address of the user\\r\\n     * @return totalCollateralBase The total collateral of the user in the base currency used by the price feed\\r\\n     * @return totalDebtBase The total debt of the user in the base currency used by the price feed\\r\\n     * @return availableBorrowsBase The borrowing power left of the user in the base currency used by the price feed\\r\\n     * @return currentLiquidationThreshold The liquidation threshold of the user\\r\\n     * @return ltv The loan to value of The user\\r\\n     * @return healthFactor The current health factor of the user\\r\\n     **/\\r\\n    function getUserAccountData(address user)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256 totalCollateralBase,\\r\\n            uint256 totalDebtBase,\\r\\n            uint256 availableBorrowsBase,\\r\\n            uint256 currentLiquidationThreshold,\\r\\n            uint256 ltv,\\r\\n            uint256 healthFactor\\r\\n        );\\r\\n\\r\\n    /**\\r\\n     * @notice Initializes a reserve, activating it, assigning an aToken and debt tokens and an\\r\\n     * interest rate strategy\\r\\n     * @dev Only callable by the PoolConfigurator contract\\r\\n     * @param asset The address of the underlying asset of the reserve\\r\\n     * @param aTokenAddress The address of the aToken that will be assigned to the reserve\\r\\n     * @param stableDebtAddress The address of the StableDebtToken that will be assigned to the reserve\\r\\n     * @param variableDebtAddress The address of the VariableDebtToken that will be assigned to the reserve\\r\\n     * @param interestRateStrategyAddress The address of the interest rate strategy contract\\r\\n     **/\\r\\n    function initReserve(\\r\\n        address asset,\\r\\n        address aTokenAddress,\\r\\n        address stableDebtAddress,\\r\\n        address variableDebtAddress,\\r\\n        address interestRateStrategyAddress\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Drop a reserve\\r\\n     * @dev Only callable by the PoolConfigurator contract\\r\\n     * @param asset The address of the underlying asset of the reserve\\r\\n     **/\\r\\n    function dropReserve(address asset) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Updates the address of the interest rate strategy contract\\r\\n     * @dev Only callable by the PoolConfigurator contract\\r\\n     * @param asset The address of the underlying asset of the reserve\\r\\n     * @param rateStrategyAddress The address of the interest rate strategy contract\\r\\n     **/\\r\\n    function setReserveInterestRateStrategyAddress(\\r\\n        address asset,\\r\\n        address rateStrategyAddress\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Sets the configuration bitmap of the reserve as a whole\\r\\n     * @dev Only callable by the PoolConfigurator contract\\r\\n     * @param asset The address of the underlying asset of the reserve\\r\\n     * @param configuration The new configuration bitmap\\r\\n     **/\\r\\n    function setConfiguration(\\r\\n        address asset,\\r\\n        DataTypes.ReserveConfigurationMap calldata configuration\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the configuration of the reserve\\r\\n     * @param asset The address of the underlying asset of the reserve\\r\\n     * @return The configuration of the reserve\\r\\n     **/\\r\\n    function getConfiguration(address asset)\\r\\n        external\\r\\n        view\\r\\n        returns (DataTypes.ReserveConfigurationMap memory);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the configuration of the user across all the reserves\\r\\n     * @param user The user address\\r\\n     * @return The configuration of the user\\r\\n     **/\\r\\n    function getUserConfiguration(address user)\\r\\n        external\\r\\n        view\\r\\n        returns (DataTypes.UserConfigurationMap memory);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the normalized income normalized income of the reserve\\r\\n     * @param asset The address of the underlying asset of the reserve\\r\\n     * @return The reserve's normalized income\\r\\n     */\\r\\n    function getReserveNormalizedIncome(address asset)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the normalized variable debt per unit of asset\\r\\n     * @param asset The address of the underlying asset of the reserve\\r\\n     * @return The reserve normalized variable debt\\r\\n     */\\r\\n    function getReserveNormalizedVariableDebt(address asset)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the state and configuration of the reserve\\r\\n     * @param asset The address of the underlying asset of the reserve\\r\\n     * @return The state and configuration data of the reserve\\r\\n     **/\\r\\n    function getReserveData(address asset)\\r\\n        external\\r\\n        view\\r\\n        returns (DataTypes.ReserveData memory);\\r\\n\\r\\n    /**\\r\\n     * @notice Validates and finalizes an aToken transfer\\r\\n     * @dev Only callable by the overlying aToken of the `asset`\\r\\n     * @param asset The address of the underlying asset of the aToken\\r\\n     * @param from The user from which the aTokens are transferred\\r\\n     * @param to The user receiving the aTokens\\r\\n     * @param amount The amount being transferred/withdrawn\\r\\n     * @param balanceFromBefore The aToken balance of the `from` user before the transfer\\r\\n     * @param balanceToBefore The aToken balance of the `to` user before the transfer\\r\\n     */\\r\\n    function finalizeTransfer(\\r\\n        address asset,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount,\\r\\n        uint256 balanceFromBefore,\\r\\n        uint256 balanceToBefore\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the list of the underlying assets of all the initialized reserves\\r\\n     * @dev It does not include dropped reserves\\r\\n     * @return The addresses of the underlying assets of the initialized reserves\\r\\n     **/\\r\\n    function getReservesList() external view returns (address[] memory);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the address of the underlying asset of a reserve by the reserve id as stored in the DataTypes.ReserveData struct\\r\\n     * @param id The id of the reserve as stored in the DataTypes.ReserveData struct\\r\\n     * @return The address of the reserve associated with id\\r\\n     **/\\r\\n    function getReserveAddressById(uint16 id) external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the PoolAddressesProvider connected to this contract\\r\\n     * @return The address of the PoolAddressesProvider\\r\\n     **/\\r\\n    function ADDRESSES_PROVIDER()\\r\\n        external\\r\\n        view\\r\\n        returns (IPoolAddressesProvider);\\r\\n\\r\\n    /**\\r\\n     * @notice Updates the protocol fee on the bridging\\r\\n     * @param bridgeProtocolFee The part of the premium sent to the protocol treasury\\r\\n     */\\r\\n    function updateBridgeProtocolFee(uint256 bridgeProtocolFee) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Updates flash loan premiums. Flash loan premium consists of two parts:\\r\\n     * - A part is sent to aToken holders as extra, one time accumulated interest\\r\\n     * - A part is collected by the protocol treasury\\r\\n     * @dev The total premium is calculated on the total borrowed amount\\r\\n     * @dev The premium to protocol is calculated on the total premium, being a percentage of `flashLoanPremiumTotal`\\r\\n     * @dev Only callable by the PoolConfigurator contract\\r\\n     * @param flashLoanPremiumTotal The total premium, expressed in bps\\r\\n     * @param flashLoanPremiumToProtocol The part of the premium sent to the protocol treasury, expressed in bps\\r\\n     */\\r\\n    function updateFlashloanPremiums(\\r\\n        uint128 flashLoanPremiumTotal,\\r\\n        uint128 flashLoanPremiumToProtocol\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Configures a new category for the eMode.\\r\\n     * @dev In eMode, the protocol allows very high borrowing power to borrow assets of the same category.\\r\\n     * The category 0 is reserved as it's the default for volatile assets\\r\\n     * @param id The id of the category\\r\\n     * @param config The configuration of the category\\r\\n     */\\r\\n    function configureEModeCategory(\\r\\n        uint8 id,\\r\\n        DataTypes.EModeCategory memory config\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the data of an eMode category\\r\\n     * @param id The id of the category\\r\\n     * @return The configuration data of the category\\r\\n     */\\r\\n    function getEModeCategoryData(uint8 id)\\r\\n        external\\r\\n        view\\r\\n        returns (DataTypes.EModeCategory memory);\\r\\n\\r\\n    /**\\r\\n     * @notice Allows a user to use the protocol in eMode\\r\\n     * @param categoryId The id of the category\\r\\n     */\\r\\n    function setUserEMode(uint8 categoryId) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the eMode the user is using\\r\\n     * @param user The address of the user\\r\\n     * @return The eMode id\\r\\n     */\\r\\n    function getUserEMode(address user) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Resets the isolation mode total debt of the given asset to zero\\r\\n     * @dev It requires the given asset has zero debt ceiling\\r\\n     * @param asset The address of the underlying asset to reset the isolationModeTotalDebt\\r\\n     */\\r\\n    function resetIsolationModeTotalDebt(address asset) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the percentage of available liquidity that can be borrowed at once at stable rate\\r\\n     * @return The percentage of available liquidity to borrow, expressed in bps\\r\\n     */\\r\\n    function MAX_STABLE_RATE_BORROW_SIZE_PERCENT()\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the total fee on flash loans\\r\\n     * @return The total fee on flashloans\\r\\n     */\\r\\n    function FLASHLOAN_PREMIUM_TOTAL() external view returns (uint128);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the part of the bridge fees sent to protocol\\r\\n     * @return The bridge fee sent to the protocol treasury\\r\\n     */\\r\\n    function BRIDGE_PROTOCOL_FEE() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the part of the flashloan fees sent to protocol\\r\\n     * @return The flashloan fee sent to the protocol treasury\\r\\n     */\\r\\n    function FLASHLOAN_PREMIUM_TO_PROTOCOL() external view returns (uint128);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the maximum number of reserves supported to be listed in this Pool\\r\\n     * @return The maximum number of reserves supported\\r\\n     */\\r\\n    function MAX_NUMBER_RESERVES() external view returns (uint16);\\r\\n\\r\\n    /**\\r\\n     * @notice Mints the assets accrued through the reserve factor to the treasury in the form of aTokens\\r\\n     * @param assets The list of reserves for which the minting needs to be executed\\r\\n     **/\\r\\n    function mintToTreasury(address[] calldata assets) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Rescue and transfer tokens locked in this contract\\r\\n     * @param token The address of the token\\r\\n     * @param to The address of the recipient\\r\\n     * @param amount The amount of token to transfer\\r\\n     */\\r\\n    function rescueTokens(\\r\\n        address token,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\r\\n     * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\\r\\n     * @dev Deprecated: Use the `supply` function instead\\r\\n     * @param asset The address of the underlying asset to supply\\r\\n     * @param amount The amount to be supplied\\r\\n     * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\r\\n     *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\r\\n     *   is a different wallet\\r\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\r\\n     *   0 if the action is executed directly by the user, without any middle-man\\r\\n     **/\\r\\n    function deposit(\\r\\n        address asset,\\r\\n        uint256 amount,\\r\\n        address onBehalfOf,\\r\\n        uint16 referralCode\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x148f79ba198b90d46a8ce5b15a9f316b6496c3f49112386015ad98834acf130f\",\"license\":\"AGPL-3.0\"},\"core-v3/contracts/interfaces/IPoolAddressesProvider.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title IPoolAddressesProvider\\r\\n * @author Aqualis\\r\\n * @notice Defines the basic interface for a Pool Addresses Provider.\\r\\n **/\\r\\ninterface IPoolAddressesProvider {\\r\\n    /**\\r\\n     * @dev Emitted when the market identifier is updated.\\r\\n     * @param oldMarketId The old id of the market\\r\\n     * @param newMarketId The new id of the market\\r\\n     */\\r\\n    event MarketIdSet(string indexed oldMarketId, string indexed newMarketId);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the pool is updated.\\r\\n     * @param oldAddress The old address of the Pool\\r\\n     * @param newAddress The new address of the Pool\\r\\n     */\\r\\n    event PoolUpdated(address indexed oldAddress, address indexed newAddress);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the pool configurator is updated.\\r\\n     * @param oldAddress The old address of the PoolConfigurator\\r\\n     * @param newAddress The new address of the PoolConfigurator\\r\\n     */\\r\\n    event PoolConfiguratorUpdated(\\r\\n        address indexed oldAddress,\\r\\n        address indexed newAddress\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the price oracle is updated.\\r\\n     * @param oldAddress The old address of the PriceOracle\\r\\n     * @param newAddress The new address of the PriceOracle\\r\\n     */\\r\\n    event PriceOracleUpdated(\\r\\n        address indexed oldAddress,\\r\\n        address indexed newAddress\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the ACL manager is updated.\\r\\n     * @param oldAddress The old address of the ACLManager\\r\\n     * @param newAddress The new address of the ACLManager\\r\\n     */\\r\\n    event ACLManagerUpdated(\\r\\n        address indexed oldAddress,\\r\\n        address indexed newAddress\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the ACL admin is updated.\\r\\n     * @param oldAddress The old address of the ACLAdmin\\r\\n     * @param newAddress The new address of the ACLAdmin\\r\\n     */\\r\\n    event ACLAdminUpdated(\\r\\n        address indexed oldAddress,\\r\\n        address indexed newAddress\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the price oracle sentinel is updated.\\r\\n     * @param oldAddress The old address of the PriceOracleSentinel\\r\\n     * @param newAddress The new address of the PriceOracleSentinel\\r\\n     */\\r\\n    event PriceOracleSentinelUpdated(\\r\\n        address indexed oldAddress,\\r\\n        address indexed newAddress\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the pool data provider is updated.\\r\\n     * @param oldAddress The old address of the PoolDataProvider\\r\\n     * @param newAddress The new address of the PoolDataProvider\\r\\n     */\\r\\n    event PoolDataProviderUpdated(\\r\\n        address indexed oldAddress,\\r\\n        address indexed newAddress\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when a new proxy is created.\\r\\n     * @param id The identifier of the proxy\\r\\n     * @param proxyAddress The address of the created proxy contract\\r\\n     * @param implementationAddress The address of the implementation contract\\r\\n     */\\r\\n    event ProxyCreated(\\r\\n        bytes32 indexed id,\\r\\n        address indexed proxyAddress,\\r\\n        address indexed implementationAddress\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when a new non-proxied contract address is registered.\\r\\n     * @param id The identifier of the contract\\r\\n     * @param oldAddress The address of the old contract\\r\\n     * @param newAddress The address of the new contract\\r\\n     */\\r\\n    event AddressSet(\\r\\n        bytes32 indexed id,\\r\\n        address indexed oldAddress,\\r\\n        address indexed newAddress\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the implementation of the proxy registered with id is updated\\r\\n     * @param id The identifier of the contract\\r\\n     * @param proxyAddress The address of the proxy contract\\r\\n     * @param oldImplementationAddress The address of the old implementation contract\\r\\n     * @param newImplementationAddress The address of the new implementation contract\\r\\n     */\\r\\n    event AddressSetAsProxy(\\r\\n        bytes32 indexed id,\\r\\n        address indexed proxyAddress,\\r\\n        address oldImplementationAddress,\\r\\n        address indexed newImplementationAddress\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the id of the Aqualis market to which this contract points to.\\r\\n     * @return The market id\\r\\n     **/\\r\\n    function getMarketId() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @notice Associates an id with a specific PoolAddressesProvider.\\r\\n     * @dev This can be used to create an onchain registry of PoolAddressesProviders to\\r\\n     * identify and validate multiple Aqualis markets.\\r\\n     * @param newMarketId The market id\\r\\n     */\\r\\n    function setMarketId(string calldata newMarketId) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Returns an address by its identifier.\\r\\n     * @dev The returned address might be an EOA or a contract, potentially proxied\\r\\n     * @dev It returns ZERO if there is no registered address with the given id\\r\\n     * @param id The id\\r\\n     * @return The address of the registered for the specified id\\r\\n     */\\r\\n    function getAddress(bytes32 id) external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @notice General function to update the implementation of a proxy registered with\\r\\n     * certain `id`. If there is no proxy registered, it will instantiate one and\\r\\n     * set as implementation the `newImplementationAddress`.\\r\\n     * @dev IMPORTANT Use this function carefully, only for ids that don't have an explicit\\r\\n     * setter function, in order to avoid unexpected consequences\\r\\n     * @param id The id\\r\\n     * @param newImplementationAddress The address of the new implementation\\r\\n     */\\r\\n    function setAddressAsProxy(bytes32 id, address newImplementationAddress)\\r\\n        external;\\r\\n\\r\\n    /**\\r\\n     * @notice Sets an address for an id replacing the address saved in the addresses map.\\r\\n     * @dev IMPORTANT Use this function carefully, as it will do a hard replacement\\r\\n     * @param id The id\\r\\n     * @param newAddress The address to set\\r\\n     */\\r\\n    function setAddress(bytes32 id, address newAddress) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the address of the Pool proxy.\\r\\n     * @return The Pool proxy address\\r\\n     **/\\r\\n    function getPool() external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @notice Updates the implementation of the Pool, or creates a proxy\\r\\n     * setting the new `pool` implementation when the function is called for the first time.\\r\\n     * @param newPoolImpl The new Pool implementation\\r\\n     **/\\r\\n    function setPoolImpl(address newPoolImpl) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the address of the PoolConfigurator proxy.\\r\\n     * @return The PoolConfigurator proxy address\\r\\n     **/\\r\\n    function getPoolConfigurator() external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @notice Updates the implementation of the PoolConfigurator, or creates a proxy\\r\\n     * setting the new `PoolConfigurator` implementation when the function is called for the first time.\\r\\n     * @param newPoolConfiguratorImpl The new PoolConfigurator implementation\\r\\n     **/\\r\\n    function setPoolConfiguratorImpl(address newPoolConfiguratorImpl) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the address of the price oracle.\\r\\n     * @return The address of the PriceOracle\\r\\n     */\\r\\n    function getPriceOracle() external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @notice Updates the address of the price oracle.\\r\\n     * @param newPriceOracle The address of the new PriceOracle\\r\\n     */\\r\\n    function setPriceOracle(address newPriceOracle) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the address of the ACL manager.\\r\\n     * @return The address of the ACLManager\\r\\n     */\\r\\n    function getACLManager() external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @notice Updates the address of the ACL manager.\\r\\n     * @param newAclManager The address of the new ACLManager\\r\\n     **/\\r\\n    function setACLManager(address newAclManager) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the address of the ACL admin.\\r\\n     * @return The address of the ACL admin\\r\\n     */\\r\\n    function getACLAdmin() external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @notice Updates the address of the ACL admin.\\r\\n     * @param newAclAdmin The address of the new ACL admin\\r\\n     */\\r\\n    function setACLAdmin(address newAclAdmin) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the address of the price oracle sentinel.\\r\\n     * @return The address of the PriceOracleSentinel\\r\\n     */\\r\\n    function getPriceOracleSentinel() external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @notice Updates the address of the price oracle sentinel.\\r\\n     * @param newPriceOracleSentinel The address of the new PriceOracleSentinel\\r\\n     **/\\r\\n    function setPriceOracleSentinel(address newPriceOracleSentinel) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the address of the data provider.\\r\\n     * @return The address of the DataProvider\\r\\n     */\\r\\n    function getPoolDataProvider() external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @notice Updates the address of the data provider.\\r\\n     * @param newDataProvider The address of the new DataProvider\\r\\n     **/\\r\\n    function setPoolDataProvider(address newDataProvider) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x1ba9f3a62de321c6b9f96ddff342bedc2426b984c509d69a4571006fee0a4196\",\"license\":\"AGPL-3.0\"},\"core-v3/contracts/protocol/libraries/aqualis-upgradeability/BaseImmutableAdminUpgradeabilityProxy.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\r\\npragma solidity 0.8.10;\\r\\n\\r\\nimport {BaseUpgradeabilityProxy} from \\\"../../../dependencies/openzeppelin/upgradeability/BaseUpgradeabilityProxy.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title BaseImmutableAdminUpgradeabilityProxy\\r\\n * @author Aqualis, inspired by the OpenZeppelin upgradeability proxy pattern\\r\\n * @notice This contract combines an upgradeability proxy with an authorization\\r\\n * mechanism for administrative tasks.\\r\\n * @dev The admin role is stored in an immutable, which helps saving transactions costs\\r\\n * All external functions in this contract must be guarded by the\\r\\n * `ifAdmin` modifier. See ethereum/solidity#3864 for a Solidity\\r\\n * feature proposal that would enable this to be done automatically.\\r\\n */\\r\\ncontract BaseImmutableAdminUpgradeabilityProxy is BaseUpgradeabilityProxy {\\r\\n    address internal immutable _admin;\\r\\n\\r\\n    /**\\r\\n     * @dev Constructor.\\r\\n     * @param admin The address of the admin\\r\\n     */\\r\\n    constructor(address admin) {\\r\\n        _admin = admin;\\r\\n    }\\r\\n\\r\\n    modifier ifAdmin() {\\r\\n        if (msg.sender == _admin) {\\r\\n            _;\\r\\n        } else {\\r\\n            _fallback();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Return the admin address\\r\\n     * @return The address of the proxy admin.\\r\\n     */\\r\\n    function admin() external ifAdmin returns (address) {\\r\\n        return _admin;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Return the implementation address\\r\\n     * @return The address of the implementation.\\r\\n     */\\r\\n    function implementation() external ifAdmin returns (address) {\\r\\n        return _implementation();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Upgrade the backing implementation of the proxy.\\r\\n     * @dev Only the admin can call this function.\\r\\n     * @param newImplementation The address of the new implementation.\\r\\n     */\\r\\n    function upgradeTo(address newImplementation) external ifAdmin {\\r\\n        _upgradeTo(newImplementation);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Upgrade the backing implementation of the proxy and call a function\\r\\n     * on the new implementation.\\r\\n     * @dev This is useful to initialize the proxied contract.\\r\\n     * @param newImplementation The address of the new implementation.\\r\\n     * @param data Data to send as msg.data in the low level call.\\r\\n     * It should include the signature and the parameters of the function to be called, as described in\\r\\n     * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\\r\\n     */\\r\\n    function upgradeToAndCall(address newImplementation, bytes calldata data)\\r\\n        external\\r\\n        payable\\r\\n        ifAdmin\\r\\n    {\\r\\n        _upgradeTo(newImplementation);\\r\\n        (bool success, ) = newImplementation.delegatecall(data);\\r\\n        require(success);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Only fall back when the sender is not the admin.\\r\\n     */\\r\\n    function _willFallback() internal virtual override {\\r\\n        require(\\r\\n            msg.sender != _admin,\\r\\n            \\\"Cannot call fallback function from the proxy admin\\\"\\r\\n        );\\r\\n        super._willFallback();\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x693c7de29a215a0fc8a102552af05d2d2ab8adbf8b35f7dc9043b6a8a38c1c4c\",\"license\":\"AGPL-3.0\"},\"core-v3/contracts/protocol/libraries/aqualis-upgradeability/InitializableImmutableAdminUpgradeabilityProxy.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\r\\npragma solidity 0.8.10;\\r\\n\\r\\nimport {InitializableUpgradeabilityProxy} from \\\"../../../dependencies/openzeppelin/upgradeability/InitializableUpgradeabilityProxy.sol\\\";\\r\\nimport {Proxy} from \\\"../../../dependencies/openzeppelin/upgradeability/Proxy.sol\\\";\\r\\nimport {BaseImmutableAdminUpgradeabilityProxy} from \\\"./BaseImmutableAdminUpgradeabilityProxy.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title InitializableAdminUpgradeabilityProxy\\r\\n * @author Aqualis\\r\\n * @dev Extends BaseAdminUpgradeabilityProxy with an initializer function\\r\\n */\\r\\ncontract InitializableImmutableAdminUpgradeabilityProxy is\\r\\n    BaseImmutableAdminUpgradeabilityProxy,\\r\\n    InitializableUpgradeabilityProxy\\r\\n{\\r\\n    /**\\r\\n     * @dev Constructor.\\r\\n     * @param admin The address of the admin\\r\\n     */\\r\\n    constructor(address admin) BaseImmutableAdminUpgradeabilityProxy(admin) {\\r\\n        // Intentionally left blank\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc BaseImmutableAdminUpgradeabilityProxy\\r\\n    function _willFallback()\\r\\n        internal\\r\\n        override(BaseImmutableAdminUpgradeabilityProxy, Proxy)\\r\\n    {\\r\\n        BaseImmutableAdminUpgradeabilityProxy._willFallback();\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xedd781a561b4cc197fa483a98743bcbb8eb60a32f0e65faeda4e476ae2aca44a\",\"license\":\"AGPL-3.0\"},\"core-v3/contracts/protocol/libraries/configuration/ReserveConfiguration.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity 0.8.10;\\r\\n\\r\\nimport {Errors} from \\\"../helpers/Errors.sol\\\";\\r\\nimport {DataTypes} from \\\"../types/DataTypes.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title ReserveConfiguration library\\r\\n * @author Aqualis\\r\\n * @notice Implements the bitmap logic to handle the reserve configuration\\r\\n */\\r\\nlibrary ReserveConfiguration {\\r\\n    uint256 internal constant LTV_MASK =                       0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000; // prettier-ignore\\r\\n    uint256 internal constant LIQUIDATION_THRESHOLD_MASK =     0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFF; // prettier-ignore\\r\\n    uint256 internal constant LIQUIDATION_BONUS_MASK =         0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFFFFFF; // prettier-ignore\\r\\n    uint256 internal constant DECIMALS_MASK =                  0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00FFFFFFFFFFFF; // prettier-ignore\\r\\n    uint256 internal constant ACTIVE_MASK =                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFF; // prettier-ignore\\r\\n    uint256 internal constant FROZEN_MASK =                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFF; // prettier-ignore\\r\\n    uint256 internal constant BORROWING_MASK =                 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFFFFFF; // prettier-ignore\\r\\n    uint256 internal constant STABLE_BORROWING_MASK =          0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFFFFFFFFF; // prettier-ignore\\r\\n    uint256 internal constant PAUSED_MASK =                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFF; // prettier-ignore\\r\\n    uint256 internal constant BORROWABLE_IN_ISOLATION_MASK =   0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFF; // prettier-ignore\\r\\n    uint256 internal constant SILOED_BORROWING_MASK =          0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFFFFFFF; // prettier-ignore\\r\\n    uint256 internal constant RESERVE_FACTOR_MASK =            0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFFFFFFFFFFFFFF; // prettier-ignore\\r\\n    uint256 internal constant BORROW_CAP_MASK =                0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000FFFFFFFFFFFFFFFFFFFF; // prettier-ignore\\r\\n    uint256 internal constant SUPPLY_CAP_MASK =                0xFFFFFFFFFFFFFFFFFFFFFFFFFF000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore\\r\\n    uint256 internal constant LIQUIDATION_PROTOCOL_FEE_MASK =  0xFFFFFFFFFFFFFFFFFFFFFF0000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore\\r\\n    uint256 internal constant EMODE_CATEGORY_MASK =            0xFFFFFFFFFFFFFFFFFFFF00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore\\r\\n    uint256 internal constant UNBACKED_MINT_CAP_MASK =         0xFFFFFFFFFFF000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore\\r\\n    uint256 internal constant DEBT_CEILING_MASK =              0xF0000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore\\r\\n\\r\\n    /// @dev For the LTV, the start bit is 0 (up to 15), hence no bitshifting is needed\\r\\n    uint256 internal constant LIQUIDATION_THRESHOLD_START_BIT_POSITION = 16;\\r\\n    uint256 internal constant LIQUIDATION_BONUS_START_BIT_POSITION = 32;\\r\\n    uint256 internal constant RESERVE_DECIMALS_START_BIT_POSITION = 48;\\r\\n    uint256 internal constant IS_ACTIVE_START_BIT_POSITION = 56;\\r\\n    uint256 internal constant IS_FROZEN_START_BIT_POSITION = 57;\\r\\n    uint256 internal constant BORROWING_ENABLED_START_BIT_POSITION = 58;\\r\\n    uint256 internal constant STABLE_BORROWING_ENABLED_START_BIT_POSITION = 59;\\r\\n    uint256 internal constant IS_PAUSED_START_BIT_POSITION = 60;\\r\\n    uint256 internal constant BORROWABLE_IN_ISOLATION_START_BIT_POSITION = 61;\\r\\n    uint256 internal constant SILOED_BORROWING_START_BIT_POSITION = 62;\\r\\n    /// @dev bit 63 reserved\\r\\n\\r\\n    uint256 internal constant RESERVE_FACTOR_START_BIT_POSITION = 64;\\r\\n    uint256 internal constant BORROW_CAP_START_BIT_POSITION = 80;\\r\\n    uint256 internal constant SUPPLY_CAP_START_BIT_POSITION = 116;\\r\\n    uint256 internal constant LIQUIDATION_PROTOCOL_FEE_START_BIT_POSITION = 152;\\r\\n    uint256 internal constant EMODE_CATEGORY_START_BIT_POSITION = 168;\\r\\n    uint256 internal constant UNBACKED_MINT_CAP_START_BIT_POSITION = 176;\\r\\n    uint256 internal constant DEBT_CEILING_START_BIT_POSITION = 212;\\r\\n\\r\\n    uint256 internal constant MAX_VALID_LTV = 65535;\\r\\n    uint256 internal constant MAX_VALID_LIQUIDATION_THRESHOLD = 65535;\\r\\n    uint256 internal constant MAX_VALID_LIQUIDATION_BONUS = 65535;\\r\\n    uint256 internal constant MAX_VALID_DECIMALS = 255;\\r\\n    uint256 internal constant MAX_VALID_RESERVE_FACTOR = 65535;\\r\\n    uint256 internal constant MAX_VALID_BORROW_CAP = 68719476735;\\r\\n    uint256 internal constant MAX_VALID_SUPPLY_CAP = 68719476735;\\r\\n    uint256 internal constant MAX_VALID_LIQUIDATION_PROTOCOL_FEE = 65535;\\r\\n    uint256 internal constant MAX_VALID_EMODE_CATEGORY = 255;\\r\\n    uint256 internal constant MAX_VALID_UNBACKED_MINT_CAP = 68719476735;\\r\\n    uint256 internal constant MAX_VALID_DEBT_CEILING = 1099511627775;\\r\\n\\r\\n    uint256 public constant DEBT_CEILING_DECIMALS = 2;\\r\\n    uint16 public constant MAX_RESERVES_COUNT = 128;\\r\\n\\r\\n    /**\\r\\n     * @notice Sets the Loan to Value of the reserve\\r\\n     * @param self The reserve configuration\\r\\n     * @param ltv The new ltv\\r\\n     **/\\r\\n    function setLtv(DataTypes.ReserveConfigurationMap memory self, uint256 ltv)\\r\\n        internal\\r\\n        pure\\r\\n    {\\r\\n        require(ltv <= MAX_VALID_LTV, Errors.INVALID_LTV);\\r\\n\\r\\n        self.data = (self.data & LTV_MASK) | ltv;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the Loan to Value of the reserve\\r\\n     * @param self The reserve configuration\\r\\n     * @return The loan to value\\r\\n     **/\\r\\n    function getLtv(DataTypes.ReserveConfigurationMap memory self)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return self.data & ~LTV_MASK;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sets the liquidation threshold of the reserve\\r\\n     * @param self The reserve configuration\\r\\n     * @param threshold The new liquidation threshold\\r\\n     **/\\r\\n    function setLiquidationThreshold(\\r\\n        DataTypes.ReserveConfigurationMap memory self,\\r\\n        uint256 threshold\\r\\n    ) internal pure {\\r\\n        require(\\r\\n            threshold <= MAX_VALID_LIQUIDATION_THRESHOLD,\\r\\n            Errors.INVALID_LIQ_THRESHOLD\\r\\n        );\\r\\n\\r\\n        self.data =\\r\\n            (self.data & LIQUIDATION_THRESHOLD_MASK) |\\r\\n            (threshold << LIQUIDATION_THRESHOLD_START_BIT_POSITION);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the liquidation threshold of the reserve\\r\\n     * @param self The reserve configuration\\r\\n     * @return The liquidation threshold\\r\\n     **/\\r\\n    function getLiquidationThreshold(\\r\\n        DataTypes.ReserveConfigurationMap memory self\\r\\n    ) internal pure returns (uint256) {\\r\\n        return\\r\\n            (self.data & ~LIQUIDATION_THRESHOLD_MASK) >>\\r\\n            LIQUIDATION_THRESHOLD_START_BIT_POSITION;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sets the liquidation bonus of the reserve\\r\\n     * @param self The reserve configuration\\r\\n     * @param bonus The new liquidation bonus\\r\\n     **/\\r\\n    function setLiquidationBonus(\\r\\n        DataTypes.ReserveConfigurationMap memory self,\\r\\n        uint256 bonus\\r\\n    ) internal pure {\\r\\n        require(bonus <= MAX_VALID_LIQUIDATION_BONUS, Errors.INVALID_LIQ_BONUS);\\r\\n\\r\\n        self.data =\\r\\n            (self.data & LIQUIDATION_BONUS_MASK) |\\r\\n            (bonus << LIQUIDATION_BONUS_START_BIT_POSITION);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the liquidation bonus of the reserve\\r\\n     * @param self The reserve configuration\\r\\n     * @return The liquidation bonus\\r\\n     **/\\r\\n    function getLiquidationBonus(DataTypes.ReserveConfigurationMap memory self)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return\\r\\n            (self.data & ~LIQUIDATION_BONUS_MASK) >>\\r\\n            LIQUIDATION_BONUS_START_BIT_POSITION;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sets the decimals of the underlying asset of the reserve\\r\\n     * @param self The reserve configuration\\r\\n     * @param decimals The decimals\\r\\n     **/\\r\\n    function setDecimals(\\r\\n        DataTypes.ReserveConfigurationMap memory self,\\r\\n        uint256 decimals\\r\\n    ) internal pure {\\r\\n        require(decimals <= MAX_VALID_DECIMALS, Errors.INVALID_DECIMALS);\\r\\n\\r\\n        self.data =\\r\\n            (self.data & DECIMALS_MASK) |\\r\\n            (decimals << RESERVE_DECIMALS_START_BIT_POSITION);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the decimals of the underlying asset of the reserve\\r\\n     * @param self The reserve configuration\\r\\n     * @return The decimals of the asset\\r\\n     **/\\r\\n    function getDecimals(DataTypes.ReserveConfigurationMap memory self)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return\\r\\n            (self.data & ~DECIMALS_MASK) >> RESERVE_DECIMALS_START_BIT_POSITION;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sets the active state of the reserve\\r\\n     * @param self The reserve configuration\\r\\n     * @param active The active state\\r\\n     **/\\r\\n    function setActive(\\r\\n        DataTypes.ReserveConfigurationMap memory self,\\r\\n        bool active\\r\\n    ) internal pure {\\r\\n        self.data =\\r\\n            (self.data & ACTIVE_MASK) |\\r\\n            (uint256(active ? 1 : 0) << IS_ACTIVE_START_BIT_POSITION);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the active state of the reserve\\r\\n     * @param self The reserve configuration\\r\\n     * @return The active state\\r\\n     **/\\r\\n    function getActive(DataTypes.ReserveConfigurationMap memory self)\\r\\n        internal\\r\\n        pure\\r\\n        returns (bool)\\r\\n    {\\r\\n        return (self.data & ~ACTIVE_MASK) != 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sets the frozen state of the reserve\\r\\n     * @param self The reserve configuration\\r\\n     * @param frozen The frozen state\\r\\n     **/\\r\\n    function setFrozen(\\r\\n        DataTypes.ReserveConfigurationMap memory self,\\r\\n        bool frozen\\r\\n    ) internal pure {\\r\\n        self.data =\\r\\n            (self.data & FROZEN_MASK) |\\r\\n            (uint256(frozen ? 1 : 0) << IS_FROZEN_START_BIT_POSITION);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the frozen state of the reserve\\r\\n     * @param self The reserve configuration\\r\\n     * @return The frozen state\\r\\n     **/\\r\\n    function getFrozen(DataTypes.ReserveConfigurationMap memory self)\\r\\n        internal\\r\\n        pure\\r\\n        returns (bool)\\r\\n    {\\r\\n        return (self.data & ~FROZEN_MASK) != 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sets the paused state of the reserve\\r\\n     * @param self The reserve configuration\\r\\n     * @param paused The paused state\\r\\n     **/\\r\\n    function setPaused(\\r\\n        DataTypes.ReserveConfigurationMap memory self,\\r\\n        bool paused\\r\\n    ) internal pure {\\r\\n        self.data =\\r\\n            (self.data & PAUSED_MASK) |\\r\\n            (uint256(paused ? 1 : 0) << IS_PAUSED_START_BIT_POSITION);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the paused state of the reserve\\r\\n     * @param self The reserve configuration\\r\\n     * @return The paused state\\r\\n     **/\\r\\n    function getPaused(DataTypes.ReserveConfigurationMap memory self)\\r\\n        internal\\r\\n        pure\\r\\n        returns (bool)\\r\\n    {\\r\\n        return (self.data & ~PAUSED_MASK) != 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sets the borrowable in isolation flag for the reserve.\\r\\n     * @dev When this flag is set to true, the asset will be borrowable against isolated collaterals and the borrowed\\r\\n     * amount will be accumulated in the isolated collateral's total debt exposure.\\r\\n     * @dev Only assets of the same family (eg USD stablecoins) should be borrowable in isolation mode to keep\\r\\n     * consistency in the debt ceiling calculations.\\r\\n     * @param self The reserve configuration\\r\\n     * @param borrowable True if the asset is borrowable\\r\\n     **/\\r\\n    function setBorrowableInIsolation(\\r\\n        DataTypes.ReserveConfigurationMap memory self,\\r\\n        bool borrowable\\r\\n    ) internal pure {\\r\\n        self.data =\\r\\n            (self.data & BORROWABLE_IN_ISOLATION_MASK) |\\r\\n            (uint256(borrowable ? 1 : 0) <<\\r\\n                BORROWABLE_IN_ISOLATION_START_BIT_POSITION);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the borrowable in isolation flag for the reserve.\\r\\n     * @dev If the returned flag is true, the asset is borrowable against isolated collateral. Assets borrowed with\\r\\n     * isolated collateral is accounted for in the isolated collateral's total debt exposure.\\r\\n     * @dev Only assets of the same family (eg USD stablecoins) should be borrowable in isolation mode to keep\\r\\n     * consistency in the debt ceiling calculations.\\r\\n     * @param self The reserve configuration\\r\\n     * @return The borrowable in isolation flag\\r\\n     **/\\r\\n    function getBorrowableInIsolation(\\r\\n        DataTypes.ReserveConfigurationMap memory self\\r\\n    ) internal pure returns (bool) {\\r\\n        return (self.data & ~BORROWABLE_IN_ISOLATION_MASK) != 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sets the siloed borrowing flag for the reserve.\\r\\n     * @dev When this flag is set to true, users borrowing this asset will not be allowed to borrow any other asset.\\r\\n     * @param self The reserve configuration\\r\\n     * @param siloed True if the asset is siloed\\r\\n     **/\\r\\n    function setSiloedBorrowing(\\r\\n        DataTypes.ReserveConfigurationMap memory self,\\r\\n        bool siloed\\r\\n    ) internal pure {\\r\\n        self.data =\\r\\n            (self.data & SILOED_BORROWING_MASK) |\\r\\n            (uint256(siloed ? 1 : 0) << SILOED_BORROWING_START_BIT_POSITION);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the siloed borrowing flag for the reserve.\\r\\n     * @dev When this flag is set to true, users borrowing this asset will not be allowed to borrow any other asset.\\r\\n     * @param self The reserve configuration\\r\\n     * @return The siloed borrowing flag\\r\\n     **/\\r\\n    function getSiloedBorrowing(DataTypes.ReserveConfigurationMap memory self)\\r\\n        internal\\r\\n        pure\\r\\n        returns (bool)\\r\\n    {\\r\\n        return (self.data & ~SILOED_BORROWING_MASK) != 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Enables or disables borrowing on the reserve\\r\\n     * @param self The reserve configuration\\r\\n     * @param enabled True if the borrowing needs to be enabled, false otherwise\\r\\n     **/\\r\\n    function setBorrowingEnabled(\\r\\n        DataTypes.ReserveConfigurationMap memory self,\\r\\n        bool enabled\\r\\n    ) internal pure {\\r\\n        self.data =\\r\\n            (self.data & BORROWING_MASK) |\\r\\n            (uint256(enabled ? 1 : 0) << BORROWING_ENABLED_START_BIT_POSITION);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the borrowing state of the reserve\\r\\n     * @param self The reserve configuration\\r\\n     * @return The borrowing state\\r\\n     **/\\r\\n    function getBorrowingEnabled(DataTypes.ReserveConfigurationMap memory self)\\r\\n        internal\\r\\n        pure\\r\\n        returns (bool)\\r\\n    {\\r\\n        return (self.data & ~BORROWING_MASK) != 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Enables or disables stable rate borrowing on the reserve\\r\\n     * @param self The reserve configuration\\r\\n     * @param enabled True if the stable rate borrowing needs to be enabled, false otherwise\\r\\n     **/\\r\\n    function setStableRateBorrowingEnabled(\\r\\n        DataTypes.ReserveConfigurationMap memory self,\\r\\n        bool enabled\\r\\n    ) internal pure {\\r\\n        self.data =\\r\\n            (self.data & STABLE_BORROWING_MASK) |\\r\\n            (uint256(enabled ? 1 : 0) <<\\r\\n                STABLE_BORROWING_ENABLED_START_BIT_POSITION);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the stable rate borrowing state of the reserve\\r\\n     * @param self The reserve configuration\\r\\n     * @return The stable rate borrowing state\\r\\n     **/\\r\\n    function getStableRateBorrowingEnabled(\\r\\n        DataTypes.ReserveConfigurationMap memory self\\r\\n    ) internal pure returns (bool) {\\r\\n        return (self.data & ~STABLE_BORROWING_MASK) != 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sets the reserve factor of the reserve\\r\\n     * @param self The reserve configuration\\r\\n     * @param reserveFactor The reserve factor\\r\\n     **/\\r\\n    function setReserveFactor(\\r\\n        DataTypes.ReserveConfigurationMap memory self,\\r\\n        uint256 reserveFactor\\r\\n    ) internal pure {\\r\\n        require(\\r\\n            reserveFactor <= MAX_VALID_RESERVE_FACTOR,\\r\\n            Errors.INVALID_RESERVE_FACTOR\\r\\n        );\\r\\n\\r\\n        self.data =\\r\\n            (self.data & RESERVE_FACTOR_MASK) |\\r\\n            (reserveFactor << RESERVE_FACTOR_START_BIT_POSITION);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the reserve factor of the reserve\\r\\n     * @param self The reserve configuration\\r\\n     * @return The reserve factor\\r\\n     **/\\r\\n    function getReserveFactor(DataTypes.ReserveConfigurationMap memory self)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return\\r\\n            (self.data & ~RESERVE_FACTOR_MASK) >>\\r\\n            RESERVE_FACTOR_START_BIT_POSITION;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sets the borrow cap of the reserve\\r\\n     * @param self The reserve configuration\\r\\n     * @param borrowCap The borrow cap\\r\\n     **/\\r\\n    function setBorrowCap(\\r\\n        DataTypes.ReserveConfigurationMap memory self,\\r\\n        uint256 borrowCap\\r\\n    ) internal pure {\\r\\n        require(borrowCap <= MAX_VALID_BORROW_CAP, Errors.INVALID_BORROW_CAP);\\r\\n\\r\\n        self.data =\\r\\n            (self.data & BORROW_CAP_MASK) |\\r\\n            (borrowCap << BORROW_CAP_START_BIT_POSITION);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the borrow cap of the reserve\\r\\n     * @param self The reserve configuration\\r\\n     * @return The borrow cap\\r\\n     **/\\r\\n    function getBorrowCap(DataTypes.ReserveConfigurationMap memory self)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return (self.data & ~BORROW_CAP_MASK) >> BORROW_CAP_START_BIT_POSITION;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sets the supply cap of the reserve\\r\\n     * @param self The reserve configuration\\r\\n     * @param supplyCap The supply cap\\r\\n     **/\\r\\n    function setSupplyCap(\\r\\n        DataTypes.ReserveConfigurationMap memory self,\\r\\n        uint256 supplyCap\\r\\n    ) internal pure {\\r\\n        require(supplyCap <= MAX_VALID_SUPPLY_CAP, Errors.INVALID_SUPPLY_CAP);\\r\\n\\r\\n        self.data =\\r\\n            (self.data & SUPPLY_CAP_MASK) |\\r\\n            (supplyCap << SUPPLY_CAP_START_BIT_POSITION);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the supply cap of the reserve\\r\\n     * @param self The reserve configuration\\r\\n     * @return The supply cap\\r\\n     **/\\r\\n    function getSupplyCap(DataTypes.ReserveConfigurationMap memory self)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return (self.data & ~SUPPLY_CAP_MASK) >> SUPPLY_CAP_START_BIT_POSITION;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sets the debt ceiling in isolation mode for the asset\\r\\n     * @param self The reserve configuration\\r\\n     * @param ceiling The maximum debt ceiling for the asset\\r\\n     **/\\r\\n    function setDebtCeiling(\\r\\n        DataTypes.ReserveConfigurationMap memory self,\\r\\n        uint256 ceiling\\r\\n    ) internal pure {\\r\\n        require(ceiling <= MAX_VALID_DEBT_CEILING, Errors.INVALID_DEBT_CEILING);\\r\\n\\r\\n        self.data =\\r\\n            (self.data & DEBT_CEILING_MASK) |\\r\\n            (ceiling << DEBT_CEILING_START_BIT_POSITION);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the debt ceiling for the asset if the asset is in isolation mode\\r\\n     * @param self The reserve configuration\\r\\n     * @return The debt ceiling (0 = isolation mode disabled)\\r\\n     **/\\r\\n    function getDebtCeiling(DataTypes.ReserveConfigurationMap memory self)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return\\r\\n            (self.data & ~DEBT_CEILING_MASK) >> DEBT_CEILING_START_BIT_POSITION;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sets the liquidation protocol fee of the reserve\\r\\n     * @param self The reserve configuration\\r\\n     * @param liquidationProtocolFee The liquidation protocol fee\\r\\n     **/\\r\\n    function setLiquidationProtocolFee(\\r\\n        DataTypes.ReserveConfigurationMap memory self,\\r\\n        uint256 liquidationProtocolFee\\r\\n    ) internal pure {\\r\\n        require(\\r\\n            liquidationProtocolFee <= MAX_VALID_LIQUIDATION_PROTOCOL_FEE,\\r\\n            Errors.INVALID_LIQUIDATION_PROTOCOL_FEE\\r\\n        );\\r\\n\\r\\n        self.data =\\r\\n            (self.data & LIQUIDATION_PROTOCOL_FEE_MASK) |\\r\\n            (liquidationProtocolFee <<\\r\\n                LIQUIDATION_PROTOCOL_FEE_START_BIT_POSITION);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Gets the liquidation protocol fee\\r\\n     * @param self The reserve configuration\\r\\n     * @return The liquidation protocol fee\\r\\n     **/\\r\\n    function getLiquidationProtocolFee(\\r\\n        DataTypes.ReserveConfigurationMap memory self\\r\\n    ) internal pure returns (uint256) {\\r\\n        return\\r\\n            (self.data & ~LIQUIDATION_PROTOCOL_FEE_MASK) >>\\r\\n            LIQUIDATION_PROTOCOL_FEE_START_BIT_POSITION;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sets the unbacked mint cap of the reserve\\r\\n     * @param self The reserve configuration\\r\\n     * @param unbackedMintCap The unbacked mint cap\\r\\n     **/\\r\\n    function setUnbackedMintCap(\\r\\n        DataTypes.ReserveConfigurationMap memory self,\\r\\n        uint256 unbackedMintCap\\r\\n    ) internal pure {\\r\\n        require(\\r\\n            unbackedMintCap <= MAX_VALID_UNBACKED_MINT_CAP,\\r\\n            Errors.INVALID_UNBACKED_MINT_CAP\\r\\n        );\\r\\n\\r\\n        self.data =\\r\\n            (self.data & UNBACKED_MINT_CAP_MASK) |\\r\\n            (unbackedMintCap << UNBACKED_MINT_CAP_START_BIT_POSITION);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Gets the unbacked mint cap of the reserve\\r\\n     * @param self The reserve configuration\\r\\n     * @return The unbacked mint cap\\r\\n     **/\\r\\n    function getUnbackedMintCap(DataTypes.ReserveConfigurationMap memory self)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return\\r\\n            (self.data & ~UNBACKED_MINT_CAP_MASK) >>\\r\\n            UNBACKED_MINT_CAP_START_BIT_POSITION;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sets the eMode asset category\\r\\n     * @param self The reserve configuration\\r\\n     * @param category The asset category when the user selects the eMode\\r\\n     **/\\r\\n    function setEModeCategory(\\r\\n        DataTypes.ReserveConfigurationMap memory self,\\r\\n        uint256 category\\r\\n    ) internal pure {\\r\\n        require(\\r\\n            category <= MAX_VALID_EMODE_CATEGORY,\\r\\n            Errors.INVALID_EMODE_CATEGORY\\r\\n        );\\r\\n\\r\\n        self.data =\\r\\n            (self.data & EMODE_CATEGORY_MASK) |\\r\\n            (category << EMODE_CATEGORY_START_BIT_POSITION);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Gets the eMode asset category\\r\\n     * @param self The reserve configuration\\r\\n     * @return The eMode category for the asset\\r\\n     **/\\r\\n    function getEModeCategory(DataTypes.ReserveConfigurationMap memory self)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return\\r\\n            (self.data & ~EMODE_CATEGORY_MASK) >>\\r\\n            EMODE_CATEGORY_START_BIT_POSITION;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the configuration flags of the reserve\\r\\n     * @param self The reserve configuration\\r\\n     * @return The state flag representing active\\r\\n     * @return The state flag representing frozen\\r\\n     * @return The state flag representing borrowing enabled\\r\\n     * @return The state flag representing stableRateBorrowing enabled\\r\\n     * @return The state flag representing paused\\r\\n     **/\\r\\n    function getFlags(DataTypes.ReserveConfigurationMap memory self)\\r\\n        internal\\r\\n        pure\\r\\n        returns (\\r\\n            bool,\\r\\n            bool,\\r\\n            bool,\\r\\n            bool,\\r\\n            bool\\r\\n        )\\r\\n    {\\r\\n        uint256 dataLocal = self.data;\\r\\n\\r\\n        return (\\r\\n            (dataLocal & ~ACTIVE_MASK) != 0,\\r\\n            (dataLocal & ~FROZEN_MASK) != 0,\\r\\n            (dataLocal & ~BORROWING_MASK) != 0,\\r\\n            (dataLocal & ~STABLE_BORROWING_MASK) != 0,\\r\\n            (dataLocal & ~PAUSED_MASK) != 0\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the configuration parameters of the reserve from storage\\r\\n     * @param self The reserve configuration\\r\\n     * @return The state param representing ltv\\r\\n     * @return The state param representing liquidation threshold\\r\\n     * @return The state param representing liquidation bonus\\r\\n     * @return The state param representing reserve decimals\\r\\n     * @return The state param representing reserve factor\\r\\n     * @return The state param representing eMode category\\r\\n     **/\\r\\n    function getParams(DataTypes.ReserveConfigurationMap memory self)\\r\\n        internal\\r\\n        pure\\r\\n        returns (\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256\\r\\n        )\\r\\n    {\\r\\n        uint256 dataLocal = self.data;\\r\\n\\r\\n        return (\\r\\n            dataLocal & ~LTV_MASK,\\r\\n            (dataLocal & ~LIQUIDATION_THRESHOLD_MASK) >>\\r\\n                LIQUIDATION_THRESHOLD_START_BIT_POSITION,\\r\\n            (dataLocal & ~LIQUIDATION_BONUS_MASK) >>\\r\\n                LIQUIDATION_BONUS_START_BIT_POSITION,\\r\\n            (dataLocal & ~DECIMALS_MASK) >> RESERVE_DECIMALS_START_BIT_POSITION,\\r\\n            (dataLocal & ~RESERVE_FACTOR_MASK) >>\\r\\n                RESERVE_FACTOR_START_BIT_POSITION,\\r\\n            (dataLocal & ~EMODE_CATEGORY_MASK) >>\\r\\n                EMODE_CATEGORY_START_BIT_POSITION\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the caps parameters of the reserve from storage\\r\\n     * @param self The reserve configuration\\r\\n     * @return The state param representing borrow cap\\r\\n     * @return The state param representing supply cap.\\r\\n     **/\\r\\n    function getCaps(DataTypes.ReserveConfigurationMap memory self)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256, uint256)\\r\\n    {\\r\\n        uint256 dataLocal = self.data;\\r\\n\\r\\n        return (\\r\\n            (dataLocal & ~BORROW_CAP_MASK) >> BORROW_CAP_START_BIT_POSITION,\\r\\n            (dataLocal & ~SUPPLY_CAP_MASK) >> SUPPLY_CAP_START_BIT_POSITION\\r\\n        );\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x0edf94daf5a721e4bd20fefc74f3cfb6e19def780b803509212d4f435dec01ec\",\"license\":\"BUSL-1.1\"},\"core-v3/contracts/protocol/libraries/helpers/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity 0.8.10;\\r\\n\\r\\n/**\\r\\n * @title Errors library\\r\\n * @author Aqualis\\r\\n * @notice Defines the error messages emitted by the different contracts of the Aqualis protocol\\r\\n */\\r\\nlibrary Errors {\\r\\n    string public constant CALLER_NOT_POOL_ADMIN = \\\"1\\\"; // 'The caller of the function is not a pool admin'\\r\\n    string public constant CALLER_NOT_EMERGENCY_ADMIN = \\\"2\\\"; // 'The caller of the function is not an emergency admin'\\r\\n    string public constant CALLER_NOT_POOL_OR_EMERGENCY_ADMIN = \\\"3\\\"; // 'The caller of the function is not a pool or emergency admin'\\r\\n    string public constant CALLER_NOT_RISK_OR_POOL_ADMIN = \\\"4\\\"; // 'The caller of the function is not a risk or pool admin'\\r\\n    string public constant CALLER_NOT_ASSET_LISTING_OR_POOL_ADMIN = \\\"5\\\"; // 'The caller of the function is not an asset listing or pool admin'\\r\\n    string public constant CALLER_NOT_BRIDGE = \\\"6\\\"; // 'The caller of the function is not a bridge'\\r\\n    string public constant ADDRESSES_PROVIDER_NOT_REGISTERED = \\\"7\\\"; // 'Pool addresses provider is not registered'\\r\\n    string public constant INVALID_ADDRESSES_PROVIDER_ID = \\\"8\\\"; // 'Invalid id for the pool addresses provider'\\r\\n    string public constant NOT_CONTRACT = \\\"9\\\"; // 'Address is not a contract'\\r\\n    string public constant CALLER_NOT_POOL_CONFIGURATOR = \\\"10\\\"; // 'The caller of the function is not the pool configurator'\\r\\n    string public constant CALLER_NOT_ATOKEN = \\\"11\\\"; // 'The caller of the function is not an AToken'\\r\\n    string public constant INVALID_ADDRESSES_PROVIDER = \\\"12\\\"; // 'The address of the pool addresses provider is invalid'\\r\\n    string public constant INVALID_FLASHLOAN_EXECUTOR_RETURN = \\\"13\\\"; // 'Invalid return value of the flashloan executor function'\\r\\n    string public constant RESERVE_ALREADY_ADDED = \\\"14\\\"; // 'Reserve has already been added to reserve list'\\r\\n    string public constant NO_MORE_RESERVES_ALLOWED = \\\"15\\\"; // 'Maximum amount of reserves in the pool reached'\\r\\n    string public constant EMODE_CATEGORY_RESERVED = \\\"16\\\"; // 'Zero eMode category is reserved for volatile heterogeneous assets'\\r\\n    string public constant INVALID_EMODE_CATEGORY_ASSIGNMENT = \\\"17\\\"; // 'Invalid eMode category assignment to asset'\\r\\n    string public constant RESERVE_LIQUIDITY_NOT_ZERO = \\\"18\\\"; // 'The liquidity of the reserve needs to be 0'\\r\\n    string public constant FLASHLOAN_PREMIUM_INVALID = \\\"19\\\"; // 'Invalid flashloan premium'\\r\\n    string public constant INVALID_RESERVE_PARAMS = \\\"20\\\"; // 'Invalid risk parameters for the reserve'\\r\\n    string public constant INVALID_EMODE_CATEGORY_PARAMS = \\\"21\\\"; // 'Invalid risk parameters for the eMode category'\\r\\n    string public constant BRIDGE_PROTOCOL_FEE_INVALID = \\\"22\\\"; // 'Invalid bridge protocol fee'\\r\\n    string public constant CALLER_MUST_BE_POOL = \\\"23\\\"; // 'The caller of this function must be a pool'\\r\\n    string public constant INVALID_MINT_AMOUNT = \\\"24\\\"; // 'Invalid amount to mint'\\r\\n    string public constant INVALID_BURN_AMOUNT = \\\"25\\\"; // 'Invalid amount to burn'\\r\\n    string public constant INVALID_AMOUNT = \\\"26\\\"; // 'Amount must be greater than 0'\\r\\n    string public constant RESERVE_INACTIVE = \\\"27\\\"; // 'Action requires an active reserve'\\r\\n    string public constant RESERVE_FROZEN = \\\"28\\\"; // 'Action cannot be performed because the reserve is frozen'\\r\\n    string public constant RESERVE_PAUSED = \\\"29\\\"; // 'Action cannot be performed because the reserve is paused'\\r\\n    string public constant BORROWING_NOT_ENABLED = \\\"30\\\"; // 'Borrowing is not enabled'\\r\\n    string public constant STABLE_BORROWING_NOT_ENABLED = \\\"31\\\"; // 'Stable borrowing is not enabled'\\r\\n    string public constant NOT_ENOUGH_AVAILABLE_USER_BALANCE = \\\"32\\\"; // 'User cannot withdraw more than the available balance'\\r\\n    string public constant INVALID_INTEREST_RATE_MODE_SELECTED = \\\"33\\\"; // 'Invalid interest rate mode selected'\\r\\n    string public constant COLLATERAL_BALANCE_IS_ZERO = \\\"34\\\"; // 'The collateral balance is 0'\\r\\n    string public constant HEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD =\\r\\n        \\\"35\\\"; // 'Health factor is lesser than the liquidation threshold'\\r\\n    string public constant COLLATERAL_CANNOT_COVER_NEW_BORROW = \\\"36\\\"; // 'There is not enough collateral to cover a new borrow'\\r\\n    string public constant COLLATERAL_SAME_AS_BORROWING_CURRENCY = \\\"37\\\"; // 'Collateral is (mostly) the same currency that is being borrowed'\\r\\n    string public constant AMOUNT_BIGGER_THAN_MAX_LOAN_SIZE_STABLE = \\\"38\\\"; // 'The requested amount is greater than the max loan size in stable rate mode'\\r\\n    string public constant NO_DEBT_OF_SELECTED_TYPE = \\\"39\\\"; // 'For repayment of a specific type of debt, the user needs to have debt that type'\\r\\n    string public constant NO_EXPLICIT_AMOUNT_TO_REPAY_ON_BEHALF = \\\"40\\\"; // 'To repay on behalf of a user an explicit amount to repay is needed'\\r\\n    string public constant NO_OUTSTANDING_STABLE_DEBT = \\\"41\\\"; // 'User does not have outstanding stable rate debt on this reserve'\\r\\n    string public constant NO_OUTSTANDING_VARIABLE_DEBT = \\\"42\\\"; // 'User does not have outstanding variable rate debt on this reserve'\\r\\n    string public constant UNDERLYING_BALANCE_ZERO = \\\"43\\\"; // 'The underlying balance needs to be greater than 0'\\r\\n    string public constant INTEREST_RATE_REBALANCE_CONDITIONS_NOT_MET = \\\"44\\\"; // 'Interest rate rebalance conditions were not met'\\r\\n    string public constant HEALTH_FACTOR_NOT_BELOW_THRESHOLD = \\\"45\\\"; // 'Health factor is not below the threshold'\\r\\n    string public constant COLLATERAL_CANNOT_BE_LIQUIDATED = \\\"46\\\"; // 'The collateral chosen cannot be liquidated'\\r\\n    string public constant SPECIFIED_CURRENCY_NOT_BORROWED_BY_USER = \\\"47\\\"; // 'User did not borrow the specified currency'\\r\\n    string public constant SAME_BLOCK_BORROW_REPAY = \\\"48\\\"; // 'Borrow and repay in same block is not allowed'\\r\\n    string public constant INCONSISTENT_FLASHLOAN_PARAMS = \\\"49\\\"; // 'Inconsistent flashloan parameters'\\r\\n    string public constant BORROW_CAP_EXCEEDED = \\\"50\\\"; // 'Borrow cap is exceeded'\\r\\n    string public constant SUPPLY_CAP_EXCEEDED = \\\"51\\\"; // 'Supply cap is exceeded'\\r\\n    string public constant UNBACKED_MINT_CAP_EXCEEDED = \\\"52\\\"; // 'Unbacked mint cap is exceeded'\\r\\n    string public constant DEBT_CEILING_EXCEEDED = \\\"53\\\"; // 'Debt ceiling is exceeded'\\r\\n    string public constant ATOKEN_SUPPLY_NOT_ZERO = \\\"54\\\"; // 'AToken supply is not zero'\\r\\n    string public constant STABLE_DEBT_NOT_ZERO = \\\"55\\\"; // 'Stable debt supply is not zero'\\r\\n    string public constant VARIABLE_DEBT_SUPPLY_NOT_ZERO = \\\"56\\\"; // 'Variable debt supply is not zero'\\r\\n    string public constant LTV_VALIDATION_FAILED = \\\"57\\\"; // 'Ltv validation failed'\\r\\n    string public constant INCONSISTENT_EMODE_CATEGORY = \\\"58\\\"; // 'Inconsistent eMode category'\\r\\n    string public constant PRICE_ORACLE_SENTINEL_CHECK_FAILED = \\\"59\\\"; // 'Price oracle sentinel validation failed'\\r\\n    string public constant ASSET_NOT_BORROWABLE_IN_ISOLATION = \\\"60\\\"; // 'Asset is not borrowable in isolation mode'\\r\\n    string public constant RESERVE_ALREADY_INITIALIZED = \\\"61\\\"; // 'Reserve has already been initialized'\\r\\n    string public constant USER_IN_ISOLATION_MODE = \\\"62\\\"; // 'User is in isolation mode'\\r\\n    string public constant INVALID_LTV = \\\"63\\\"; // 'Invalid ltv parameter for the reserve'\\r\\n    string public constant INVALID_LIQ_THRESHOLD = \\\"64\\\"; // 'Invalid liquidity threshold parameter for the reserve'\\r\\n    string public constant INVALID_LIQ_BONUS = \\\"65\\\"; // 'Invalid liquidity bonus parameter for the reserve'\\r\\n    string public constant INVALID_DECIMALS = \\\"66\\\"; // 'Invalid decimals parameter of the underlying asset of the reserve'\\r\\n    string public constant INVALID_RESERVE_FACTOR = \\\"67\\\"; // 'Invalid reserve factor parameter for the reserve'\\r\\n    string public constant INVALID_BORROW_CAP = \\\"68\\\"; // 'Invalid borrow cap for the reserve'\\r\\n    string public constant INVALID_SUPPLY_CAP = \\\"69\\\"; // 'Invalid supply cap for the reserve'\\r\\n    string public constant INVALID_LIQUIDATION_PROTOCOL_FEE = \\\"70\\\"; // 'Invalid liquidation protocol fee for the reserve'\\r\\n    string public constant INVALID_EMODE_CATEGORY = \\\"71\\\"; // 'Invalid eMode category for the reserve'\\r\\n    string public constant INVALID_UNBACKED_MINT_CAP = \\\"72\\\"; // 'Invalid unbacked mint cap for the reserve'\\r\\n    string public constant INVALID_DEBT_CEILING = \\\"73\\\"; // 'Invalid debt ceiling for the reserve\\r\\n    string public constant INVALID_RESERVE_INDEX = \\\"74\\\"; // 'Invalid reserve index'\\r\\n    string public constant ACL_ADMIN_CANNOT_BE_ZERO = \\\"75\\\"; // 'ACL admin cannot be set to the zero address'\\r\\n    string public constant INCONSISTENT_PARAMS_LENGTH = \\\"76\\\"; // 'Array parameters that should be equal length are not'\\r\\n    string public constant ZERO_ADDRESS_NOT_VALID = \\\"77\\\"; // 'Zero address not valid'\\r\\n    string public constant INVALID_EXPIRATION = \\\"78\\\"; // 'Invalid expiration'\\r\\n    string public constant INVALID_SIGNATURE = \\\"79\\\"; // 'Invalid signature'\\r\\n    string public constant OPERATION_NOT_SUPPORTED = \\\"80\\\"; // 'Operation not supported'\\r\\n    string public constant DEBT_CEILING_NOT_ZERO = \\\"81\\\"; // 'Debt ceiling is not zero'\\r\\n    string public constant ASSET_NOT_LISTED = \\\"82\\\"; // 'Asset is not listed'\\r\\n    string public constant INVALID_OPTIMAL_USAGE_RATIO = \\\"83\\\"; // 'Invalid optimal usage ratio'\\r\\n    string public constant INVALID_OPTIMAL_STABLE_TO_TOTAL_DEBT_RATIO = \\\"84\\\"; // 'Invalid optimal stable to total debt ratio'\\r\\n    string public constant UNDERLYING_CANNOT_BE_RESCUED = \\\"85\\\"; // 'The underlying asset cannot be rescued'\\r\\n    string public constant ADDRESSES_PROVIDER_ALREADY_ADDED = \\\"86\\\"; // 'Reserve has already been added to reserve list'\\r\\n    string public constant POOL_ADDRESSES_DO_NOT_MATCH = \\\"87\\\"; // 'The token implementation pool address and the pool address provided by the initializing pool do not match'\\r\\n    string public constant STABLE_BORROWING_ENABLED = \\\"88\\\"; // 'Stable borrowing is enabled'\\r\\n    string public constant SILOED_BORROWING_VIOLATION = \\\"89\\\"; // 'User is trying to borrow multiple assets including a siloed one'\\r\\n    string public constant RESERVE_DEBT_NOT_ZERO = \\\"90\\\"; // the total debt of the reserve needs to be 0\\r\\n}\\r\\n\",\"keccak256\":\"0xe3a1c2c1ade901dc5c44387454e2938817e9ed41655737c851ec28a10eaa8862\",\"license\":\"BUSL-1.1\"},\"core-v3/contracts/protocol/libraries/logic/ConfiguratorLogic.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity 0.8.10;\\r\\n\\r\\nimport {IPool} from \\\"../../../interfaces/IPool.sol\\\";\\r\\nimport {IInitializableAToken} from \\\"../../../interfaces/IInitializableAToken.sol\\\";\\r\\nimport {IInitializableDebtToken} from \\\"../../../interfaces/IInitializableDebtToken.sol\\\";\\r\\nimport {IAqualisIncentivesController} from \\\"../../../interfaces/IAqualisIncentivesController.sol\\\";\\r\\nimport {InitializableImmutableAdminUpgradeabilityProxy} from \\\"../aqualis-upgradeability/InitializableImmutableAdminUpgradeabilityProxy.sol\\\";\\r\\nimport {ReserveConfiguration} from \\\"../configuration/ReserveConfiguration.sol\\\";\\r\\nimport {DataTypes} from \\\"../types/DataTypes.sol\\\";\\r\\nimport {ConfiguratorInputTypes} from \\\"../types/ConfiguratorInputTypes.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title ConfiguratorLogic library\\r\\n * @author Aqualis\\r\\n * @notice Implements the functions to initialize reserves and update aTokens and debtTokens\\r\\n */\\r\\nlibrary ConfiguratorLogic {\\r\\n    using ReserveConfiguration for DataTypes.ReserveConfigurationMap;\\r\\n\\r\\n    // See `IPoolConfigurator` for descriptions\\r\\n    event ReserveInitialized(\\r\\n        address indexed asset,\\r\\n        address indexed aToken,\\r\\n        address stableDebtToken,\\r\\n        address variableDebtToken,\\r\\n        address interestRateStrategyAddress\\r\\n    );\\r\\n    event ATokenUpgraded(\\r\\n        address indexed asset,\\r\\n        address indexed proxy,\\r\\n        address indexed implementation\\r\\n    );\\r\\n    event StableDebtTokenUpgraded(\\r\\n        address indexed asset,\\r\\n        address indexed proxy,\\r\\n        address indexed implementation\\r\\n    );\\r\\n    event VariableDebtTokenUpgraded(\\r\\n        address indexed asset,\\r\\n        address indexed proxy,\\r\\n        address indexed implementation\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @notice Initialize a reserve by creating and initializing aToken, stable debt token and variable debt token\\r\\n     * @dev Emits the `ReserveInitialized` event\\r\\n     * @param pool The Pool in which the reserve will be initialized\\r\\n     * @param input The needed parameters for the initialization\\r\\n     */\\r\\n    function executeInitReserve(\\r\\n        IPool pool,\\r\\n        ConfiguratorInputTypes.InitReserveInput calldata input\\r\\n    ) public {\\r\\n        address aTokenProxyAddress = _initTokenWithProxy(\\r\\n            input.aTokenImpl,\\r\\n            abi.encodeWithSelector(\\r\\n                IInitializableAToken.initialize.selector,\\r\\n                pool,\\r\\n                input.treasury,\\r\\n                input.underlyingAsset,\\r\\n                input.incentivesController,\\r\\n                input.underlyingAssetDecimals,\\r\\n                input.aTokenName,\\r\\n                input.aTokenSymbol,\\r\\n                input.params\\r\\n            )\\r\\n        );\\r\\n\\r\\n        address stableDebtTokenProxyAddress = _initTokenWithProxy(\\r\\n            input.stableDebtTokenImpl,\\r\\n            abi.encodeWithSelector(\\r\\n                IInitializableDebtToken.initialize.selector,\\r\\n                pool,\\r\\n                input.underlyingAsset,\\r\\n                input.incentivesController,\\r\\n                input.underlyingAssetDecimals,\\r\\n                input.stableDebtTokenName,\\r\\n                input.stableDebtTokenSymbol,\\r\\n                input.params\\r\\n            )\\r\\n        );\\r\\n\\r\\n        address variableDebtTokenProxyAddress = _initTokenWithProxy(\\r\\n            input.variableDebtTokenImpl,\\r\\n            abi.encodeWithSelector(\\r\\n                IInitializableDebtToken.initialize.selector,\\r\\n                pool,\\r\\n                input.underlyingAsset,\\r\\n                input.incentivesController,\\r\\n                input.underlyingAssetDecimals,\\r\\n                input.variableDebtTokenName,\\r\\n                input.variableDebtTokenSymbol,\\r\\n                input.params\\r\\n            )\\r\\n        );\\r\\n\\r\\n        pool.initReserve(\\r\\n            input.underlyingAsset,\\r\\n            aTokenProxyAddress,\\r\\n            stableDebtTokenProxyAddress,\\r\\n            variableDebtTokenProxyAddress,\\r\\n            input.interestRateStrategyAddress\\r\\n        );\\r\\n\\r\\n        DataTypes.ReserveConfigurationMap memory currentConfig = DataTypes\\r\\n            .ReserveConfigurationMap(0);\\r\\n\\r\\n        currentConfig.setDecimals(input.underlyingAssetDecimals);\\r\\n\\r\\n        currentConfig.setActive(true);\\r\\n        currentConfig.setPaused(false);\\r\\n        currentConfig.setFrozen(false);\\r\\n\\r\\n        pool.setConfiguration(input.underlyingAsset, currentConfig);\\r\\n\\r\\n        emit ReserveInitialized(\\r\\n            input.underlyingAsset,\\r\\n            aTokenProxyAddress,\\r\\n            stableDebtTokenProxyAddress,\\r\\n            variableDebtTokenProxyAddress,\\r\\n            input.interestRateStrategyAddress\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Updates the aToken implementation and initializes it\\r\\n     * @dev Emits the `ATokenUpgraded` event\\r\\n     * @param cachedPool The Pool containing the reserve with the aToken\\r\\n     * @param input The parameters needed for the initialize call\\r\\n     */\\r\\n    function executeUpdateAToken(\\r\\n        IPool cachedPool,\\r\\n        ConfiguratorInputTypes.UpdateATokenInput calldata input\\r\\n    ) public {\\r\\n        DataTypes.ReserveData memory reserveData = cachedPool.getReserveData(\\r\\n            input.asset\\r\\n        );\\r\\n\\r\\n        (, , , uint256 decimals, , ) = cachedPool\\r\\n            .getConfiguration(input.asset)\\r\\n            .getParams();\\r\\n\\r\\n        bytes memory encodedCall = abi.encodeWithSelector(\\r\\n            IInitializableAToken.initialize.selector,\\r\\n            cachedPool,\\r\\n            input.treasury,\\r\\n            input.asset,\\r\\n            input.incentivesController,\\r\\n            decimals,\\r\\n            input.name,\\r\\n            input.symbol,\\r\\n            input.params\\r\\n        );\\r\\n\\r\\n        _upgradeTokenImplementation(\\r\\n            reserveData.aTokenAddress,\\r\\n            input.implementation,\\r\\n            encodedCall\\r\\n        );\\r\\n\\r\\n        emit ATokenUpgraded(\\r\\n            input.asset,\\r\\n            reserveData.aTokenAddress,\\r\\n            input.implementation\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Updates the stable debt token implementation and initializes it\\r\\n     * @dev Emits the `StableDebtTokenUpgraded` event\\r\\n     * @param cachedPool The Pool containing the reserve with the stable debt token\\r\\n     * @param input The parameters needed for the initialize call\\r\\n     */\\r\\n    function executeUpdateStableDebtToken(\\r\\n        IPool cachedPool,\\r\\n        ConfiguratorInputTypes.UpdateDebtTokenInput calldata input\\r\\n    ) public {\\r\\n        DataTypes.ReserveData memory reserveData = cachedPool.getReserveData(\\r\\n            input.asset\\r\\n        );\\r\\n\\r\\n        (, , , uint256 decimals, , ) = cachedPool\\r\\n            .getConfiguration(input.asset)\\r\\n            .getParams();\\r\\n\\r\\n        bytes memory encodedCall = abi.encodeWithSelector(\\r\\n            IInitializableDebtToken.initialize.selector,\\r\\n            cachedPool,\\r\\n            input.asset,\\r\\n            input.incentivesController,\\r\\n            decimals,\\r\\n            input.name,\\r\\n            input.symbol,\\r\\n            input.params\\r\\n        );\\r\\n\\r\\n        _upgradeTokenImplementation(\\r\\n            reserveData.stableDebtTokenAddress,\\r\\n            input.implementation,\\r\\n            encodedCall\\r\\n        );\\r\\n\\r\\n        emit StableDebtTokenUpgraded(\\r\\n            input.asset,\\r\\n            reserveData.stableDebtTokenAddress,\\r\\n            input.implementation\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Updates the variable debt token implementation and initializes it\\r\\n     * @dev Emits the `VariableDebtTokenUpgraded` event\\r\\n     * @param cachedPool The Pool containing the reserve with the variable debt token\\r\\n     * @param input The parameters needed for the initialize call\\r\\n     */\\r\\n    function executeUpdateVariableDebtToken(\\r\\n        IPool cachedPool,\\r\\n        ConfiguratorInputTypes.UpdateDebtTokenInput calldata input\\r\\n    ) public {\\r\\n        DataTypes.ReserveData memory reserveData = cachedPool.getReserveData(\\r\\n            input.asset\\r\\n        );\\r\\n\\r\\n        (, , , uint256 decimals, , ) = cachedPool\\r\\n            .getConfiguration(input.asset)\\r\\n            .getParams();\\r\\n\\r\\n        bytes memory encodedCall = abi.encodeWithSelector(\\r\\n            IInitializableDebtToken.initialize.selector,\\r\\n            cachedPool,\\r\\n            input.asset,\\r\\n            input.incentivesController,\\r\\n            decimals,\\r\\n            input.name,\\r\\n            input.symbol,\\r\\n            input.params\\r\\n        );\\r\\n\\r\\n        _upgradeTokenImplementation(\\r\\n            reserveData.variableDebtTokenAddress,\\r\\n            input.implementation,\\r\\n            encodedCall\\r\\n        );\\r\\n\\r\\n        emit VariableDebtTokenUpgraded(\\r\\n            input.asset,\\r\\n            reserveData.variableDebtTokenAddress,\\r\\n            input.implementation\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Creates a new proxy and initializes the implementation\\r\\n     * @param implementation The address of the implementation\\r\\n     * @param initParams The parameters that is passed to the implementation to initialize\\r\\n     * @return The address of initialized proxy\\r\\n     */\\r\\n    function _initTokenWithProxy(\\r\\n        address implementation,\\r\\n        bytes memory initParams\\r\\n    ) internal returns (address) {\\r\\n        InitializableImmutableAdminUpgradeabilityProxy proxy = new InitializableImmutableAdminUpgradeabilityProxy(\\r\\n                address(this)\\r\\n            );\\r\\n\\r\\n        proxy.initialize(implementation, initParams);\\r\\n\\r\\n        return address(proxy);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Upgrades the implementation and makes call to the proxy\\r\\n     * @dev The call is used to initialize the new implementation.\\r\\n     * @param proxyAddress The address of the proxy\\r\\n     * @param implementation The address of the new implementation\\r\\n     * @param  initParams The parameters to the call after the upgrade\\r\\n     */\\r\\n    function _upgradeTokenImplementation(\\r\\n        address proxyAddress,\\r\\n        address implementation,\\r\\n        bytes memory initParams\\r\\n    ) internal {\\r\\n        InitializableImmutableAdminUpgradeabilityProxy proxy = InitializableImmutableAdminUpgradeabilityProxy(\\r\\n                payable(proxyAddress)\\r\\n            );\\r\\n\\r\\n        proxy.upgradeToAndCall(implementation, initParams);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x9eac94354ac458f02a4bda621b209bf9f126a29314acf621898a9fb22c94ef0b\",\"license\":\"BUSL-1.1\"},\"core-v3/contracts/protocol/libraries/types/ConfiguratorInputTypes.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity 0.8.10;\\r\\n\\r\\nlibrary ConfiguratorInputTypes {\\r\\n  struct InitReserveInput {\\r\\n    address aTokenImpl;\\r\\n    address stableDebtTokenImpl;\\r\\n    address variableDebtTokenImpl;\\r\\n    uint8 underlyingAssetDecimals;\\r\\n    address interestRateStrategyAddress;\\r\\n    address underlyingAsset;\\r\\n    address treasury;\\r\\n    address incentivesController;\\r\\n    string aTokenName;\\r\\n    string aTokenSymbol;\\r\\n    string variableDebtTokenName;\\r\\n    string variableDebtTokenSymbol;\\r\\n    string stableDebtTokenName;\\r\\n    string stableDebtTokenSymbol;\\r\\n    bytes params;\\r\\n  }\\r\\n\\r\\n  struct UpdateATokenInput {\\r\\n    address asset;\\r\\n    address treasury;\\r\\n    address incentivesController;\\r\\n    string name;\\r\\n    string symbol;\\r\\n    address implementation;\\r\\n    bytes params;\\r\\n  }\\r\\n\\r\\n  struct UpdateDebtTokenInput {\\r\\n    address asset;\\r\\n    address incentivesController;\\r\\n    string name;\\r\\n    string symbol;\\r\\n    address implementation;\\r\\n    bytes params;\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x69136b671bf5e853a7cb01eca2794689ec4572396eff29904653a5efe473e52e\",\"license\":\"BUSL-1.1\"},\"core-v3/contracts/protocol/libraries/types/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity 0.8.10;\\r\\n\\r\\nlibrary DataTypes {\\r\\n  struct ReserveData {\\r\\n    //stores the reserve configuration\\r\\n    ReserveConfigurationMap configuration;\\r\\n    //the liquidity index. Expressed in ray\\r\\n    uint128 liquidityIndex;\\r\\n    //the current supply rate. Expressed in ray\\r\\n    uint128 currentLiquidityRate;\\r\\n    //variable borrow index. Expressed in ray\\r\\n    uint128 variableBorrowIndex;\\r\\n    //the current variable borrow rate. Expressed in ray\\r\\n    uint128 currentVariableBorrowRate;\\r\\n    //the current stable borrow rate. Expressed in ray\\r\\n    uint128 currentStableBorrowRate;\\r\\n    //timestamp of last update\\r\\n    uint40 lastUpdateTimestamp;\\r\\n    //the id of the reserve. Represents the position in the list of the active reserves\\r\\n    uint16 id;\\r\\n    //aToken address\\r\\n    address aTokenAddress;\\r\\n    //stableDebtToken address\\r\\n    address stableDebtTokenAddress;\\r\\n    //variableDebtToken address\\r\\n    address variableDebtTokenAddress;\\r\\n    //address of the interest rate strategy\\r\\n    address interestRateStrategyAddress;\\r\\n    //the current treasury balance, scaled\\r\\n    uint128 accruedToTreasury;\\r\\n    //the outstanding unbacked aTokens minted through the bridging feature\\r\\n    uint128 unbacked;\\r\\n    //the outstanding debt borrowed against this asset in isolation mode\\r\\n    uint128 isolationModeTotalDebt;\\r\\n  }\\r\\n\\r\\n  struct ReserveConfigurationMap {\\r\\n    //bit 0-15: LTV\\r\\n    //bit 16-31: Liq. threshold\\r\\n    //bit 32-47: Liq. bonus\\r\\n    //bit 48-55: Decimals\\r\\n    //bit 56: reserve is active\\r\\n    //bit 57: reserve is frozen\\r\\n    //bit 58: borrowing is enabled\\r\\n    //bit 59: stable rate borrowing enabled\\r\\n    //bit 60: asset is paused\\r\\n    //bit 61: borrowing in isolation mode is enabled\\r\\n    //bit 62-63: reserved\\r\\n    //bit 64-79: reserve factor\\r\\n    //bit 80-115 borrow cap in whole tokens, borrowCap == 0 => no cap\\r\\n    //bit 116-151 supply cap in whole tokens, supplyCap == 0 => no cap\\r\\n    //bit 152-167 liquidation protocol fee\\r\\n    //bit 168-175 eMode category\\r\\n    //bit 176-211 unbacked mint cap in whole tokens, unbackedMintCap == 0 => minting disabled\\r\\n    //bit 212-251 debt ceiling for isolation mode with (ReserveConfiguration::DEBT_CEILING_DECIMALS) decimals\\r\\n    //bit 252-255 unused\\r\\n\\r\\n    uint256 data;\\r\\n  }\\r\\n\\r\\n  struct UserConfigurationMap {\\r\\n    /**\\r\\n     * @dev Bitmap of the users collaterals and borrows. It is divided in pairs of bits, one pair per asset.\\r\\n     * The first bit indicates if an asset is used as collateral by the user, the second whether an\\r\\n     * asset is borrowed by the user.\\r\\n     */\\r\\n    uint256 data;\\r\\n  }\\r\\n\\r\\n  struct EModeCategory {\\r\\n    // each eMode category has a custom ltv and liquidation threshold\\r\\n    uint16 ltv;\\r\\n    uint16 liquidationThreshold;\\r\\n    uint16 liquidationBonus;\\r\\n    // each eMode category may or may not have a custom oracle to override the individual assets price oracles\\r\\n    address priceSource;\\r\\n    string label;\\r\\n  }\\r\\n\\r\\n  enum InterestRateMode {\\r\\n    NONE,\\r\\n    STABLE,\\r\\n    VARIABLE\\r\\n  }\\r\\n\\r\\n  struct ReserveCache {\\r\\n    uint256 currScaledVariableDebt;\\r\\n    uint256 nextScaledVariableDebt;\\r\\n    uint256 currPrincipalStableDebt;\\r\\n    uint256 currAvgStableBorrowRate;\\r\\n    uint256 currTotalStableDebt;\\r\\n    uint256 nextAvgStableBorrowRate;\\r\\n    uint256 nextTotalStableDebt;\\r\\n    uint256 currLiquidityIndex;\\r\\n    uint256 nextLiquidityIndex;\\r\\n    uint256 currVariableBorrowIndex;\\r\\n    uint256 nextVariableBorrowIndex;\\r\\n    uint256 currLiquidityRate;\\r\\n    uint256 currVariableBorrowRate;\\r\\n    uint256 reserveFactor;\\r\\n    ReserveConfigurationMap reserveConfiguration;\\r\\n    address aTokenAddress;\\r\\n    address stableDebtTokenAddress;\\r\\n    address variableDebtTokenAddress;\\r\\n    uint40 reserveLastUpdateTimestamp;\\r\\n    uint40 stableDebtLastUpdateTimestamp;\\r\\n  }\\r\\n\\r\\n  struct ExecuteLiquidationCallParams {\\r\\n    uint256 reservesCount;\\r\\n    uint256 debtToCover;\\r\\n    address collateralAsset;\\r\\n    address debtAsset;\\r\\n    address user;\\r\\n    bool receiveAToken;\\r\\n    address priceOracle;\\r\\n    uint8 userEModeCategory;\\r\\n    address priceOracleSentinel;\\r\\n  }\\r\\n\\r\\n  struct ExecuteSupplyParams {\\r\\n    address asset;\\r\\n    uint256 amount;\\r\\n    address onBehalfOf;\\r\\n    uint16 referralCode;\\r\\n  }\\r\\n\\r\\n  struct ExecuteBorrowParams {\\r\\n    address asset;\\r\\n    address user;\\r\\n    address onBehalfOf;\\r\\n    uint256 amount;\\r\\n    InterestRateMode interestRateMode;\\r\\n    uint16 referralCode;\\r\\n    bool releaseUnderlying;\\r\\n    uint256 maxStableRateBorrowSizePercent;\\r\\n    uint256 reservesCount;\\r\\n    address oracle;\\r\\n    uint8 userEModeCategory;\\r\\n    address priceOracleSentinel;\\r\\n  }\\r\\n\\r\\n  struct ExecuteRepayParams {\\r\\n    address asset;\\r\\n    uint256 amount;\\r\\n    InterestRateMode interestRateMode;\\r\\n    address onBehalfOf;\\r\\n    bool useATokens;\\r\\n  }\\r\\n\\r\\n  struct ExecuteWithdrawParams {\\r\\n    address asset;\\r\\n    uint256 amount;\\r\\n    address to;\\r\\n    uint256 reservesCount;\\r\\n    address oracle;\\r\\n    uint8 userEModeCategory;\\r\\n  }\\r\\n\\r\\n  struct ExecuteSetUserEModeParams {\\r\\n    uint256 reservesCount;\\r\\n    address oracle;\\r\\n    uint8 categoryId;\\r\\n  }\\r\\n\\r\\n  struct FinalizeTransferParams {\\r\\n    address asset;\\r\\n    address from;\\r\\n    address to;\\r\\n    uint256 amount;\\r\\n    uint256 balanceFromBefore;\\r\\n    uint256 balanceToBefore;\\r\\n    uint256 reservesCount;\\r\\n    address oracle;\\r\\n    uint8 fromEModeCategory;\\r\\n  }\\r\\n\\r\\n  struct FlashloanParams {\\r\\n    address receiverAddress;\\r\\n    address[] assets;\\r\\n    uint256[] amounts;\\r\\n    uint256[] interestRateModes;\\r\\n    address onBehalfOf;\\r\\n    bytes params;\\r\\n    uint16 referralCode;\\r\\n    uint256 flashLoanPremiumToProtocol;\\r\\n    uint256 flashLoanPremiumTotal;\\r\\n    uint256 maxStableRateBorrowSizePercent;\\r\\n    uint256 reservesCount;\\r\\n    address addressesProvider;\\r\\n    uint8 userEModeCategory;\\r\\n    bool isAuthorizedFlashBorrower;\\r\\n  }\\r\\n\\r\\n  struct FlashloanSimpleParams {\\r\\n    address receiverAddress;\\r\\n    address asset;\\r\\n    uint256 amount;\\r\\n    bytes params;\\r\\n    uint16 referralCode;\\r\\n    uint256 flashLoanPremiumToProtocol;\\r\\n    uint256 flashLoanPremiumTotal;\\r\\n  }\\r\\n\\r\\n  struct FlashLoanRepaymentParams {\\r\\n    uint256 amount;\\r\\n    uint256 totalPremium;\\r\\n    uint256 flashLoanPremiumToProtocol;\\r\\n    address asset;\\r\\n    address receiverAddress;\\r\\n    uint16 referralCode;\\r\\n  }\\r\\n\\r\\n  struct CalculateUserAccountDataParams {\\r\\n    UserConfigurationMap userConfig;\\r\\n    uint256 reservesCount;\\r\\n    address user;\\r\\n    address oracle;\\r\\n    uint8 userEModeCategory;\\r\\n  }\\r\\n\\r\\n  struct ValidateBorrowParams {\\r\\n    ReserveCache reserveCache;\\r\\n    UserConfigurationMap userConfig;\\r\\n    address asset;\\r\\n    address userAddress;\\r\\n    uint256 amount;\\r\\n    InterestRateMode interestRateMode;\\r\\n    uint256 maxStableLoanPercent;\\r\\n    uint256 reservesCount;\\r\\n    address oracle;\\r\\n    uint8 userEModeCategory;\\r\\n    address priceOracleSentinel;\\r\\n    bool isolationModeActive;\\r\\n    address isolationModeCollateralAddress;\\r\\n    uint256 isolationModeDebtCeiling;\\r\\n  }\\r\\n\\r\\n  struct ValidateLiquidationCallParams {\\r\\n    ReserveCache debtReserveCache;\\r\\n    uint256 totalDebt;\\r\\n    uint256 healthFactor;\\r\\n    address priceOracleSentinel;\\r\\n  }\\r\\n\\r\\n  struct CalculateInterestRatesParams {\\r\\n    uint256 unbacked;\\r\\n    uint256 liquidityAdded;\\r\\n    uint256 liquidityTaken;\\r\\n    uint256 totalStableDebt;\\r\\n    uint256 totalVariableDebt;\\r\\n    uint256 averageStableBorrowRate;\\r\\n    uint256 reserveFactor;\\r\\n    address reserve;\\r\\n    address aToken;\\r\\n  }\\r\\n\\r\\n  struct InitReserveParams {\\r\\n    address asset;\\r\\n    address aTokenAddress;\\r\\n    address stableDebtAddress;\\r\\n    address variableDebtAddress;\\r\\n    address interestRateStrategyAddress;\\r\\n    uint16 reservesCount;\\r\\n    uint16 maxNumberReserves;\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x2b24b9915b58cd37fcecf8e291093a8a8af188cb36a6aebc2d72e14aa8689ec6\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x61225f61003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100565760003560e01c8063b0f093551461005b578063b13c96a81461007d578063df59b8b21461009d578063f5b50e70146100bd575b600080fd5b81801561006757600080fd5b5061007b61007636600461117d565b6100dd565b005b81801561008957600080fd5b5061007b6100983660046111d4565b610439565b8180156100a957600080fd5b5061007b6100b8366004611220565b6106c6565b8180156100c957600080fd5b5061007b6100d836600461117d565b610bd3565b600073ffffffffffffffffffffffffffffffffffffffff83166335ea6a75610108602085018561126d565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff90911660048201526024016101e060405180830381865afa158015610172573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061019691906113a2565b9050600061028573ffffffffffffffffffffffffffffffffffffffff851663c44b11f76101c6602087018761126d565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff9091166004820152602401602060405180830381865afa15801561022f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061025391906114c5565b5161ffff80821692601083901c821692602081901c83169260ff603083901c811693604084901c9092169260a81c1690565b50909450600093507fc222ec8a0000000000000000000000000000000000000000000000000000000092508791506102c29050602087018761126d565b6102d2604088016020890161126d565b856102e060408a018a6114e1565b6102ed60608c018c6114e1565b6102fa60a08e018e6114e1565b6040516024016103139a99989796959493929190611596565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526101408401519091506103b3906103ad60a087016080880161126d565b83610e6a565b6103c360a085016080860161126d565b61014084015173ffffffffffffffffffffffffffffffffffffffff91821691166103f0602087018761126d565b73ffffffffffffffffffffffffffffffffffffffff167f9439658a562a5c46b1173589df89cf001483d685bad28aedaff4a88656292d8160405160405180910390a45050505050565b600073ffffffffffffffffffffffffffffffffffffffff83166335ea6a75610464602085018561126d565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff90911660048201526024016101e060405180830381865afa1580156104ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f291906113a2565b9050600061052273ffffffffffffffffffffffffffffffffffffffff851663c44b11f76101c6602087018761126d565b50509350505050600063183fb41360e01b85856020016020810190610547919061126d565b610554602088018861126d565b6105646060890160408a0161126d565b8661057260608b018b6114e1565b61057f60808d018d6114e1565b61058c60c08f018f6114e1565b6040516024016105a69b9a99989796959493929190611617565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152610100840151909150610640906103ad60c0870160a0880161126d565b61065060c0850160a0860161126d565b61010084015173ffffffffffffffffffffffffffffffffffffffff918216911661067d602087018761126d565b73ffffffffffffffffffffffffffffffffffffffff167fa76f65411ec66a7fb6bc467432eb14767900449ae4469fa295e4441fe5e1cb7360405160405180910390a45050505050565b60006108016106d8602084018461126d565b7f183fb413000000000000000000000000000000000000000000000000000000008561070a60e0870160c0880161126d565b61071a60c0880160a0890161126d565b61072b610100890160e08a0161126d565b61073b60808a0160608b016116a4565b6107496101008b018b6114e1565b6107576101208d018d6114e1565b6107656101c08f018f6114e1565b60405160240161077f9b9a999897969594939291906116c7565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152610ef8565b905060006108ae610818604085016020860161126d565b7fc222ec8a000000000000000000000000000000000000000000000000000000008661084a60c0880160a0890161126d565b61085b610100890160e08a0161126d565b61086b60808a0160608b016116a4565b6108796101808b018b6114e1565b6108876101a08d018d6114e1565b6108956101c08f018f6114e1565b60405160240161077f9a9998979695949392919061171b565b905060006109456108c5606086016040870161126d565b7fc222ec8a00000000000000000000000000000000000000000000000000000000876108f760c0890160a08a0161126d565b6109086101008a0160e08b0161126d565b61091860808b0160608c016116a4565b6109266101408c018c6114e1565b6109346101608e018e6114e1565b8e806101c0019061089591906114e1565b905073ffffffffffffffffffffffffffffffffffffffff8516637a708e9261097360c0870160a0880161126d565b85858561098660a08b0160808c0161126d565b60405160e087901b7fffffffff0000000000000000000000000000000000000000000000000000000016815273ffffffffffffffffffffffffffffffffffffffff95861660048201529385166024850152918416604484015283166064830152909116608482015260a401600060405180830381600087803b158015610a0b57600080fd5b505af1158015610a1f573d6000803e3d6000fd5b50506040805160208101909152600081529150610a519050610a4760808701606088016116a4565b829060ff16610fd3565b610a5c81600161107c565b610a678160006110c1565b610a72816000611106565b73ffffffffffffffffffffffffffffffffffffffff861663f51e435b610a9e60c0880160a0890161126d565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff909116600482015283516024820152604401600060405180830381600087803b158015610b0b57600080fd5b505af1158015610b1f573d6000803e3d6000fd5b50505073ffffffffffffffffffffffffffffffffffffffff85169050610b4b60c0870160a0880161126d565b73ffffffffffffffffffffffffffffffffffffffff167f3a0ca721fc364424566385a1aa271ed508cc2c0949c2272575fb3013a163a45f8585610b9460a08b0160808c0161126d565b6040805173ffffffffffffffffffffffffffffffffffffffff9485168152928416602084015292168183015290519081900360600190a3505050505050565b600073ffffffffffffffffffffffffffffffffffffffff83166335ea6a75610bfe602085018561126d565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff90911660048201526024016101e060405180830381865afa158015610c68573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c8c91906113a2565b90506000610cbc73ffffffffffffffffffffffffffffffffffffffff851663c44b11f76101c6602087018761126d565b50909450600093507fc222ec8a000000000000000000000000000000000000000000000000000000009250879150610cf99050602087018761126d565b610d09604088016020890161126d565b85610d1760408a018a6114e1565b610d2460608c018c6114e1565b610d3160a08e018e6114e1565b604051602401610d4a9a99989796959493929190611596565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152610120840151909150610de4906103ad60a087016080880161126d565b610df460a085016080860161126d565b61012084015173ffffffffffffffffffffffffffffffffffffffff9182169116610e21602087018761126d565b73ffffffffffffffffffffffffffffffffffffffff167f7a943a5b6c214bf7726c069a878b1e2a8e7371981d516048b84e03743e67bc2860405160405180910390a45050505050565b6040517f4f1ef286000000000000000000000000000000000000000000000000000000008152839073ffffffffffffffffffffffffffffffffffffffff821690634f1ef28690610ec090869086906004016117d1565b600060405180830381600087803b158015610eda57600080fd5b505af1158015610eee573d6000803e3d6000fd5b5050505050505050565b60008030604051610f089061114b565b73ffffffffffffffffffffffffffffffffffffffff9091168152602001604051809103906000f080158015610f41573d6000803e3d6000fd5b506040517fd1f5789400000000000000000000000000000000000000000000000000000000815290915073ffffffffffffffffffffffffffffffffffffffff82169063d1f5789490610f9990879087906004016117d1565b600060405180830381600087803b158015610fb357600080fd5b505af1158015610fc7573d6000803e3d6000fd5b50929695505050505050565b60408051808201909152600281527f3636000000000000000000000000000000000000000000000000000000000000602082015260ff82111561104c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110439190611808565b60405180910390fd5b5081517fffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffff1660309190911b179052565b60388161108a57600061108d565b60015b83517ffffffffffffffffffffffffffffffffffffffffffffffffffeffffffffffffff1660ff9190911690911b1790915250565b603c816110cf5760006110d2565b60015b83517fffffffffffffffffffffffffffffffffffffffffffffffffefffffffffffffff1660ff9190911690911b1790915250565b603981611114576000611117565b60015b83517ffffffffffffffffffffffffffffffffffffffffffffffffffdffffffffffffff1660ff9190911690911b1790915250565b610a0e8061181c83390190565b73ffffffffffffffffffffffffffffffffffffffff8116811461117a57600080fd5b50565b6000806040838503121561119057600080fd5b823561119b81611158565b9150602083013567ffffffffffffffff8111156111b757600080fd5b830160c081860312156111c957600080fd5b809150509250929050565b600080604083850312156111e757600080fd5b82356111f281611158565b9150602083013567ffffffffffffffff81111561120e57600080fd5b830160e081860312156111c957600080fd5b6000806040838503121561123357600080fd5b823561123e81611158565b9150602083013567ffffffffffffffff81111561125a57600080fd5b83016101e081860312156111c957600080fd5b60006020828403121561127f57600080fd5b813561128a81611158565b9392505050565b6040516101e0810167ffffffffffffffff811182821017156112dc577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405290565b6000602082840312156112f457600080fd5b6040516020810181811067ffffffffffffffff8211171561133e577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040529151825250919050565b80516fffffffffffffffffffffffffffffffff8116811461136b57600080fd5b919050565b805164ffffffffff8116811461136b57600080fd5b805161ffff8116811461136b57600080fd5b805161136b81611158565b60006101e082840312156113b557600080fd5b6113bd611291565b6113c784846112e2565b81526113d56020840161134b565b60208201526113e66040840161134b565b60408201526113f76060840161134b565b60608201526114086080840161134b565b608082015261141960a0840161134b565b60a082015261142a60c08401611370565b60c082015261143b60e08401611385565b60e082015261010061144e818501611397565b90820152610120611460848201611397565b90820152610140611472848201611397565b90820152610160611484848201611397565b9082015261018061149684820161134b565b908201526101a06114a884820161134b565b908201526101c06114ba84820161134b565b908201529392505050565b6000602082840312156114d757600080fd5b61128a83836112e2565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261151657600080fd5b83018035915067ffffffffffffffff82111561153157600080fd5b60200191503681900382131561154657600080fd5b9250929050565b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b600073ffffffffffffffffffffffffffffffffffffffff808d168352808c166020840152808b1660408401525088606083015260e060808301526115de60e08301888a61154d565b82810360a08401526115f181878961154d565b905082810360c084015261160681858761154d565b9d9c50505050505050505050505050565b600061010073ffffffffffffffffffffffffffffffffffffffff808f168452808e166020850152808d166040850152808c166060850152508960808401528060a0840152611668818401898b61154d565b905082810360c084015261167d81878961154d565b905082810360e084015261169281858761154d565b9e9d5050505050505050505050505050565b6000602082840312156116b657600080fd5b813560ff8116811461128a57600080fd5b600061010073ffffffffffffffffffffffffffffffffffffffff808f168452808e166020850152808d166040850152808c1660608501525060ff8a1660808401528060a0840152611668818401898b61154d565b600073ffffffffffffffffffffffffffffffffffffffff808d168352808c166020840152808b1660408401525060ff8916606083015260e060808301526115de60e08301888a61154d565b6000815180845260005b8181101561178c57602081850181015186830182015201611770565b8181111561179e576000602083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b73ffffffffffffffffffffffffffffffffffffffff831681526040602082015260006118006040830184611766565b949350505050565b60208152600061128a602083018461176656fe60a060405234801561001057600080fd5b50604051610a0e380380610a0e83398101604081905261002f91610040565b6001600160a01b0316608052610070565b60006020828403121561005257600080fd5b81516001600160a01b038116811461006957600080fd5b9392505050565b6080516109606100ae6000396000818161014f015281816101a101528181610274015281816104110152818161043a01526105ab01526109606000f3fe60806040526004361061005a5760003560e01c80635c60da1b116100435780635c60da1b14610097578063d1f57894146100d5578063f851a440146100e85761005a565b80633659cfe6146100645780634f1ef28614610084575b6100626100fd565b005b34801561007057600080fd5b5061006261007f3660046106be565b610137565b6100626100923660046106e0565b610189565b3480156100a357600080fd5b506100ac61025a565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b6100626100e3366004610792565b6102cb565b3480156100f457600080fd5b506100ac6103f7565b61010561045c565b6101356101307f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5490565b610464565b565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614156101815761017e81610488565b50565b61017e6100fd565b3373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016141561024d576101d083610488565b60008373ffffffffffffffffffffffffffffffffffffffff1683836040516101f9929190610872565b600060405180830381855af49150503d8060008114610234576040519150601f19603f3d011682016040523d82523d6000602084013e610239565b606091505b505090508061024757600080fd5b50505050565b6102556100fd565b505050565b60003373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614156102c057507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5490565b6102c86100fd565b90565b60006102f57f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5490565b73ffffffffffffffffffffffffffffffffffffffff161461031557600080fd5b61034060017f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbd610882565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc1461036e5761036e6108c0565b610377826104d5565b8051156103f35760008273ffffffffffffffffffffffffffffffffffffffff16826040516103a591906108ef565b600060405180830381855af49150503d80600081146103e0576040519150601f19603f3d011682016040523d82523d6000602084013e6103e5565b606091505b505090508061025557600080fd5b5050565b60003373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614156102c057507f000000000000000000000000000000000000000000000000000000000000000090565b610135610593565b3660008037600080366000845af43d6000803e808015610483573d6000f35b3d6000fd5b610491816104d5565b60405173ffffffffffffffffffffffffffffffffffffffff8216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6104de81610659565b61056f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603b60248201527f43616e6e6f742073657420612070726f787920696d706c656d656e746174696f60448201527f6e20746f2061206e6f6e2d636f6e74726163742061646472657373000000000060648201526084015b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc55565b3373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000161415610135576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603260248201527f43616e6e6f742063616c6c2066616c6c6261636b2066756e6374696f6e20667260448201527f6f6d207468652070726f78792061646d696e00000000000000000000000000006064820152608401610566565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47081811480159061068d57508115155b949350505050565b803573ffffffffffffffffffffffffffffffffffffffff811681146106b957600080fd5b919050565b6000602082840312156106d057600080fd5b6106d982610695565b9392505050565b6000806000604084860312156106f557600080fd5b6106fe84610695565b9250602084013567ffffffffffffffff8082111561071b57600080fd5b818601915086601f83011261072f57600080fd5b81358181111561073e57600080fd5b87602082850101111561075057600080fd5b6020830194508093505050509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080604083850312156107a557600080fd5b6107ae83610695565b9150602083013567ffffffffffffffff808211156107cb57600080fd5b818501915085601f8301126107df57600080fd5b8135818111156107f1576107f1610763565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190838211818310171561083757610837610763565b8160405282815288602084870101111561085057600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b8183823760009101908152919050565b6000828210156108bb577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b500390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b6000825160005b8181101561091057602081860181015185830152016108f6565b8181111561091f576000828501525b50919091019291505056fea2646970667358221220feac40f3ab1e9dde3188b0a70dc8cc92d602415d67e65384a3c07c5e46c9b09164736f6c634300080a0033a26469706673582212206bc16e906c15342f001a31205b19347afebe332cf489c4741d0babbcd6a0c55064736f6c634300080a0033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100565760003560e01c8063b0f093551461005b578063b13c96a81461007d578063df59b8b21461009d578063f5b50e70146100bd575b600080fd5b81801561006757600080fd5b5061007b61007636600461117d565b6100dd565b005b81801561008957600080fd5b5061007b6100983660046111d4565b610439565b8180156100a957600080fd5b5061007b6100b8366004611220565b6106c6565b8180156100c957600080fd5b5061007b6100d836600461117d565b610bd3565b600073ffffffffffffffffffffffffffffffffffffffff83166335ea6a75610108602085018561126d565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff90911660048201526024016101e060405180830381865afa158015610172573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061019691906113a2565b9050600061028573ffffffffffffffffffffffffffffffffffffffff851663c44b11f76101c6602087018761126d565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff9091166004820152602401602060405180830381865afa15801561022f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061025391906114c5565b5161ffff80821692601083901c821692602081901c83169260ff603083901c811693604084901c9092169260a81c1690565b50909450600093507fc222ec8a0000000000000000000000000000000000000000000000000000000092508791506102c29050602087018761126d565b6102d2604088016020890161126d565b856102e060408a018a6114e1565b6102ed60608c018c6114e1565b6102fa60a08e018e6114e1565b6040516024016103139a99989796959493929190611596565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526101408401519091506103b3906103ad60a087016080880161126d565b83610e6a565b6103c360a085016080860161126d565b61014084015173ffffffffffffffffffffffffffffffffffffffff91821691166103f0602087018761126d565b73ffffffffffffffffffffffffffffffffffffffff167f9439658a562a5c46b1173589df89cf001483d685bad28aedaff4a88656292d8160405160405180910390a45050505050565b600073ffffffffffffffffffffffffffffffffffffffff83166335ea6a75610464602085018561126d565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff90911660048201526024016101e060405180830381865afa1580156104ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f291906113a2565b9050600061052273ffffffffffffffffffffffffffffffffffffffff851663c44b11f76101c6602087018761126d565b50509350505050600063183fb41360e01b85856020016020810190610547919061126d565b610554602088018861126d565b6105646060890160408a0161126d565b8661057260608b018b6114e1565b61057f60808d018d6114e1565b61058c60c08f018f6114e1565b6040516024016105a69b9a99989796959493929190611617565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152610100840151909150610640906103ad60c0870160a0880161126d565b61065060c0850160a0860161126d565b61010084015173ffffffffffffffffffffffffffffffffffffffff918216911661067d602087018761126d565b73ffffffffffffffffffffffffffffffffffffffff167fa76f65411ec66a7fb6bc467432eb14767900449ae4469fa295e4441fe5e1cb7360405160405180910390a45050505050565b60006108016106d8602084018461126d565b7f183fb413000000000000000000000000000000000000000000000000000000008561070a60e0870160c0880161126d565b61071a60c0880160a0890161126d565b61072b610100890160e08a0161126d565b61073b60808a0160608b016116a4565b6107496101008b018b6114e1565b6107576101208d018d6114e1565b6107656101c08f018f6114e1565b60405160240161077f9b9a999897969594939291906116c7565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152610ef8565b905060006108ae610818604085016020860161126d565b7fc222ec8a000000000000000000000000000000000000000000000000000000008661084a60c0880160a0890161126d565b61085b610100890160e08a0161126d565b61086b60808a0160608b016116a4565b6108796101808b018b6114e1565b6108876101a08d018d6114e1565b6108956101c08f018f6114e1565b60405160240161077f9a9998979695949392919061171b565b905060006109456108c5606086016040870161126d565b7fc222ec8a00000000000000000000000000000000000000000000000000000000876108f760c0890160a08a0161126d565b6109086101008a0160e08b0161126d565b61091860808b0160608c016116a4565b6109266101408c018c6114e1565b6109346101608e018e6114e1565b8e806101c0019061089591906114e1565b905073ffffffffffffffffffffffffffffffffffffffff8516637a708e9261097360c0870160a0880161126d565b85858561098660a08b0160808c0161126d565b60405160e087901b7fffffffff0000000000000000000000000000000000000000000000000000000016815273ffffffffffffffffffffffffffffffffffffffff95861660048201529385166024850152918416604484015283166064830152909116608482015260a401600060405180830381600087803b158015610a0b57600080fd5b505af1158015610a1f573d6000803e3d6000fd5b50506040805160208101909152600081529150610a519050610a4760808701606088016116a4565b829060ff16610fd3565b610a5c81600161107c565b610a678160006110c1565b610a72816000611106565b73ffffffffffffffffffffffffffffffffffffffff861663f51e435b610a9e60c0880160a0890161126d565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff909116600482015283516024820152604401600060405180830381600087803b158015610b0b57600080fd5b505af1158015610b1f573d6000803e3d6000fd5b50505073ffffffffffffffffffffffffffffffffffffffff85169050610b4b60c0870160a0880161126d565b73ffffffffffffffffffffffffffffffffffffffff167f3a0ca721fc364424566385a1aa271ed508cc2c0949c2272575fb3013a163a45f8585610b9460a08b0160808c0161126d565b6040805173ffffffffffffffffffffffffffffffffffffffff9485168152928416602084015292168183015290519081900360600190a3505050505050565b600073ffffffffffffffffffffffffffffffffffffffff83166335ea6a75610bfe602085018561126d565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff90911660048201526024016101e060405180830381865afa158015610c68573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c8c91906113a2565b90506000610cbc73ffffffffffffffffffffffffffffffffffffffff851663c44b11f76101c6602087018761126d565b50909450600093507fc222ec8a000000000000000000000000000000000000000000000000000000009250879150610cf99050602087018761126d565b610d09604088016020890161126d565b85610d1760408a018a6114e1565b610d2460608c018c6114e1565b610d3160a08e018e6114e1565b604051602401610d4a9a99989796959493929190611596565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152610120840151909150610de4906103ad60a087016080880161126d565b610df460a085016080860161126d565b61012084015173ffffffffffffffffffffffffffffffffffffffff9182169116610e21602087018761126d565b73ffffffffffffffffffffffffffffffffffffffff167f7a943a5b6c214bf7726c069a878b1e2a8e7371981d516048b84e03743e67bc2860405160405180910390a45050505050565b6040517f4f1ef286000000000000000000000000000000000000000000000000000000008152839073ffffffffffffffffffffffffffffffffffffffff821690634f1ef28690610ec090869086906004016117d1565b600060405180830381600087803b158015610eda57600080fd5b505af1158015610eee573d6000803e3d6000fd5b5050505050505050565b60008030604051610f089061114b565b73ffffffffffffffffffffffffffffffffffffffff9091168152602001604051809103906000f080158015610f41573d6000803e3d6000fd5b506040517fd1f5789400000000000000000000000000000000000000000000000000000000815290915073ffffffffffffffffffffffffffffffffffffffff82169063d1f5789490610f9990879087906004016117d1565b600060405180830381600087803b158015610fb357600080fd5b505af1158015610fc7573d6000803e3d6000fd5b50929695505050505050565b60408051808201909152600281527f3636000000000000000000000000000000000000000000000000000000000000602082015260ff82111561104c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110439190611808565b60405180910390fd5b5081517fffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffff1660309190911b179052565b60388161108a57600061108d565b60015b83517ffffffffffffffffffffffffffffffffffffffffffffffffffeffffffffffffff1660ff9190911690911b1790915250565b603c816110cf5760006110d2565b60015b83517fffffffffffffffffffffffffffffffffffffffffffffffffefffffffffffffff1660ff9190911690911b1790915250565b603981611114576000611117565b60015b83517ffffffffffffffffffffffffffffffffffffffffffffffffffdffffffffffffff1660ff9190911690911b1790915250565b610a0e8061181c83390190565b73ffffffffffffffffffffffffffffffffffffffff8116811461117a57600080fd5b50565b6000806040838503121561119057600080fd5b823561119b81611158565b9150602083013567ffffffffffffffff8111156111b757600080fd5b830160c081860312156111c957600080fd5b809150509250929050565b600080604083850312156111e757600080fd5b82356111f281611158565b9150602083013567ffffffffffffffff81111561120e57600080fd5b830160e081860312156111c957600080fd5b6000806040838503121561123357600080fd5b823561123e81611158565b9150602083013567ffffffffffffffff81111561125a57600080fd5b83016101e081860312156111c957600080fd5b60006020828403121561127f57600080fd5b813561128a81611158565b9392505050565b6040516101e0810167ffffffffffffffff811182821017156112dc577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405290565b6000602082840312156112f457600080fd5b6040516020810181811067ffffffffffffffff8211171561133e577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040529151825250919050565b80516fffffffffffffffffffffffffffffffff8116811461136b57600080fd5b919050565b805164ffffffffff8116811461136b57600080fd5b805161ffff8116811461136b57600080fd5b805161136b81611158565b60006101e082840312156113b557600080fd5b6113bd611291565b6113c784846112e2565b81526113d56020840161134b565b60208201526113e66040840161134b565b60408201526113f76060840161134b565b60608201526114086080840161134b565b608082015261141960a0840161134b565b60a082015261142a60c08401611370565b60c082015261143b60e08401611385565b60e082015261010061144e818501611397565b90820152610120611460848201611397565b90820152610140611472848201611397565b90820152610160611484848201611397565b9082015261018061149684820161134b565b908201526101a06114a884820161134b565b908201526101c06114ba84820161134b565b908201529392505050565b6000602082840312156114d757600080fd5b61128a83836112e2565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261151657600080fd5b83018035915067ffffffffffffffff82111561153157600080fd5b60200191503681900382131561154657600080fd5b9250929050565b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b600073ffffffffffffffffffffffffffffffffffffffff808d168352808c166020840152808b1660408401525088606083015260e060808301526115de60e08301888a61154d565b82810360a08401526115f181878961154d565b905082810360c084015261160681858761154d565b9d9c50505050505050505050505050565b600061010073ffffffffffffffffffffffffffffffffffffffff808f168452808e166020850152808d166040850152808c166060850152508960808401528060a0840152611668818401898b61154d565b905082810360c084015261167d81878961154d565b905082810360e084015261169281858761154d565b9e9d5050505050505050505050505050565b6000602082840312156116b657600080fd5b813560ff8116811461128a57600080fd5b600061010073ffffffffffffffffffffffffffffffffffffffff808f168452808e166020850152808d166040850152808c1660608501525060ff8a1660808401528060a0840152611668818401898b61154d565b600073ffffffffffffffffffffffffffffffffffffffff808d168352808c166020840152808b1660408401525060ff8916606083015260e060808301526115de60e08301888a61154d565b6000815180845260005b8181101561178c57602081850181015186830182015201611770565b8181111561179e576000602083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b73ffffffffffffffffffffffffffffffffffffffff831681526040602082015260006118006040830184611766565b949350505050565b60208152600061128a602083018461176656fe60a060405234801561001057600080fd5b50604051610a0e380380610a0e83398101604081905261002f91610040565b6001600160a01b0316608052610070565b60006020828403121561005257600080fd5b81516001600160a01b038116811461006957600080fd5b9392505050565b6080516109606100ae6000396000818161014f015281816101a101528181610274015281816104110152818161043a01526105ab01526109606000f3fe60806040526004361061005a5760003560e01c80635c60da1b116100435780635c60da1b14610097578063d1f57894146100d5578063f851a440146100e85761005a565b80633659cfe6146100645780634f1ef28614610084575b6100626100fd565b005b34801561007057600080fd5b5061006261007f3660046106be565b610137565b6100626100923660046106e0565b610189565b3480156100a357600080fd5b506100ac61025a565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b6100626100e3366004610792565b6102cb565b3480156100f457600080fd5b506100ac6103f7565b61010561045c565b6101356101307f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5490565b610464565b565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614156101815761017e81610488565b50565b61017e6100fd565b3373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016141561024d576101d083610488565b60008373ffffffffffffffffffffffffffffffffffffffff1683836040516101f9929190610872565b600060405180830381855af49150503d8060008114610234576040519150601f19603f3d011682016040523d82523d6000602084013e610239565b606091505b505090508061024757600080fd5b50505050565b6102556100fd565b505050565b60003373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614156102c057507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5490565b6102c86100fd565b90565b60006102f57f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5490565b73ffffffffffffffffffffffffffffffffffffffff161461031557600080fd5b61034060017f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbd610882565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc1461036e5761036e6108c0565b610377826104d5565b8051156103f35760008273ffffffffffffffffffffffffffffffffffffffff16826040516103a591906108ef565b600060405180830381855af49150503d80600081146103e0576040519150601f19603f3d011682016040523d82523d6000602084013e6103e5565b606091505b505090508061025557600080fd5b5050565b60003373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614156102c057507f000000000000000000000000000000000000000000000000000000000000000090565b610135610593565b3660008037600080366000845af43d6000803e808015610483573d6000f35b3d6000fd5b610491816104d5565b60405173ffffffffffffffffffffffffffffffffffffffff8216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6104de81610659565b61056f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603b60248201527f43616e6e6f742073657420612070726f787920696d706c656d656e746174696f60448201527f6e20746f2061206e6f6e2d636f6e74726163742061646472657373000000000060648201526084015b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc55565b3373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000161415610135576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603260248201527f43616e6e6f742063616c6c2066616c6c6261636b2066756e6374696f6e20667260448201527f6f6d207468652070726f78792061646d696e00000000000000000000000000006064820152608401610566565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47081811480159061068d57508115155b949350505050565b803573ffffffffffffffffffffffffffffffffffffffff811681146106b957600080fd5b919050565b6000602082840312156106d057600080fd5b6106d982610695565b9392505050565b6000806000604084860312156106f557600080fd5b6106fe84610695565b9250602084013567ffffffffffffffff8082111561071b57600080fd5b818601915086601f83011261072f57600080fd5b81358181111561073e57600080fd5b87602082850101111561075057600080fd5b6020830194508093505050509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080604083850312156107a557600080fd5b6107ae83610695565b9150602083013567ffffffffffffffff808211156107cb57600080fd5b818501915085601f8301126107df57600080fd5b8135818111156107f1576107f1610763565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190838211818310171561083757610837610763565b8160405282815288602084870101111561085057600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b8183823760009101908152919050565b6000828210156108bb577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b500390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b6000825160005b8181101561091057602081860181015185830152016108f6565b8181111561091f576000828501525b50919091019291505056fea2646970667358221220feac40f3ab1e9dde3188b0a70dc8cc92d602415d67e65384a3c07c5e46c9b09164736f6c634300080a0033a26469706673582212206bc16e906c15342f001a31205b19347afebe332cf489c4741d0babbcd6a0c55064736f6c634300080a0033",
  "devdoc": {
    "author": "Aqualis",
    "kind": "dev",
    "methods": {
      "executeInitReserve(IPool,ConfiguratorInputTypes.InitReserveInput)": {
        "details": "Emits the `ReserveInitialized` event",
        "params": {
          "input": "The needed parameters for the initialization",
          "pool": "The Pool in which the reserve will be initialized"
        }
      },
      "executeUpdateAToken(IPool,ConfiguratorInputTypes.UpdateATokenInput)": {
        "details": "Emits the `ATokenUpgraded` event",
        "params": {
          "cachedPool": "The Pool containing the reserve with the aToken",
          "input": "The parameters needed for the initialize call"
        }
      },
      "executeUpdateStableDebtToken(IPool,ConfiguratorInputTypes.UpdateDebtTokenInput)": {
        "details": "Emits the `StableDebtTokenUpgraded` event",
        "params": {
          "cachedPool": "The Pool containing the reserve with the stable debt token",
          "input": "The parameters needed for the initialize call"
        }
      },
      "executeUpdateVariableDebtToken(IPool,ConfiguratorInputTypes.UpdateDebtTokenInput)": {
        "details": "Emits the `VariableDebtTokenUpgraded` event",
        "params": {
          "cachedPool": "The Pool containing the reserve with the variable debt token",
          "input": "The parameters needed for the initialize call"
        }
      }
    },
    "title": "ConfiguratorLogic library",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "executeInitReserve(IPool,ConfiguratorInputTypes.InitReserveInput)": {
        "notice": "Initialize a reserve by creating and initializing aToken, stable debt token and variable debt token"
      },
      "executeUpdateAToken(IPool,ConfiguratorInputTypes.UpdateATokenInput)": {
        "notice": "Updates the aToken implementation and initializes it"
      },
      "executeUpdateStableDebtToken(IPool,ConfiguratorInputTypes.UpdateDebtTokenInput)": {
        "notice": "Updates the stable debt token implementation and initializes it"
      },
      "executeUpdateVariableDebtToken(IPool,ConfiguratorInputTypes.UpdateDebtTokenInput)": {
        "notice": "Updates the variable debt token implementation and initializes it"
      }
    },
    "notice": "Implements the functions to initialize reserves and update aTokens and debtTokens",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}